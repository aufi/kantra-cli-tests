description: This ruleset provides analysis of logging libraries.
insights:
  clustering-00000:
    description: ''
    incidents:
    - codeSnip: "  1  <!--suppress ServletWithoutMappingInspection -->\n  2  <web-app\
        \ xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
        \n  3           xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\
        \n  4           version=\"3.0\">\n  5      <distributable />\n  6  </web-app>\n"
      lineNumber: 5
      message: ''
      uri: file:///opt/input/source/src/main/webapp/WEB-INF/web.xml
      variables:
        data: distributable
        innerText: ''
        matchingXML: ''
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Clustering Web Session
  ejb-01000:
    description: EJB Timer
    incidents:
    - codeSnip: "204  \n205      /**\n206       * Get access to the EJB Timer Service.\n\
        207       *\n208       * @exception IllegalStateException The Container throws\
        \ the exception\n209       *    if the instance is not allowed to use this\
        \ method (e.g. if the bean\n210       *    is a stateful session bean)\n211\
        \       *\n212       * @since EJB 2.1\n213       */\n214      TimerService\
        \ getTimerService() throws IllegalStateException;\n215  \n216      /**\n217\
        \       * Lookup a resource within the <code>java:</code> namespace.  Names\
        \ referring to\n218       * entries within the private component namespace\
        \ can be passed as\n219       * unqualified strings.  In that case the lookup\
        \ will be relative to\n220       * <code>\"java:comp/env/\"</code>.\n221 \
        \      *\n222       * For example, assuming an enterprise bean defines an\
        \ <code>ejb-local-ref</code>\n223       * with <code>ejb-ref-name</code> <code>\"\
        ejb/BarRef\"</code> the following two \n224       * calls to <code> EJBContext.lookup</code>\
        \ are equivalent :"
      lineNumber: 214
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/EJBContext.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/EJBContext.java
        kind: Method
        name: getTimerService
        package: javax.ejb
    - codeSnip: "214   * </pre>\n215   *\n216   * A timeout callback method can have\
        \ public, private, protected, or \n217   * package level access. A timeout\
        \ callback method must not be declared as \n218   * final or static. Timeout\
        \ callback methods must not throw application exceptions.\n219   *\n220  \
        \ * @since EJB 3.1\n221   */\n222  @Target(METHOD) \n223  @Retention(RUNTIME)\n\
        224  public @interface Schedule {\n225  \n226      /**\n227       * Specifies\
        \ one or more seconds with in a minute.\n228       */\n229      String second()\
        \ default \"0\";\n230  \n231      /**\n232       * Specifies one or more minutes\
        \ with an hour.\n233       */\n234      String minute() default \"0\";"
      lineNumber: 224
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Schedule.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Schedule.java
        kind: Interface
        name: Schedule
        package: javax.ejb
    - codeSnip: "227   * the attributes of a calendar-based timeout schedule to return\n\
        228   * them in the same syntactic format in which they were passed in to\
        \ a\n229   * <code>ScheduleExpression</code> method or supplied to the\n230\
        \   * <code>Schedule</code> annotation, and portable implementations must\n\
        231   * not assume any particular syntactic format.  Implementations are \n\
        232   * required only to preserve semantic equivalence.\n233   * \n234   *\
        \ @since EJB 3.1\n235   */\n236  \n237  public class ScheduleExpression implements\
        \ Serializable {\n238  \n239      private static final long serialVersionUID\
        \ = -3813254457230997879L;\n240  \n241      /**\n242       * Create a schedule\
        \ with the default values.\n243       */\n244      public ScheduleExpression()\
        \ {}\n245  \n246      /**\n247       * Set the second attribute."
      lineNumber: 237
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Class
        name: ScheduleExpression
        package: javax.ejb
    - codeSnip: "240  \n241      /**\n242       * Create a schedule with the default\
        \ values.\n243       */\n244      public ScheduleExpression() {}\n245  \n\
        246      /**\n247       * Set the second attribute.\n248       * @param s\
        \ the attribute value as a <code>String</code>\n249       */\n250      public\
        \ ScheduleExpression second(String s) {\n251          second_ = s; \n252 \
        \         return this;\n253      }\n254  \n255      /**\n256       * Set the\
        \ second attribute.\n257       * @param s the attribute value as an <code>int</code>,\
        \ if the value \n258       * is a simple integer value\n259       */\n260\
        \      public ScheduleExpression second(int s) {"
      lineNumber: 250
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: second
        package: javax.ejb
    - codeSnip: "250      public ScheduleExpression second(String s) {\n251      \
        \    second_ = s; \n252          return this;\n253      }\n254  \n255    \
        \  /**\n256       * Set the second attribute.\n257       * @param s the attribute\
        \ value as an <code>int</code>, if the value \n258       * is a simple integer\
        \ value\n259       */\n260      public ScheduleExpression second(int s) {\n\
        261          second_ = s + \"\";\n262          return this;\n263      }\n\
        264  \n265      /**\n266       * Return the value of the second attribute.\n\
        267       *\n268       * @return second \n269       */\n270      public String\
        \ getSecond() {"
      lineNumber: 260
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: second
        package: javax.ejb
    - codeSnip: "268       * @return second \n269       */\n270      public String\
        \ getSecond() {\n271          return second_;\n272      }\n273  \n274    \
        \  /**\n275       * Set the minute attribute.\n276       * @param m the attribute\
        \ value as a <code>String</code>\n277       */\n278      public ScheduleExpression\
        \ minute(String m) {\n279          minute_ = m;\n280          return this;\n\
        281      }\n282  \n283      /**\n284       * Set the minute attribute.\n285\
        \       * @param m the attribute value as an <code>int</code>, if the value\
        \ \n286       * is a simple integer value\n287       */\n288      public ScheduleExpression\
        \ minute(int m) {"
      lineNumber: 278
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: minute
        package: javax.ejb
    - codeSnip: "278      public ScheduleExpression minute(String m) {\n279      \
        \    minute_ = m;\n280          return this;\n281      }\n282  \n283     \
        \ /**\n284       * Set the minute attribute.\n285       * @param m the attribute\
        \ value as an <code>int</code>, if the value \n286       * is a simple integer\
        \ value\n287       */\n288      public ScheduleExpression minute(int m) {\n\
        289          minute_ = m + \"\";\n290          return this;\n291      }\n\
        292  \n293      /**\n294       * Return the value of the minute attribute.\n\
        295       *\n296       * @return minute \n297       */\n298      public String\
        \ getMinute() {"
      lineNumber: 288
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: minute
        package: javax.ejb
    - codeSnip: "296       * @return minute \n297       */\n298      public String\
        \ getMinute() {\n299  \treturn minute_;\n300      }\n301  \n302      /**\n\
        303       * Set the hour attribute.\n304       * @param h the attribute value\
        \ as a <code>String</code>\n305       */\n306      public ScheduleExpression\
        \ hour(String h) {\n307          hour_ = h;\n308          return this;\n309\
        \      }\n310  \n311      /**\n312       * Set the hour attribute.\n313  \
        \     * @param h the attribute value as an <code>int</code>, if the value\
        \ \n314       * is a simple integer value\n315       */\n316      public ScheduleExpression\
        \ hour(int h) {"
      lineNumber: 306
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: hour
        package: javax.ejb
    - codeSnip: "306      public ScheduleExpression hour(String h) {\n307        \
        \  hour_ = h;\n308          return this;\n309      }\n310  \n311      /**\n\
        312       * Set the hour attribute.\n313       * @param h the attribute value\
        \ as an <code>int</code>, if the value \n314       * is a simple integer value\n\
        315       */\n316      public ScheduleExpression hour(int h) {\n317      \
        \    hour_ = h + \"\";\n318          return this;\n319      }\n320  \n321\
        \      /**\n322       * Return the value of the hour attribute.\n323     \
        \  *\n324       * @return hour\n325       */\n326      public String getHour()\
        \ {"
      lineNumber: 316
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: hour
        package: javax.ejb
    - codeSnip: "324       * @return hour\n325       */\n326      public String getHour()\
        \ {\n327          return hour_;\n328      }\n329  \n330      /**\n331    \
        \   * Set the day of the month attribute.\n332       * @param d the attribute\
        \ value as a <code>String</code>\n333       */\n334      public ScheduleExpression\
        \ dayOfMonth(String d) {\n335          dayOfMonth_ = d;\n336          return\
        \ this;\n337      }\n338  \n339      /**\n340       * Set the day of the month\
        \ attribute.\n341       * @param d the attribute value as an <code>int</code>,\
        \ if the value \n342       * is a simple integer value\n343       */\n344\
        \      public ScheduleExpression dayOfMonth(int d) {"
      lineNumber: 334
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: dayOfMonth
        package: javax.ejb
    - codeSnip: "334      public ScheduleExpression dayOfMonth(String d) {\n335  \
        \        dayOfMonth_ = d;\n336          return this;\n337      }\n338  \n\
        339      /**\n340       * Set the day of the month attribute.\n341       *\
        \ @param d the attribute value as an <code>int</code>, if the value \n342\
        \       * is a simple integer value\n343       */\n344      public ScheduleExpression\
        \ dayOfMonth(int d) {\n345          dayOfMonth_ = d + \"\";\n346         \
        \ return this;\n347      }\n348  \n349      /**\n350       * Return the value\
        \ of the day of the month attribute.\n351       *\n352       * @return day\
        \ of the month\n353       */\n354      public String getDayOfMonth() {"
      lineNumber: 344
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: dayOfMonth
        package: javax.ejb
    - codeSnip: "352       * @return day of the month\n353       */\n354      public\
        \ String getDayOfMonth() {\n355  \treturn dayOfMonth_;\n356      }\n357  \n\
        358      /**\n359       * Set the month attribute.\n360       * @param m the\
        \ attribute value as a <code>String</code>\n361       */\n362      public\
        \ ScheduleExpression month(String m) {\n363          month_ = m;\n364    \
        \      return this;\n365      }\n366  \n367      /**\n368       * Set the\
        \ month attribute.\n369       * @param m the attribute value as an <code>int</code>,\
        \ if the value \n370       * is a simple integer value\n371       */\n372\
        \      public ScheduleExpression month(int m) {"
      lineNumber: 362
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: month
        package: javax.ejb
    - codeSnip: "362      public ScheduleExpression month(String m) {\n363       \
        \   month_ = m;\n364          return this;\n365      }\n366  \n367      /**\n\
        368       * Set the month attribute.\n369       * @param m the attribute value\
        \ as an <code>int</code>, if the value \n370       * is a simple integer value\n\
        371       */\n372      public ScheduleExpression month(int m) {\n373     \
        \     month_ = m + \"\";\n374          return this;\n375      }\n376  \n377\
        \      /**\n378       * Return the value of the month attribute.\n379    \
        \   *\n380       * @return month\n381       */\n382      public String getMonth()\
        \ {"
      lineNumber: 372
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: month
        package: javax.ejb
    - codeSnip: "380       * @return month\n381       */\n382      public String getMonth()\
        \ {\n383          return month_;\n384      }\n385  \n386      /**\n387   \
        \    * Set the day of the week attribute.\n388       * @param d the attribute\
        \ value as a <code>String</code>\n389       */\n390      public ScheduleExpression\
        \ dayOfWeek(String d) {\n391          dayOfWeek_ = d;\n392          return\
        \ this;\n393      }\n394  \n395      /**\n396       * Set the day of the week\
        \ attribute.\n397       * @param d the attribute value as an <code>int</code>,\
        \ if the value \n398       * is a simple integer value\n399       */\n400\
        \      public ScheduleExpression dayOfWeek(int d) {"
      lineNumber: 390
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: dayOfWeek
        package: javax.ejb
    - codeSnip: "390      public ScheduleExpression dayOfWeek(String d) {\n391   \
        \       dayOfWeek_ = d;\n392          return this;\n393      }\n394  \n395\
        \      /**\n396       * Set the day of the week attribute.\n397       * @param\
        \ d the attribute value as an <code>int</code>, if the value \n398       *\
        \ is a simple integer value\n399       */\n400      public ScheduleExpression\
        \ dayOfWeek(int d) {\n401          dayOfWeek_ = d + \"\";\n402          return\
        \ this;\n403      }\n404  \n405      /**\n406       * Return the value of\
        \ the day of the week attribute.\n407       *\n408       * @return day of\
        \ the week\n409       */\n410      public String getDayOfWeek() {"
      lineNumber: 400
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: dayOfWeek
        package: javax.ejb
    - codeSnip: "408       * @return day of the week\n409       */\n410      public\
        \ String getDayOfWeek() {\n411  \treturn dayOfWeek_;\n412      }\n413  \n\
        414      /**\n415       * Set the year attribute.\n416       * @param y the\
        \ attribute value as a <code>String</code>\n417       */\n418      public\
        \ ScheduleExpression year(String y) {\n419          year_ = y;\n420      \
        \    return this;\n421      }\n422  \n423      /**\n424       * Set the year\
        \ attribute.\n425       * @param y the attribute value as an <code>int</code>,\
        \ if the value \n426       * is a simple integer value\n427       */\n428\
        \      public ScheduleExpression year(int y) {"
      lineNumber: 418
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: year
        package: javax.ejb
    - codeSnip: "418      public ScheduleExpression year(String y) {\n419        \
        \  year_ = y;\n420          return this;\n421      }\n422  \n423      /**\n\
        424       * Set the year attribute.\n425       * @param y the attribute value\
        \ as an <code>int</code>, if the value \n426       * is a simple integer value\n\
        427       */\n428      public ScheduleExpression year(int y) {\n429      \
        \    year_ = y + \"\";\n430          return this;\n431      }\n432  \n433\
        \      /**\n434       * Return the value of the year attribute.\n435     \
        \  *\n436       * @return year\n437       */\n438      public String getYear()\
        \ {"
      lineNumber: 428
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: year
        package: javax.ejb
    - codeSnip: "436       * @return year\n437       */\n438      public String getYear()\
        \ {\n439          return year_;\n440      }\n441  \n442      /**\n443    \
        \   * Set the timezone.\n444       * @param timezoneID the Time zone specified\
        \ as an ID String\n445       */\n446      public ScheduleExpression timezone(String\
        \ timezoneID) {\n447          timezoneID_ = timezoneID;\n448          return\
        \ this;\n449      }\n450  \n451      /**\n452       * Return the timezone,\
        \ if set; otherwise null.\n453       *\n454       * @return timezone\n455\
        \       */\n456      public String getTimezone() {"
      lineNumber: 446
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: timezone
        package: javax.ejb
    - codeSnip: "454       * @return timezone\n455       */\n456      public String\
        \ getTimezone() {\n457          return timezoneID_;\n458      }\n459  \n460\
        \      /**\n461       * Set the start date.\n462       * @param s the start\
        \ date \n463       */\n464      public ScheduleExpression start(Date s) {\n\
        465          start_ = (s == null) ? null : new Date(s.getTime());\n466  \n\
        467          return this;\n468      }\n469  \n470      /**\n471       * Return\
        \ the start date, if set; otherwise null.\n472       *\n473       * @return\
        \ start date\n474       */"
      lineNumber: 464
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: start
        package: javax.ejb
    - codeSnip: "473       * @return start date\n474       */\n475       public Date\
        \ getStart() {\n476          return (start_ == null) ? null : new Date(start_.getTime());\n\
        477      }\n478  \n479      /**\n480       * Set the end date.\n481      \
        \ * @param e the end date \n482       */\n483      public ScheduleExpression\
        \ end(Date e) {\n484          end_ = (e == null) ? null : new Date(e.getTime());\n\
        485  \n486          return this;\n487      }\n488  \n489     /**\n490    \
        \   * Return the end date, if set; otherwise null.\n491       *\n492     \
        \  * @return end date\n493       */"
      lineNumber: 483
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/ScheduleExpression.java
        kind: Method
        name: end
        package: javax.ejb
    - codeSnip: "57   * void &#060;METHOD&#062;()\n58   * void &#060;METHOD&#062;(Timer\
        \ timer)\n59   * </pre>\n60   *\n61   * @see Schedule\n62   *\n63   * @since\
        \ EJB 3.1\n64   */\n65  @Target(METHOD)\n66  @Retention(RUNTIME)\n67  public\
        \ @interface Schedules {\n68  \n69      /**\n70       * One or more calendar-based\
        \ timer specifications.\n71       */\n72      Schedule[] value();\n73  }\n"
      lineNumber: 67
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Schedules.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Schedules.java
        kind: Interface
        name: Schedules
        package: javax.ejb
    - codeSnip: "62   *\n63   * @since EJB 3.1\n64   */\n65  @Target(METHOD)\n66 \
        \ @Retention(RUNTIME)\n67  public @interface Schedules {\n68  \n69      /**\n\
        70       * One or more calendar-based timer specifications.\n71       */\n\
        72      Schedule[] value();\n73  }\n"
      lineNumber: 72
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Schedules.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Schedules.java
        kind: Method
        name: value
        package: javax.ejb
    - codeSnip: "49   * bean class, a message-driven bean class, or an EJB 2.x entity\
        \ bean class.\n50   * <p>\n51   * If the bean implements the <code>TimedObject</code>\
        \ interface, the\n52   * <code>Timeout</code> annotation, if used, can only\
        \ be applied to \n53   * the <code>ejbTimeout</code> method.\n54   *\n55 \
        \  * @see Timeout\n56   *\n57   * @since EJB 2.1\n58   */\n59  public interface\
        \ TimedObject {\n60  \n61      /**\n62       * Invoked by the EJB container\
        \ upon timer expiration.\n63       *\n64       * @param timer timer whose\
        \ expiration caused this notification.\n65       *\n66       */\n67      public\
        \ void ejbTimeout(Timer timer);\n68  \n69  } "
      lineNumber: 59
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimedObject.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimedObject.java
        kind: Interface
        name: TimedObject
        package: javax.ejb
    - codeSnip: "57   * @since EJB 2.1\n58   */\n59  public interface TimedObject\
        \ {\n60  \n61      /**\n62       * Invoked by the EJB container upon timer\
        \ expiration.\n63       *\n64       * @param timer timer whose expiration\
        \ caused this notification.\n65       *\n66       */\n67      public void\
        \ ejbTimeout(Timer timer);\n68  \n69  } \n"
      lineNumber: 67
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimedObject.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimedObject.java
        kind: Method
        name: ejbTimeout
        package: javax.ejb
    - codeSnip: "65   * <p>\n66   * If the bean implements the <code>TimedObject</code>\
        \ interface, the\n67   * <code>Timeout</code> annotation can only be applied\
        \ to the\n68   * <code>ejbTimeout</code> method.\n69   *\n70   * @since EJB\
        \ 3.0\n71   */\n72  \n73  @Target(METHOD) \n74  @Retention(RUNTIME)\n75  public\
        \ @interface Timeout {}\n"
      lineNumber: 75
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timeout.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timeout.java
        kind: Interface
        name: Timeout
        package: javax.ejb
    - codeSnip: "126       * calendar-based timer.\n127       * \n128       * @exception\
        \ javax.ejb.NoSuchObjectLocalException If invoked on a timer\n129       *\
        \ that has expired or has been cancelled.\n130       * \n131       * @exception\
        \ javax.ejb.EJBException If this method could not complete due\n132      \
        \ * to a system-level failure.\n133       *\n134       * @since EJB 3.1\n\
        135       */\n136      public ScheduleExpression getSchedule() throws java.lang.IllegalStateException,\
        \ javax.ejb.NoSuchObjectLocalException, javax.ejb.EJBException;\n137  \n138\
        \      /**\n139       * Return whether this timer has persistent semantics.\n\
        140       *\n141       * @return boolean indicating whether the timer is persistent.\n\
        142  \n143       * @exception java.lang.IllegalStateException If this method\
        \ is\n144       * invoked while the instance is in a state that does not allow\
        \ access \n145       * to this method. \n146       * "
      lineNumber: 136
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timer.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timer.java
        kind: Method
        name: getSchedule
        package: javax.ejb
    - codeSnip: "205       * @exception java.lang.IllegalStateException If this method\
        \ is\n206       * invoked while the instance is in a state that does not allow\
        \ access \n207       * to this method.  Also thrown if invoked on a non-persistent\
        \ timer.\n208       * \n209       * @exception javax.ejb.NoSuchObjectLocalException\
        \ If invoked on a timer\n210       * that has expired or has been cancelled.\n\
        211       * \n212       * @exception javax.ejb.EJBException If this method\
        \ could not complete due\n213       * to a system-level failure.\n214    \
        \   */\n215      public TimerHandle getHandle() throws java.lang.IllegalStateException,\
        \ javax.ejb.NoSuchObjectLocalException, javax.ejb.EJBException;\n216  \n217\
        \  \n218  \n219  } \n"
      lineNumber: 215
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timer.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timer.java
        kind: Method
        name: getHandle
        package: javax.ejb
    - codeSnip: "43  import java.io.Serializable;\n44  import java.util.Date;\n45\
        \  \n46  /**\n47   *\n48   * The <code>Timer</code> interface contains information\
        \ about a timer\n49   * that was created through the EJB Timer Service.\n\
        50   *\n51   * @since EJB 2.1\n52   */\n53  public interface Timer {\n54 \
        \ \n55      /**\n56       * Cause the timer and all its associated expiration\
        \ notifications to\n57       * be cancelled.\n58       *\n59       *\n60 \
        \      * @exception java.lang.IllegalStateException If this method is\n61\
        \       * invoked while the instance is in a state that does not allow access\
        \ \n62       * to this method.\n63       * "
      lineNumber: 53
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timer.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/Timer.java
        kind: Interface
        name: Timer
        package: javax.ejb
    - codeSnip: "50   * made available to corresponding timer callbacks.  It is optional\n\
        51   * and defaults to <code>null</code>.</p>\n52   *\n53   * <p>The <code>persistent</code>\
        \ property determines whether the\n54   * corresponding timer has a lifetime\
        \ that spans the JVM in which it\n55   * was created.  It is optional and\
        \ defaults to <code>true</code>.</p>\n56   *\n57   * @since EJB 3.1\n58  \
        \ */\n59  \n60  public class TimerConfig {\n61  \n62      public TimerConfig()\
        \ {}\n63  \n64      public TimerConfig(Serializable info, boolean persistent)\
        \ {\n65  \tinfo_ = info;\n66    \tpersistent_ = persistent;\n67      }\n68\
        \  \n69      /**\n70       * Set the <code>info</code> object made available\
        \ to timer callbacks."
      lineNumber: 60
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerConfig.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerConfig.java
        kind: Class
        name: TimerConfig
        package: javax.ejb
    - codeSnip: "45  /**\n46   *\n47   * The TimerHandle interface allows the bean\
        \ provider to obtain a\n48   * serializable timer handle that may be persisted.\
        \ \n49   * <p>\n50   * Since timers are local objects, a timer handle must\
        \ not be passed through \n51   * a bean's remote business interface, remote\
        \ interface or web service interface.\n52   *\n53   * @since EJB 2.1\n54 \
        \  */\n55  public interface TimerHandle extends Serializable {\n56  \n57 \
        \     /**\n58       * Obtain a reference to the timer represented by this\
        \ handle.\n59       *\n60       * @return a reference to the timer represented\
        \ by this handle.\n61       *\n62       * @exception java.lang.IllegalStateException\
        \ If this method is\n63       * invoked while the instance is in a state that\
        \ does not allow access \n64       * to this method.\n65       * "
      lineNumber: 55
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerHandle.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerHandle.java
        kind: Interface
        name: TimerHandle
        package: javax.ejb
    - codeSnip: "62       * @exception java.lang.IllegalStateException If this method\
        \ is\n63       * invoked while the instance is in a state that does not allow\
        \ access \n64       * to this method.\n65       * \n66       * @exception\
        \ javax.ejb.NoSuchObjectLocalException If invoked on a\n67       * handle\
        \ whose associated timer has expired or has been cancelled.\n68       * \n\
        69       * @exception javax.ejb.EJBException If this method could not complete\
        \ due\n70       * to a system-level failure.\n71       */\n72      public\
        \ Timer getTimer() throws java.lang.IllegalStateException, \n73          javax.ejb.NoSuchObjectLocalException,\
        \ javax.ejb.EJBException;\n74  \n75  } \n"
      lineNumber: 72
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerHandle.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerHandle.java
        kind: Method
        name: getTimer
        package: javax.ejb
    - codeSnip: " 96       *\n 97       * @exception java.lang.IllegalStateException\
        \ If this method is\n 98       * invoked while the instance is in a state\
        \ that does not allow access \n 99       * to this method.\n100       * \n\
        101       * @exception javax.ejb.EJBException If this method fails due to\
        \ a \n102       * system-level failure.\n103       * \n104       * @since\
        \ EJB 3.1\n105       */\n106      public Timer createSingleActionTimer(long\
        \ duration, TimerConfig timerConfig) throws\n107          java.lang.IllegalArgumentException,\
        \ java.lang.IllegalStateException,\n108          javax.ejb.EJBException;\n\
        109  \n110      /**\n111       * Create an interval timer whose first expiration\
        \ occurs after a specified\n112       * duration, and whose subsequent expirations\
        \ occur after a specified\n113       * interval.\n114       *\n115       *\
        \ @param initialDuration The number of milliseconds that must elapse \n116\
        \       * before the first timer expiration notification."
      lineNumber: 106
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createSingleActionTimer
        package: javax.ejb
    - codeSnip: "131       * negative or intervalDuration is negative.\n132      \
        \ * \n133       * @exception java.lang.IllegalStateException If this method\
        \ is\n134       * invoked while the instance is in a state that does not allow\
        \ access \n135       * to this method.\n136       * \n137       * @exception\
        \ javax.ejb.EJBException If this method could not complete\n138       * due\
        \ to a system-level failure.\n139       * \n140       */\n141      public\
        \ Timer createTimer(long initialDuration, long intervalDuration, \n142   \
        \                            Serializable info) throws\n143          java.lang.IllegalArgumentException,\
        \ java.lang.IllegalStateException, \n144          javax.ejb.EJBException;\n\
        145  \n146      /**\n147       * Create an interval timer whose first expiration\
        \ occurs after a specified\n148       * duration, and whose subsequent expirations\
        \ occur after a specified\n149       * interval.\n150       *\n151       *\
        \ @param initialDuration The number of milliseconds that must elapse "
      lineNumber: 141
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createTimer
        package: javax.ejb
    - codeSnip: "167       * \n168       * @exception java.lang.IllegalStateException\
        \ If this method is\n169       * invoked while the instance is in a state\
        \ that does not allow access \n170       * to this method.\n171       * \n\
        172       * @exception javax.ejb.EJBException If this method could not complete\n\
        173       * due to a system-level failure.\n174       * \n175       * @since\
        \ EJB 3.1\n176       */\n177      public Timer createIntervalTimer(long initialDuration,\
        \ long intervalDuration, \n178                               TimerConfig timerConfig)\
        \ throws\n179          java.lang.IllegalArgumentException, java.lang.IllegalStateException,\
        \ \n180          javax.ejb.EJBException;\n181          \n182  \n183      /**\n\
        184       * Create a single-action timer that expires at a given point in\
        \ time.\n185       *\n186       * @param expiration The point in time at which\
        \ the timer must expire.\n187       *"
      lineNumber: 177
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createIntervalTimer
        package: javax.ejb
    - codeSnip: "168       * @exception java.lang.IllegalStateException If this method\
        \ is\n169       * invoked while the instance is in a state that does not allow\
        \ access \n170       * to this method.\n171       * \n172       * @exception\
        \ javax.ejb.EJBException If this method could not complete\n173       * due\
        \ to a system-level failure.\n174       * \n175       * @since EJB 3.1\n176\
        \       */\n177      public Timer createIntervalTimer(long initialDuration,\
        \ long intervalDuration, \n178                               TimerConfig timerConfig)\
        \ throws\n179          java.lang.IllegalArgumentException, java.lang.IllegalStateException,\
        \ \n180          javax.ejb.EJBException;\n181          \n182  \n183      /**\n\
        184       * Create a single-action timer that expires at a given point in\
        \ time.\n185       *\n186       * @param expiration The point in time at which\
        \ the timer must expire.\n187       *\n188       * @param info application\
        \ information to be delivered along"
      lineNumber: 178
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createIntervalTimer
        package: javax.ejb
    - codeSnip: "194       * expiration.getTime() is negative.\n195       *\n196 \
        \      * @exception java.lang.IllegalStateException If this method is\n197\
        \       * invoked while the instance is in a state that does not allow access\
        \ \n198       * to this method.\n199       * \n200       * @exception javax.ejb.EJBException\
        \ If this method could not complete\n201       * due to a system-level failure.\n\
        202       * \n203       */\n204      public Timer createTimer(Date expiration,\
        \ Serializable info) throws\n205          java.lang.IllegalArgumentException,\
        \ java.lang.IllegalStateException, \n206          javax.ejb.EJBException;\n\
        207  \n208      /**\n209       * Create a single-action timer that expires\
        \ at a given point in time.\n210       *\n211       * @param expiration the\
        \ point in time at which the timer must expire.\n212       *\n213       *\
        \ @param timerConfig timer configuration.\n214       *                    "
      lineNumber: 204
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createTimer
        package: javax.ejb
    - codeSnip: "219       *\n220       * @exception java.lang.IllegalStateException\
        \ If this method is\n221       * invoked while the instance is in a state\
        \ that does not allow access \n222       * to this method.\n223       * \n\
        224       * @exception javax.ejb.EJBException If this method could not complete\n\
        225       * due to a system-level failure.\n226       * \n227       * @since\
        \ EJB 3.1\n228       */\n229      public Timer createSingleActionTimer(Date\
        \ expiration, TimerConfig timerConfig) throws\n230          java.lang.IllegalArgumentException,\
        \ java.lang.IllegalStateException, \n231          javax.ejb.EJBException;\n\
        232          \n233          \n234  \n235      /**\n236       * Create an interval\
        \ timer whose first expiration occurs at a given\n237       * point in time\
        \ and whose subsequent expirations occur after a specified\n238       * interval.\n\
        239       *"
      lineNumber: 229
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createSingleActionTimer
        package: javax.ejb
    - codeSnip: "257       * negative, or if intervalDuration is negative.\n258  \
        \     *\n259       * @exception java.lang.IllegalStateException If this method\
        \ is\n260       * invoked while the instance is in a state that does not allow\
        \ access \n261       * to this method.\n262       * \n263       * @exception\
        \ javax.ejb.EJBException If this method could not complete\n264       * due\
        \ to a system-level failure.\n265       * \n266       */\n267      public\
        \ Timer createTimer(Date initialExpiration, long intervalDuration, \n268 \
        \                              Serializable info) throws\n269          java.lang.IllegalArgumentException,\
        \ java.lang.IllegalStateException,\n270          javax.ejb.EJBException;\n\
        271  \n272      /**\n273       * Create an interval timer whose first expiration\
        \ occurs at a given\n274       * point in time and whose subsequent expirations\
        \ occur after a specified\n275       * interval.\n276       *\n277       *\
        \ @param initialExpiration the point in time at which the first timer"
      lineNumber: 267
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createTimer
        package: javax.ejb
    - codeSnip: "294       *\n295       * @exception java.lang.IllegalStateException\
        \ If this method is\n296       * invoked while the instance is in a state\
        \ that does not allow access \n297       * to this method.\n298       * \n\
        299       * @exception javax.ejb.EJBException If this method could not complete\n\
        300       * due to a system-level failure.\n301       * \n302       * @since\
        \ EJB 3.1\n303       */\n304      public Timer createIntervalTimer(Date initialExpiration,\
        \ long intervalDuration, \n305                               TimerConfig timerConfig)\
        \ throws\n306          java.lang.IllegalArgumentException, java.lang.IllegalStateException,\n\
        307          javax.ejb.EJBException;\n308  \n309      /**\n310       * Create\
        \ a calendar-based timer based on the input schedule expression.\n311    \
        \   *\n312       * @param schedule a schedule expression describing the timeouts\n\
        313       * for this timer.\n314       *"
      lineNumber: 304
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createIntervalTimer
        package: javax.ejb
    - codeSnip: "295       * @exception java.lang.IllegalStateException If this method\
        \ is\n296       * invoked while the instance is in a state that does not allow\
        \ access \n297       * to this method.\n298       * \n299       * @exception\
        \ javax.ejb.EJBException If this method could not complete\n300       * due\
        \ to a system-level failure.\n301       * \n302       * @since EJB 3.1\n303\
        \       */\n304      public Timer createIntervalTimer(Date initialExpiration,\
        \ long intervalDuration, \n305                               TimerConfig timerConfig)\
        \ throws\n306          java.lang.IllegalArgumentException, java.lang.IllegalStateException,\n\
        307          javax.ejb.EJBException;\n308  \n309      /**\n310       * Create\
        \ a calendar-based timer based on the input schedule expression.\n311    \
        \   *\n312       * @param schedule a schedule expression describing the timeouts\n\
        313       * for this timer.\n314       *\n315       * @return the newly created\
        \ Timer."
      lineNumber: 305
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createIntervalTimer
        package: javax.ejb
    - codeSnip: "319       *\n320       * @exception java.lang.IllegalStateException\
        \ If this method is\n321       * invoked while the instance is in a state\
        \ that does not allow access \n322       * to this method.\n323       * \n\
        324       * @exception javax.ejb.EJBException If this method could not complete\n\
        325       * due to a system-level failure.\n326       * \n327       * @since\
        \ EJB 3.1\n328       */\n329      public Timer createCalendarTimer(ScheduleExpression\
        \ schedule) \n330          throws java.lang.IllegalArgumentException, \n331\
        \                 java.lang.IllegalStateException, javax.ejb.EJBException;\n\
        332  \n333      /**\n334       * Create a calendar-based timer based on the\
        \ input schedule expression.\n335       *\n336       * @param schedule a schedule\
        \ expression describing the timeouts for this timer.\n337       *\n338   \
        \    * @param timerConfig timer configuration.\n339       *              \
        \      "
      lineNumber: 329
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createCalendarTimer
        package: javax.ejb
    - codeSnip: "344       *\n345       * @exception java.lang.IllegalStateException\
        \ If this method is\n346       * invoked while the instance is in a state\
        \ that does not allow access \n347       * to this method.\n348       * \n\
        349       * @exception javax.ejb.EJBException If this method could not complete\n\
        350       * due to a system-level failure.\n351       * \n352       * @since\
        \ EJB 3.1\n353       */\n354      public Timer createCalendarTimer(ScheduleExpression\
        \ schedule, TimerConfig timerConfig) \n355          throws java.lang.IllegalArgumentException,\
        \ \n356                 java.lang.IllegalStateException, javax.ejb.EJBException;\n\
        357  \n358      /**\n359       * Returns all active timers associated with\
        \ this bean. These include both the \n360       * programmatically-created\
        \ timers and the automatically-created timers.\n361       *\n362       * @return\
        \ a collection of <code>javax.ejb.Timer</code> objects.\n363       *\n364\
        \       * @exception java.lang.IllegalStateException If this method is"
      lineNumber: 354
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createCalendarTimer
        package: javax.ejb
    - codeSnip: "362       * @return a collection of <code>javax.ejb.Timer</code>\
        \ objects.\n363       *\n364       * @exception java.lang.IllegalStateException\
        \ If this method is\n365       * invoked while the instance is in a state\
        \ that does not allow access \n366       * to this method.\n367       * \n\
        368       * @exception javax.ejb.EJBException If this method could not complete\n\
        369       * due to a system-level failure.\n370       * \n371       */\n372\
        \      public Collection<Timer> getTimers() throws java.lang.IllegalStateException,\n\
        373          javax.ejb.EJBException;\n374  \n375      /**\n376       * Returns\
        \ all active timers associated with the beans in the same module in \n377\
        \       * which the caller bean is packaged. These include both the\n378 \
        \      * programmatically-created timers and the automatically-created timers.\n\
        379       *\n380       * @return a collection of <code>javax.ejb.Timer</code>\
        \ objects.\n381       *\n382       * @exception java.lang.IllegalStateException\
        \ If this method is"
      lineNumber: 372
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: getTimers
        package: javax.ejb
    - codeSnip: "381       *\n382       * @exception java.lang.IllegalStateException\
        \ If this method is\n383       * invoked while the instance is in a state\
        \ that does not allow access\n384       * to this method.\n385       *\n386\
        \       * @exception javax.ejb.EJBException If this method could not complete\n\
        387       * due to a system-level failure.\n388       *\n389       * @since\
        \ EJB 3.2\n390       */\n391      public Collection<Timer> getAllTimers()\
        \ throws java.lang.IllegalStateException,\n392          javax.ejb.EJBException;\n\
        393  \n394  } \n"
      lineNumber: 391
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: getAllTimers
        package: javax.ejb
    - codeSnip: "48   * The TimerService interface provides enterprise bean components\
        \ with\n49   * access to the container-provided Timer Service.  The EJB Timer\n\
        50   * Service allows stateless session beans, singleton session beans,\n\
        51   * message-driven beans, and EJB 2.x entity beans to be registered for\n\
        52   * timer callback events at a specified time, after a specified\n53  \
        \ * elapsed time, after a specified interval, or according to a\n54   * calendar-based\
        \ schedule.\n55   *\n56   * @since EJB 2.1\n57   */\n58  public interface\
        \ TimerService {\n59  \n60      /**\n61       * Create a single-action timer\
        \ that expires after a specified duration.\n62       *\n63       * @param\
        \ duration the number of milliseconds that must elapse before\n64       *\
        \ the timer expires.\n65       *\n66       * @param info application information\
        \ to be delivered along\n67       * with the timer expiration notification.\
        \ This can be null.\n68       *                    "
      lineNumber: 58
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Interface
        name: TimerService
        package: javax.ejb
    - codeSnip: "71       * @exception java.lang.IllegalArgumentException If duration\
        \ is negative\n72       *\n73       * @exception java.lang.IllegalStateException\
        \ If this method is\n74       * invoked while the instance is in a state that\
        \ does not allow access \n75       * to this method.\n76       * \n77    \
        \   * @exception javax.ejb.EJBException If this method fails due to a \n78\
        \       * system-level failure.\n79       * \n80       */\n81      public\
        \ Timer createTimer(long duration, Serializable info) throws\n82         \
        \ java.lang.IllegalArgumentException, java.lang.IllegalStateException,\n83\
        \          javax.ejb.EJBException;\n84  \n85      /**\n86       * Create a\
        \ single-action timer that expires after a specified duration.\n87       *\n\
        88       * @param duration the number of milliseconds that must elapse before\n\
        89       * the timer expires.\n90       *\n91       * @param timerConfig timer\
        \ configuration."
      lineNumber: 81
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ejb/TimerService.java
        kind: Method
        name: createTimer
        package: javax.ejb
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=EJB Timer
  javaee-technology-usage-00020-javax:
    description: JavaEE javax
    incidents:
    - codeSnip: " 1  package com.redhat.coolstore.persistence;\n 2  \n 3  import javax.enterprise.context.Dependent;\n\
        \ 4  import javax.enterprise.inject.Produces;\n 5  import javax.persistence.EntityManager;\n\
        \ 6  import javax.persistence.PersistenceContext;\n 7  \n 8  @Dependent\n\
        \ 9  public class Resources {\n10  \n11      @PersistenceContext\n12     \
        \ private EntityManager em;\n13  \n14      @Produces"
      lineNumber: 4
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/persistence/Resources.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/persistence/Resources.java
        kind: Module
        name: javax.enterprise.inject.Produces
        package: com.redhat.coolstore.persistence
    - codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import java.io.Serializable;\n\
        \ 4  import java.util.ArrayList;\n 5  import java.util.HashMap;\n 6  import\
        \ java.util.List;\n 7  import java.util.Map;\n 8  \n 9  import javax.enterprise.context.SessionScoped;\n\
        10  import javax.inject.Inject;\n11  import javax.ws.rs.DELETE;\n12  import\
        \ javax.ws.rs.GET;\n13  import javax.ws.rs.POST;\n14  import javax.ws.rs.Path;\n\
        15  import javax.ws.rs.PathParam;\n16  import javax.ws.rs.Produces;\n17  import\
        \ javax.ws.rs.core.MediaType;\n18  \n19  import com.redhat.coolstore.model.Product;\n\
        20  import com.redhat.coolstore.model.ShoppingCart;"
      lineNumber: 10
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.rest
    - codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import java.io.Serializable;\n\
        \ 4  import java.util.List;\n 5  \n 6  import javax.enterprise.context.RequestScoped;\n\
        \ 7  import javax.inject.Inject;\n 8  import javax.ws.rs.Consumes;\n 9  import\
        \ javax.ws.rs.GET;\n10  import javax.ws.rs.Path;\n11  import javax.ws.rs.PathParam;\n\
        12  import javax.ws.rs.Produces;\n13  import javax.ws.rs.core.MediaType;\n\
        14  \n15  import com.redhat.coolstore.model.Order;\n16  import com.redhat.coolstore.service.OrderService;\n\
        17  "
      lineNumber: 7
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.rest
    - codeSnip: " 1  package com.redhat.coolstore.rest;\n 2  \n 3  import java.io.Serializable;\n\
        \ 4  import java.util.List;\n 5  \n 6  import javax.enterprise.context.RequestScoped;\n\
        \ 7  import javax.inject.Inject;\n 8  import javax.ws.rs.*;\n 9  import javax.ws.rs.core.MediaType;\n\
        10  \n11  import com.redhat.coolstore.model.Product;\n12  import com.redhat.coolstore.service.ProductService;\n\
        13  \n14  @RequestScoped\n15  @Path(\"/products\")\n16  @Consumes(MediaType.APPLICATION_JSON)\n\
        17  @Produces(MediaType.APPLICATION_JSON)"
      lineNumber: 7
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.rest
    - codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import java.util.List;\n\
        \ 4  import java.util.logging.Logger;\n 5  \n 6  import javax.inject.Inject;\n\
        \ 7  \n 8  import javax.persistence.criteria.CriteriaBuilder;\n 9  import\
        \ javax.persistence.criteria.CriteriaQuery;\n10  import javax.persistence.criteria.Root;\n\
        11  \n12  import javax.ejb.Stateless;\n13  import javax.persistence.EntityManager;\n\
        14  \n15  import com.redhat.coolstore.model.*;\n16  "
      lineNumber: 6
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/CatalogService.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/CatalogService.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.service
    - codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import com.redhat.coolstore.model.Order;\n\
        \ 4  import com.redhat.coolstore.utils.Transformers;\n 5  \n 6  import javax.inject.Inject;\n\
        \ 7  import javax.jms.*;\n 8  import javax.naming.Context;\n 9  import javax.naming.InitialContext;\n\
        10  import javax.naming.NamingException;\n11  import javax.rmi.PortableRemoteObject;\n\
        12  import java.util.Hashtable;\n13  \n14  public class InventoryNotificationMDB\
        \ implements MessageListener {\n15  \n16      private static final int LOW_THRESHOLD\
        \ = 50;"
      lineNumber: 6
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.service
    - codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import com.redhat.coolstore.model.Order;\n\
        \ 4  import java.util.List;\n 5  import javax.ejb.Stateless;\n 6  import javax.inject.Inject;\n\
        \ 7  import javax.persistence.EntityManager;\n 8  import javax.persistence.criteria.CriteriaBuilder;\n\
        \ 9  import javax.persistence.criteria.CriteriaQuery;\n10  import javax.persistence.criteria.Root;\n\
        11  \n12  @Stateless\n13  public class OrderService {\n14  \n15    @Inject\n\
        16    private EntityManager em;"
      lineNumber: 6
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderService.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderService.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.service
    - codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import javax.ejb.ActivationConfigProperty;\n\
        \ 4  import javax.ejb.MessageDriven;\n 5  import javax.inject.Inject;\n 6\
        \  import javax.jms.JMSException;\n 7  import javax.jms.Message;\n 8  import\
        \ javax.jms.MessageListener;\n 9  import javax.jms.TextMessage;\n10  \n11\
        \  import com.redhat.coolstore.model.Order;\n12  import com.redhat.coolstore.utils.Transformers;\n\
        13  \n14  @MessageDriven(name = \"OrderServiceMDB\", activationConfig = {\n\
        15  \t@ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue\
        \ = \"topic/orders\"),"
      lineNumber: 5
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.service
    - codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import com.redhat.coolstore.model.CatalogItemEntity;\n\
        \ 4  import com.redhat.coolstore.model.Product;\n 5  import com.redhat.coolstore.utils.Transformers;\n\
        \ 6  \n 7  import javax.ejb.Stateless;\n 8  import javax.inject.Inject;\n\
        \ 9  import java.util.List;\n10  import java.util.stream.Collectors;\n11 \
        \ \n12  import static com.redhat.coolstore.utils.Transformers.toProduct;\n\
        13  \n14  @Stateless\n15  public class ProductService {\n16  \n17      @Inject\n\
        18      CatalogService cm;"
      lineNumber: 8
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ProductService.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ProductService.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.service
    - codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import java.util.logging.Logger;\n\
        \ 4  import javax.ejb.Stateless;\n 5  import javax.annotation.Resource;\n\
        \ 6  import javax.inject.Inject;\n 7  import javax.jms.JMSContext;\n 8  import\
        \ javax.jms.Topic;\n 9  \n10  import com.redhat.coolstore.model.ShoppingCart;\n\
        11  import com.redhat.coolstore.utils.Transformers;\n12  \n13  @Stateless\n\
        14  public class ShoppingCartOrderProcessor  {\n15  \n16      @Inject"
      lineNumber: 6
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.service
    - codeSnip: " 1  package com.redhat.coolstore.service;\n 2  \n 3  import java.util.Hashtable;\n\
        \ 4  import java.util.logging.Logger;\n 5  \n 6  import javax.ejb.Stateful;\n\
        \ 7  import javax.inject.Inject;\n 8  import javax.naming.Context;\n 9  import\
        \ javax.naming.InitialContext;\n10  import javax.naming.NamingException;\n\
        11  \n12  import com.redhat.coolstore.model.Product;\n13  import com.redhat.coolstore.model.ShoppingCart;\n\
        14  import com.redhat.coolstore.model.ShoppingCartItem;\n15  \n16  @Stateful\n\
        17  public class ShoppingCartService  {"
      lineNumber: 7
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.service
    - codeSnip: " 2  \n 3  import org.flywaydb.core.Flyway;\n 4  import org.flywaydb.core.api.FlywayException;\n\
        \ 5  \n 6  import javax.annotation.PostConstruct;\n 7  import javax.annotation.Resource;\n\
        \ 8  import javax.ejb.Singleton;\n 9  import javax.ejb.Startup;\n10  import\
        \ javax.ejb.TransactionManagement;\n11  import javax.ejb.TransactionManagementType;\n\
        12  import javax.inject.Inject;\n13  import javax.sql.DataSource;\n14  import\
        \ java.util.logging.Level;\n15  import java.util.logging.Logger;\n16  \n17\
        \  /**\n18   * Created by tqvarnst on 2017-04-04.\n19   */\n20  @Singleton\n\
        21  @Startup\n22  @TransactionManagement(TransactionManagementType.BEAN)"
      lineNumber: 12
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.utils
    - codeSnip: " 1  package com.redhat.coolstore.utils;\n 2  \n 3  import javax.enterprise.inject.Produces;\n\
        \ 4  import javax.enterprise.inject.spi.InjectionPoint;\n 5  import java.util.logging.Logger;\n\
        \ 6  \n 7  \n 8  public class Producers {\n 9  \n10      Logger log = Logger.getLogger(Producers.class.getName());\n\
        11  \n12      @Produces\n13      public Logger produceLog(InjectionPoint injectionPoint)\
        \ {"
      lineNumber: 3
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
        kind: Module
        name: javax.enterprise.inject.Produces
        package: com.redhat.coolstore.utils
    - codeSnip: " 1  package com.redhat.coolstore.utils;\n 2  \n 3  import javax.enterprise.inject.Produces;\n\
        \ 4  import javax.enterprise.inject.spi.InjectionPoint;\n 5  import java.util.logging.Logger;\n\
        \ 6  \n 7  \n 8  public class Producers {\n 9  \n10      Logger log = Logger.getLogger(Producers.class.getName());\n\
        11  \n12      @Produces\n13      public Logger produceLog(InjectionPoint injectionPoint)\
        \ {\n14          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());"
      lineNumber: 4
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Producers.java
        kind: Module
        name: javax.enterprise.inject.spi.InjectionPoint
        package: com.redhat.coolstore.utils
    - codeSnip: " 1  package com.redhat.coolstore.utils;\n 2  \n 3  import weblogic.application.ApplicationLifecycleEvent;\n\
        \ 4  import weblogic.application.ApplicationLifecycleListener;\n 5  \n 6 \
        \ import javax.inject.Inject;\n 7  import java.util.logging.Logger;\n 8  \n\
        \ 9  public class StartupListener extends ApplicationLifecycleListener {\n\
        10  \n11      @Inject\n12      Logger log;\n13  \n14      @Override\n15  \
        \    public void postStart(ApplicationLifecycleEvent evt) {\n16          log.info(\"\
        AppListener(postStart)\");"
      lineNumber: 6
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/StartupListener.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/StartupListener.java
        kind: Module
        name: javax.inject.Inject
        package: com.redhat.coolstore.utils
    - codeSnip: "20  import static java.lang.annotation.ElementType.FIELD;\n21  import\
        \ static java.lang.annotation.ElementType.METHOD;\n22  import static java.lang.annotation.ElementType.PARAMETER;\n\
        23  import static java.lang.annotation.ElementType.TYPE;\n24  import static\
        \ java.lang.annotation.RetentionPolicy.RUNTIME;\n25  \n26  import java.lang.annotation.Documented;\n\
        27  import java.lang.annotation.Retention;\n28  import java.lang.annotation.Target;\n\
        29  \n30  import javax.inject.Qualifier;\n31  \n32  /**\n33   * <p>\n34  \
        \ * The built-in qualifier type.\n35   * </p>\n36   * \n37   * <p>\n38   *\
        \ Every bean has the qualifier <tt>&#064;Any</tt>, even if it does not explicitly\
        \ declare this qualifier, except for the\n39   * special {@link javax.enterprise.inject.New\
        \ &#064;New qualified beans}.\n40   * </p>"
      lineNumber: 30
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Any.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Any.java
        kind: Interface
        name: Any
        package: javax.enterprise.inject
    - codeSnip: "18  package javax.enterprise.inject;\n19  \n20  import static java.lang.annotation.ElementType.FIELD;\n\
        21  import static java.lang.annotation.ElementType.PARAMETER;\n22  import\
        \ static java.lang.annotation.RetentionPolicy.RUNTIME;\n23  \n24  import java.lang.annotation.Documented;\n\
        25  import java.lang.annotation.Retention;\n26  import java.lang.annotation.Target;\n\
        27  \n28  import javax.inject.Qualifier;\n29  \n30  /**\n31   * <p>\n32  \
        \ * A decorator may inject metadata about the bean it is decorating\n33  \
        \ * </p>\n34   * \n35   * <pre>\n36   * &#064;Decorator\n37   * class TimestampLogger\
        \ implements Logger {\n38   *     &#064;Inject"
      lineNumber: 28
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Decorated.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Decorated.java
        kind: Interface
        name: Decorated
        package: javax.enterprise.inject
    - codeSnip: "20  import static java.lang.annotation.ElementType.FIELD;\n21  import\
        \ static java.lang.annotation.ElementType.METHOD;\n22  import static java.lang.annotation.ElementType.PARAMETER;\n\
        23  import static java.lang.annotation.ElementType.TYPE;\n24  import static\
        \ java.lang.annotation.RetentionPolicy.RUNTIME;\n25  \n26  import java.lang.annotation.Documented;\n\
        27  import java.lang.annotation.Retention;\n28  import java.lang.annotation.Target;\n\
        29  \n30  import javax.inject.Qualifier;\n31  \n32  /**\n33   * <p>\n34  \
        \ * The default qualifier type.\n35   * </p>\n36   * \n37   * <p>\n38   *\
        \ If a bean does not explicitly declare a qualifier other than {@link javax.inject.Named\
        \ &#064;Named}, the bean has the\n39   * qualifier <tt>&#064;Default</tt>.\n\
        40   * </p>"
      lineNumber: 30
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Default.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Default.java
        kind: Interface
        name: Default
        package: javax.enterprise.inject
    - codeSnip: "13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\
        \ or implied.\n14   * See the License for the specific language governing\
        \ permissions and\n15   * limitations under the License.\n16   */\n17  \n\
        18  package javax.enterprise.inject;\n19  \n20  import java.lang.annotation.Annotation;\n\
        21  \n22  import javax.enterprise.util.TypeLiteral;\n23  import javax.inject.Provider;\n\
        24  \n25  /**\n26   * <p>\n27   * Allows the application to dynamically obtain\
        \ instances of beans with a specified combination of required type and qualifiers.\n\
        28   * </p>\n29   * \n30   * <p>\n31   * In certain situations, injection\
        \ is not the most convenient way to obtain a contextual reference. For example,\
        \ it may not be\n32   * used when:\n33   * </p>"
      lineNumber: 23
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Instance.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Instance.java
        kind: Interface
        name: Instance
        package: javax.enterprise.inject
    - codeSnip: "18  package javax.enterprise.inject;\n19  \n20  import static java.lang.annotation.ElementType.FIELD;\n\
        21  import static java.lang.annotation.ElementType.PARAMETER;\n22  import\
        \ static java.lang.annotation.RetentionPolicy.RUNTIME;\n23  \n24  import java.lang.annotation.Documented;\n\
        25  import java.lang.annotation.Retention;\n26  import java.lang.annotation.Target;\n\
        27  \n28  import javax.inject.Qualifier;\n29  \n30  /**\n31   * <p>\n32  \
        \ * An interceptor may inject metadata about the bean it is intercepting.\n\
        33   * </p>\n34   * \n35   * <pre>\n36   * &#064;Transactional @&#064;Interceptor\n\
        37   * public class TransactionInterceptor {\n38   * "
      lineNumber: 28
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Intercepted.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Intercepted.java
        kind: Interface
        name: Intercepted
        package: javax.enterprise.inject
    - codeSnip: "19  import static java.lang.annotation.ElementType.FIELD;\n20  import\
        \ static java.lang.annotation.ElementType.METHOD;\n21  import static java.lang.annotation.ElementType.TYPE;\n\
        22  import static java.lang.annotation.RetentionPolicy.RUNTIME;\n23  \n24\
        \  import java.lang.annotation.Documented;\n25  import java.lang.annotation.Retention;\n\
        26  import java.lang.annotation.Target;\n27  \n28  import javax.enterprise.context.RequestScoped;\n\
        29  import javax.inject.Named;\n30  \n31  /**\n32   * <p>\n33   * The built-in\
        \ stereotype intended for use with beans that define the model layer of an\
        \ MVC web application architecture such\n34   * as JSF.\n35   * </p>\n36 \
        \  * \n37   * @see javax.enterprise.inject.Stereotype\n38   * @author Gavin\
        \ King\n39   */"
      lineNumber: 29
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Model.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/Model.java
        kind: Interface
        name: Model
        package: javax.enterprise.inject
    - codeSnip: "21  import static java.lang.annotation.ElementType.METHOD;\n22  import\
        \ static java.lang.annotation.ElementType.PARAMETER;\n23  import static java.lang.annotation.ElementType.TYPE;\n\
        24  import static java.lang.annotation.RetentionPolicy.RUNTIME;\n25  \n26\
        \  import java.lang.annotation.Documented;\n27  import java.lang.annotation.Retention;\n\
        28  import java.lang.annotation.Target;\n29  \n30  import javax.enterprise.context.Dependent;\n\
        31  import javax.inject.Qualifier;\n32  \n33  /**\n34   * <p>\n35   * The\
        \ {@link New} qualifier was deprecated in CDI 1.1. CDI applications are encouraged\
        \ to inject {@link Dependent} scoped beans\n36   * instead.\n37   * </p>\n\
        38   * \n39   * <p>\n40   * The <tt>&#064;New</tt> qualifier allows the application\
        \ to obtain a new instance of a bean which is not bound to the declared\n\
        41   * scope, but has had dependency injection performed."
      lineNumber: 31
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/New.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/New.java
        kind: Interface
        name: New
        package: javax.enterprise.inject
    - codeSnip: "22  import java.util.List;\n23  import java.util.Set;\n24  \n25 \
        \ import javax.el.ELResolver;\n26  import javax.el.ExpressionFactory;\n27\
        \  import javax.enterprise.context.ContextNotActiveException;\n28  import\
        \ javax.enterprise.context.spi.Context;\n29  import javax.enterprise.context.spi.Contextual;\n\
        30  import javax.enterprise.context.spi.CreationalContext;\n31  import javax.enterprise.event.ObserverException;\n\
        32  import javax.enterprise.inject.AmbiguousResolutionException;\n33  import\
        \ javax.enterprise.inject.InjectionException;\n34  import javax.enterprise.inject.UnsatisfiedResolutionException;\n\
        35  import javax.enterprise.util.Nonbinding;\n36  \n37  /**\n38   * <p>\n\
        39   * Allows a portable extension to interact directly with the container.\
        \ Provides operations for obtaining contextual references\n40   * for beans,\
        \ along with many other operations of use to portable extensions.\n41   *\
        \ </p>\n42   * "
      lineNumber: 32
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeanManager.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeanManager.java
        kind: Interface
        name: BeanManager
        package: javax.enterprise.inject.spi
    - codeSnip: "23  import java.util.Set;\n24  \n25  import javax.el.ELResolver;\n\
        26  import javax.el.ExpressionFactory;\n27  import javax.enterprise.context.ContextNotActiveException;\n\
        28  import javax.enterprise.context.spi.Context;\n29  import javax.enterprise.context.spi.Contextual;\n\
        30  import javax.enterprise.context.spi.CreationalContext;\n31  import javax.enterprise.event.ObserverException;\n\
        32  import javax.enterprise.inject.AmbiguousResolutionException;\n33  import\
        \ javax.enterprise.inject.InjectionException;\n34  import javax.enterprise.inject.UnsatisfiedResolutionException;\n\
        35  import javax.enterprise.util.Nonbinding;\n36  \n37  /**\n38   * <p>\n\
        39   * Allows a portable extension to interact directly with the container.\
        \ Provides operations for obtaining contextual references\n40   * for beans,\
        \ along with many other operations of use to portable extensions.\n41   *\
        \ </p>\n42   * \n43   * <p>"
      lineNumber: 33
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeanManager.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeanManager.java
        kind: Interface
        name: BeanManager
        package: javax.enterprise.inject.spi
    - codeSnip: "24  \n25  import javax.el.ELResolver;\n26  import javax.el.ExpressionFactory;\n\
        27  import javax.enterprise.context.ContextNotActiveException;\n28  import\
        \ javax.enterprise.context.spi.Context;\n29  import javax.enterprise.context.spi.Contextual;\n\
        30  import javax.enterprise.context.spi.CreationalContext;\n31  import javax.enterprise.event.ObserverException;\n\
        32  import javax.enterprise.inject.AmbiguousResolutionException;\n33  import\
        \ javax.enterprise.inject.InjectionException;\n34  import javax.enterprise.inject.UnsatisfiedResolutionException;\n\
        35  import javax.enterprise.util.Nonbinding;\n36  \n37  /**\n38   * <p>\n\
        39   * Allows a portable extension to interact directly with the container.\
        \ Provides operations for obtaining contextual references\n40   * for beans,\
        \ along with many other operations of use to portable extensions.\n41   *\
        \ </p>\n42   * \n43   * <p>\n44   * Any bean may obtain an instance of <tt>BeanManager</tt>\
        \ by injecting it:"
      lineNumber: 34
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeanManager.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeanManager.java
        kind: Interface
        name: BeanManager
        package: javax.enterprise.inject.spi
    - codeSnip: "12   * distributed under the License is distributed on an \"AS IS\"\
        \ BASIS,  \n13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\
        \ or implied.\n14   * See the License for the specific language governing\
        \ permissions and\n15   * limitations under the License.\n16   */\n17  package\
        \ javax.enterprise.inject.spi;\n18  \n19  import java.lang.annotation.Annotation;\n\
        20  \n21  import javax.enterprise.context.NormalScope;\n22  import javax.enterprise.inject.Stereotype;\n\
        23  import javax.inject.Qualifier;\n24  import javax.inject.Scope;\n25  import\
        \ javax.interceptor.InterceptorBinding;\n26  \n27  /**\n28   * <p>\n29   *\
        \ This event type is thrown by the container before the bean discovery process\
        \ begins. If any observer method of the\n30   * {@code BeforeBeanDiscovery}\
        \ event throws an exception, the exception is treated as a definition error\
        \ by the container.\n31   * </p>\n32   * "
      lineNumber: 22
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeforeBeanDiscovery.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeforeBeanDiscovery.java
        kind: Interface
        name: BeforeBeanDiscovery
        package: javax.enterprise.inject.spi
    - codeSnip: "13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\
        \ or implied.\n14   * See the License for the specific language governing\
        \ permissions and\n15   * limitations under the License.\n16   */\n17  package\
        \ javax.enterprise.inject.spi;\n18  \n19  import java.lang.annotation.Annotation;\n\
        20  \n21  import javax.enterprise.context.NormalScope;\n22  import javax.enterprise.inject.Stereotype;\n\
        23  import javax.inject.Qualifier;\n24  import javax.inject.Scope;\n25  import\
        \ javax.interceptor.InterceptorBinding;\n26  \n27  /**\n28   * <p>\n29   *\
        \ This event type is thrown by the container before the bean discovery process\
        \ begins. If any observer method of the\n30   * {@code BeforeBeanDiscovery}\
        \ event throws an exception, the exception is treated as a definition error\
        \ by the container.\n31   * </p>\n32   * \n33   * @author Pete Muir"
      lineNumber: 23
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeforeBeanDiscovery.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeforeBeanDiscovery.java
        kind: Interface
        name: BeforeBeanDiscovery
        package: javax.enterprise.inject.spi
    - codeSnip: "14   * See the License for the specific language governing permissions\
        \ and\n15   * limitations under the License.\n16   */\n17  package javax.enterprise.inject.spi;\n\
        18  \n19  import java.lang.annotation.Annotation;\n20  \n21  import javax.enterprise.context.NormalScope;\n\
        22  import javax.enterprise.inject.Stereotype;\n23  import javax.inject.Qualifier;\n\
        24  import javax.inject.Scope;\n25  import javax.interceptor.InterceptorBinding;\n\
        26  \n27  /**\n28   * <p>\n29   * This event type is thrown by the container\
        \ before the bean discovery process begins. If any observer method of the\n\
        30   * {@code BeforeBeanDiscovery} event throws an exception, the exception\
        \ is treated as a definition error by the container.\n31   * </p>\n32   *\
        \ \n33   * @author Pete Muir\n34   * @author David Allen"
      lineNumber: 24
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeforeBeanDiscovery.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/BeforeBeanDiscovery.java
        kind: Interface
        name: BeforeBeanDiscovery
        package: javax.enterprise.inject.spi
    - codeSnip: " 6  import java.io.InputStreamReader;\n 7  import java.net.URL;\n\
        \ 8  import java.util.Collections;\n 9  import java.util.Enumeration;\n10\
        \  import java.util.HashSet;\n11  import java.util.LinkedHashSet;\n12  import\
        \ java.util.Set;\n13  import java.util.regex.Matcher;\n14  import java.util.regex.Pattern;\n\
        15  \n16  import javax.enterprise.inject.Instance;\n17  \n18  /**\n19   *\
        \ Provides access to the current container.\n20   * \n21   * @author Pete\
        \ Muir\n22   * @since 1.1\n23   */\n24  public abstract class CDI<T> implements\
        \ Instance<T> {\n25  \n26      protected static volatile Set<CDIProvider>\
        \ discoveredProviders = null;"
      lineNumber: 16
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/CDI.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/CDI.java
        kind: Class
        name: CDI
        package: javax.enterprise.inject.spi
    - codeSnip: "15   * limitations under the License.\n16   */\n17  \n18  package\
        \ javax.enterprise.inject.spi;\n19  \n20  import java.lang.annotation.Annotation;\n\
        21  import java.lang.reflect.Member;\n22  import java.lang.reflect.Type;\n\
        23  import java.util.Set;\n24  \n25  import javax.enterprise.inject.Instance;\n\
        26  \n27  /**\n28   * <p>\n29   * Provides access to metadata about an injection\
        \ point. May represent an {@linkplain javax.inject.Inject injected field}\
        \ or a\n30   * parameter of a {@linkplain javax.inject.Inject bean constructor},\
        \ {@linkplain javax.inject.Inject initializer method},\n31   * {@linkplain\
        \ javax.enterprise.inject.Produces producer method}, {@linkplain javax.enterprise.inject.Disposes\
        \ disposer method}\n32   * or {@linkplain javax.enterprise.event.Observes\
        \ observer method}.\n33   * </p>\n34   * \n35   * <p>"
      lineNumber: 25
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/InjectionPoint.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/InjectionPoint.java
        kind: Interface
        name: InjectionPoint
        package: javax.enterprise.inject.spi
    - codeSnip: " 1  package javax.enterprise.inject.spi;\n 2  \n 3  import javax.enterprise.inject.New;\n\
        \ 4  \n 5  /**\n 6   * <p>\n 7   * The container fires an event of this type\
        \ for each enabled bean, interceptor or decorator deployed in a bean archive\
        \ before\n 8   * registering the {@link javax.enterprise.inject.spi.Bean}\
        \ object.\n 9   * </p>\n10   * <p>\n11   * No event is fired for {@link New}\
        \ qualified beans.\n12   * </p>\n13   * <p>"
      lineNumber: 3
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/ProcessBeanAttributes.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/enterprise/inject/spi/ProcessBeanAttributes.java
        kind: Interface
        name: ProcessBeanAttributes
        package: javax.enterprise.inject.spi
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=CDI
  javaee-technology-usage-00021:
    description: JavaEE
    incidents:
    - message: ''
      uri: ''
      variables:
        tags:
        - CDI
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Execute=CDI
    - tag=Inversion of Control=CDI
    - tag=Java EE=CDI
  javaee-technology-usage-00030:
    description: ''
    incidents:
    - codeSnip: " 2  \n 3  import com.redhat.coolstore.model.CatalogItemEntity;\n\
        \ 4  import com.redhat.coolstore.model.Order;\n 5  import com.redhat.coolstore.model.OrderItem;\n\
        \ 6  import com.redhat.coolstore.model.Product;\n 7  import com.redhat.coolstore.model.ShoppingCart;\n\
        \ 8  import java.io.StringReader;\n 9  import java.io.StringWriter;\n10  import\
        \ java.util.ArrayList;\n11  import java.util.List;\n12  import javax.json.Json;\n\
        13  import javax.json.JsonArray;\n14  import javax.json.JsonArrayBuilder;\n\
        15  import javax.json.JsonObject;\n16  import javax.json.JsonReader;\n17 \
        \ import javax.json.JsonWriter;\n18  \n19  import java.util.concurrent.ThreadLocalRandom;\n\
        20  import java.util.logging.Logger;\n21  \n22  /**"
      lineNumber: 12
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
        kind: Module
        name: javax.json.Json
        package: com.redhat.coolstore.utils
    - codeSnip: " 3  import com.redhat.coolstore.model.CatalogItemEntity;\n 4  import\
        \ com.redhat.coolstore.model.Order;\n 5  import com.redhat.coolstore.model.OrderItem;\n\
        \ 6  import com.redhat.coolstore.model.Product;\n 7  import com.redhat.coolstore.model.ShoppingCart;\n\
        \ 8  import java.io.StringReader;\n 9  import java.io.StringWriter;\n10  import\
        \ java.util.ArrayList;\n11  import java.util.List;\n12  import javax.json.Json;\n\
        13  import javax.json.JsonArray;\n14  import javax.json.JsonArrayBuilder;\n\
        15  import javax.json.JsonObject;\n16  import javax.json.JsonReader;\n17 \
        \ import javax.json.JsonWriter;\n18  \n19  import java.util.concurrent.ThreadLocalRandom;\n\
        20  import java.util.logging.Logger;\n21  \n22  /**\n23   * Created by tqvarnst\
        \ on 2017-03-30."
      lineNumber: 13
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
        kind: Module
        name: javax.json.JsonArray
        package: com.redhat.coolstore.utils
    - codeSnip: " 4  import com.redhat.coolstore.model.Order;\n 5  import com.redhat.coolstore.model.OrderItem;\n\
        \ 6  import com.redhat.coolstore.model.Product;\n 7  import com.redhat.coolstore.model.ShoppingCart;\n\
        \ 8  import java.io.StringReader;\n 9  import java.io.StringWriter;\n10  import\
        \ java.util.ArrayList;\n11  import java.util.List;\n12  import javax.json.Json;\n\
        13  import javax.json.JsonArray;\n14  import javax.json.JsonArrayBuilder;\n\
        15  import javax.json.JsonObject;\n16  import javax.json.JsonReader;\n17 \
        \ import javax.json.JsonWriter;\n18  \n19  import java.util.concurrent.ThreadLocalRandom;\n\
        20  import java.util.logging.Logger;\n21  \n22  /**\n23   * Created by tqvarnst\
        \ on 2017-03-30.\n24   */"
      lineNumber: 14
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
        kind: Module
        name: javax.json.JsonArrayBuilder
        package: com.redhat.coolstore.utils
    - codeSnip: " 5  import com.redhat.coolstore.model.OrderItem;\n 6  import com.redhat.coolstore.model.Product;\n\
        \ 7  import com.redhat.coolstore.model.ShoppingCart;\n 8  import java.io.StringReader;\n\
        \ 9  import java.io.StringWriter;\n10  import java.util.ArrayList;\n11  import\
        \ java.util.List;\n12  import javax.json.Json;\n13  import javax.json.JsonArray;\n\
        14  import javax.json.JsonArrayBuilder;\n15  import javax.json.JsonObject;\n\
        16  import javax.json.JsonReader;\n17  import javax.json.JsonWriter;\n18 \
        \ \n19  import java.util.concurrent.ThreadLocalRandom;\n20  import java.util.logging.Logger;\n\
        21  \n22  /**\n23   * Created by tqvarnst on 2017-03-30.\n24   */\n25  public\
        \ class Transformers {"
      lineNumber: 15
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
        kind: Module
        name: javax.json.JsonObject
        package: com.redhat.coolstore.utils
    - codeSnip: " 6  import com.redhat.coolstore.model.Product;\n 7  import com.redhat.coolstore.model.ShoppingCart;\n\
        \ 8  import java.io.StringReader;\n 9  import java.io.StringWriter;\n10  import\
        \ java.util.ArrayList;\n11  import java.util.List;\n12  import javax.json.Json;\n\
        13  import javax.json.JsonArray;\n14  import javax.json.JsonArrayBuilder;\n\
        15  import javax.json.JsonObject;\n16  import javax.json.JsonReader;\n17 \
        \ import javax.json.JsonWriter;\n18  \n19  import java.util.concurrent.ThreadLocalRandom;\n\
        20  import java.util.logging.Logger;\n21  \n22  /**\n23   * Created by tqvarnst\
        \ on 2017-03-30.\n24   */\n25  public class Transformers {\n26  "
      lineNumber: 16
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
        kind: Module
        name: javax.json.JsonReader
        package: com.redhat.coolstore.utils
    - codeSnip: " 7  import com.redhat.coolstore.model.ShoppingCart;\n 8  import java.io.StringReader;\n\
        \ 9  import java.io.StringWriter;\n10  import java.util.ArrayList;\n11  import\
        \ java.util.List;\n12  import javax.json.Json;\n13  import javax.json.JsonArray;\n\
        14  import javax.json.JsonArrayBuilder;\n15  import javax.json.JsonObject;\n\
        16  import javax.json.JsonReader;\n17  import javax.json.JsonWriter;\n18 \
        \ \n19  import java.util.concurrent.ThreadLocalRandom;\n20  import java.util.logging.Logger;\n\
        21  \n22  /**\n23   * Created by tqvarnst on 2017-03-30.\n24   */\n25  public\
        \ class Transformers {\n26  \n27      private static final String[] RANDOM_NAMES\
        \ = {\"Sven Karlsson\",\"Johan Andersson\",\"Karl Svensson\",\"Anders Johansson\"\
        ,\"Stefan Olson\",\"Martin Ericsson\"};"
      lineNumber: 17
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/utils/Transformers.java
        kind: Module
        name: javax.json.JsonWriter
        package: com.redhat.coolstore.utils
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json;\n42  \n43  import javax.json.spi.JsonProvider;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.*;\n49\
        \  import java.util.Map;\n50  \n51  /**\n52   * Factory class for creating\
        \ JSON processing objects.\n53   * This class provides the most commonly used\
        \ methods for creating these"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
        kind: Class
        name: Json
        package: javax.json
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json;\n42  \n43  import javax.json.spi.JsonProvider;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.*;\n49\
        \  import java.util.Map;\n50  \n51  /**\n52   * Factory class for creating\
        \ JSON processing objects.\n53   * This class provides the most commonly used\
        \ methods for creating these\n54   * objects and their corresponding factories.\
        \ The factory classes provide"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
        kind: Class
        name: Json
        package: javax.json
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json;\n42  \n43  import javax.json.spi.JsonProvider;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.*;\n49\
        \  import java.util.Map;\n50  \n51  /**\n52   * Factory class for creating\
        \ JSON processing objects.\n53   * This class provides the most commonly used\
        \ methods for creating these\n54   * objects and their corresponding factories.\
        \ The factory classes provide\n55   * all the various ways to create these\
        \ objects."
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
        kind: Class
        name: Json
        package: javax.json
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package javax.json;\n\
        42  \n43  import javax.json.spi.JsonProvider;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.*;\n49\
        \  import java.util.Map;\n50  \n51  /**\n52   * Factory class for creating\
        \ JSON processing objects.\n53   * This class provides the most commonly used\
        \ methods for creating these\n54   * objects and their corresponding factories.\
        \ The factory classes provide\n55   * all the various ways to create these\
        \ objects.\n56   *"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
        kind: Class
        name: Json
        package: javax.json
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.json;\n42  \n\
        43  import javax.json.spi.JsonProvider;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.*;\n49\
        \  import java.util.Map;\n50  \n51  /**\n52   * Factory class for creating\
        \ JSON processing objects.\n53   * This class provides the most commonly used\
        \ methods for creating these\n54   * objects and their corresponding factories.\
        \ The factory classes provide\n55   * all the various ways to create these\
        \ objects.\n56   *\n57   * <p>"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/Json.java
        kind: Class
        name: Json
        package: javax.json
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.spi;\n42  \n43  import javax.json.*;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.InputStream;\n\
        49  import java.io.OutputStream;\n50  import java.io.Reader;\n51  import java.io.Writer;\n\
        52  import java.util.Iterator;\n53  import java.util.Map;"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
        kind: Class
        name: JsonProvider
        package: javax.json.spi
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.spi;\n42  \n43  import javax.json.*;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.InputStream;\n\
        49  import java.io.OutputStream;\n50  import java.io.Reader;\n51  import java.io.Writer;\n\
        52  import java.util.Iterator;\n53  import java.util.Map;\n54  import java.util.ServiceLoader;"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
        kind: Class
        name: JsonProvider
        package: javax.json.spi
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.spi;\n42  \n43  import javax.json.*;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.InputStream;\n\
        49  import java.io.OutputStream;\n50  import java.io.Reader;\n51  import java.io.Writer;\n\
        52  import java.util.Iterator;\n53  import java.util.Map;\n54  import java.util.ServiceLoader;\n\
        55  "
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
        kind: Class
        name: JsonProvider
        package: javax.json.spi
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package javax.json.spi;\n\
        42  \n43  import javax.json.*;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.InputStream;\n\
        49  import java.io.OutputStream;\n50  import java.io.Reader;\n51  import java.io.Writer;\n\
        52  import java.util.Iterator;\n53  import java.util.Map;\n54  import java.util.ServiceLoader;\n\
        55  \n56  /**"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
        kind: Class
        name: JsonProvider
        package: javax.json.spi
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.json.spi;\n\
        42  \n43  import javax.json.*;\n44  import javax.json.stream.JsonGenerator;\n\
        45  import javax.json.stream.JsonGeneratorFactory;\n46  import javax.json.stream.JsonParser;\n\
        47  import javax.json.stream.JsonParserFactory;\n48  import java.io.InputStream;\n\
        49  import java.io.OutputStream;\n50  import java.io.Reader;\n51  import java.io.Writer;\n\
        52  import java.util.Iterator;\n53  import java.util.Map;\n54  import java.util.ServiceLoader;\n\
        55  \n56  /**\n57   * Service provider for JSON processing objects."
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/spi/JsonProvider.java
        kind: Class
        name: JsonProvider
        package: javax.json.spi
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.stream;\n42  \n43  import javax.json.JsonException;\n44  \n45\
        \  /**\n46   * {@code JsonGenerationException} indicates an incorrect JSON\
        \ is\n47   * being generated.\n48   *\n49   * @author Jitendra Kotamraju\n\
        50   */\n51  public class JsonGenerationException extends JsonException {\n\
        52  \n53      /**"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonGenerationException.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonGenerationException.java
        kind: Class
        name: JsonGenerationException
        package: javax.json.stream
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.stream;\n42  \n43  import javax.json.JsonValue;\n44  import java.io.Closeable;\n\
        45  import java.io.Flushable;\n46  import java.math.BigDecimal;\n47  import\
        \ java.math.BigInteger;\n48  \n49  /**\n50   * Writes JSON data to an output\
        \ source in a streaming way. The class\n51   * {@link javax.json.Json} contains\
        \ methods to create generators for character\n52   * or output streams ({@link\
        \ java.io.Writer} and {@link java.io.OutputStream}).\n53   *"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonGenerator.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonGenerator.java
        kind: Interface
        name: JsonGenerator
        package: javax.json.stream
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.stream;\n42  \n43  \n44  import javax.json.JsonNumber;\n45  import\
        \ java.io.Closeable;\n46  import java.math.BigDecimal;\n47  \n48  /**\n49\
        \   * Provides forward, read-only access to JSON data in a streaming way.\
        \ This\n50   * is the most efficient way for reading JSON data. The class\n\
        51   * {@link javax.json.Json} contains methods to create parsers from input\n\
        52   * sources ({@link java.io.InputStream} and {@link java.io.Reader}).\n\
        53   *\n54   * <p>"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParser.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParser.java
        kind: Enum
        name: Event
        package: javax.json.stream
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.stream;\n42  \n43  import javax.json.JsonArray;\n44  import javax.json.JsonObject;\n\
        45  import java.io.InputStream;\n46  import java.io.Reader;\n47  import java.nio.charset.Charset;\n\
        48  import java.util.Map;\n49  \n50  /**\n51   * Factory for creating {@link\
        \ JsonParser} instances. If a factory\n52   * instance is configured with\
        \ a configuration, the configuration applies\n53   * to all parser instances\
        \ created using that factory instance."
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParserFactory.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParserFactory.java
        kind: Interface
        name: JsonParserFactory
        package: javax.json.stream
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.stream;\n42  \n43  import javax.json.JsonArray;\n44  import javax.json.JsonObject;\n\
        45  import java.io.InputStream;\n46  import java.io.Reader;\n47  import java.nio.charset.Charset;\n\
        48  import java.util.Map;\n49  \n50  /**\n51   * Factory for creating {@link\
        \ JsonParser} instances. If a factory\n52   * instance is configured with\
        \ a configuration, the configuration applies\n53   * to all parser instances\
        \ created using that factory instance.\n54   *"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParserFactory.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParserFactory.java
        kind: Interface
        name: JsonParserFactory
        package: javax.json.stream
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.json.stream;\n42  \n43  import javax.json.JsonException;\n44  \n45\
        \  /**\n46   * {@code JsonParsingException} is used when an incorrect JSON\
        \ is\n47   * being parsed.\n48   *\n49   * @author Jitendra Kotamraju\n50\
        \   */\n51  public class JsonParsingException extends JsonException {\n52\
        \  \n53      private final JsonLocation location;"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParsingException.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/json/stream/JsonParsingException.java
        kind: Class
        name: JsonParsingException
        package: javax.json.stream
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Java EE JSON-P
  javaee-technology-usage-00031:
    description: ''
    incidents:
    - message: ''
      uri: ''
      variables:
        tags:
        - Java EE JSON-P
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Execute=Java EE JSON-P
    - tag=Java EE=Java EE JSON-P
    - tag=Processing=Java EE JSON-P
  javase-01000:
    description: Threads
    incidents:
    - codeSnip: "65  \t    this.event = event;\n66  \t    this.vector = vector;\n\
        67  \t}\n68      }\n69  \n70      private QueueElement head = null;\n71  \
        \    private QueueElement tail = null;\n72      private Thread qThread;\n\
        73  \n74      public EventQueue() {\n75  \tqThread = new Thread(this, \"JavaMail-EventQueue\"\
        );\n76  \tqThread.setDaemon(true);  // not a user thread\n77  \tqThread.start();\n\
        78      }\n79  \n80      /**\n81       * Enqueue an event.\n82       */\n\
        83      public synchronized void enqueue(MailEvent event, Vector vector) {\n\
        84  \tQueueElement newElt = new QueueElement(event, vector);\n85  "
      lineNumber: 75
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/EventQueue.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/EventQueue.java
        kind: Constructor
        name: EventQueue
        package: javax.mail
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Java Threads
    - tag=Threads
  javase-01100:
    description: Threads
    incidents:
    - codeSnip: "182   * }\n183   *\n184   * public class Account {\n185   *     //\
        \ Some account data...\n186   * }\n187   * </pre>\n188   * <P>\n189   * \n\
        190   * @since 1.0\n191   */\n192  public interface ManagedExecutorService\
        \ extends ExecutorService {\n193  \n194  }\n"
      lineNumber: 192
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedExecutorService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedExecutorService.java
        kind: Interface
        name: ManagedExecutorService
        package: javax.enterprise.concurrent
    - codeSnip: "32   * Version 2] license.\"  If you don't indicate a single choice\
        \ of license, a\n33   * recipient has the option to distribute your version\
        \ of this file under\n34   * either the CDDL, the GPL Version 2 or to extend\
        \ the choice of license to\n35   * its licensees as provided above.  However,\
        \ if you add GPL Version 2 code\n36   * and therefore, elected the GPL Version\
        \ 2 license, then the option applies\n37   * only if the new code is made\
        \ subject to such option by the copyright\n38   * holder.\n39   */\n40  package\
        \ javax.enterprise.concurrent;\n41  \n42  import java.util.concurrent.ExecutorService;\n\
        43  \n44  /**\n45   * A manageable version of a {@link java.util.concurrent.ExecutorService}.\n\
        46   * <p>\n47   * A ManagedExecutorService extends the Java&trade; SE ExecutorService\
        \ to provide\n48   * methods for submitting tasks for execution in a Java&trade;\
        \ EE environment. \n49   * Implementations of the ManagedExecutorService are\n\
        50   * provided by a Java&trade; EE Product Provider.  Application Component\
        \ Providers\n51   * use the Java Naming and Directory Interface&trade; (JNDI)\
        \ to look-up instances of one\n52   * or more ManagedExecutorService objects\
        \ using resource environment references."
      lineNumber: 42
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedExecutorService.java
      variables:
        classes: ExecutorService
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedExecutorService.java
        kind: Interface
        name: ManagedExecutorService
        package: javax.enterprise.concurrent
    - codeSnip: "119   * <tr><td valign=\"top\">1B.</td><td valign=\"top\">Reschedule</td><td\
        \ valign=\"top\"></td><td valign=\"top\">taskSubmitted</td><td valign=\"top\"\
        >Submitted</td></tr>\n120   * <tr><td valign=\"top\">2B.</td><td valign=\"\
        top\">Submitted</td><td valign=\"top\">About to call run()</td><td valign=\"\
        top\">taskStarting</td><td valign=\"top\">Started</td></tr>\n121   * <tr><td\
        \ valign=\"top\">3B.</td><td valign=\"top\">Started</td><td valign=\"top\"\
        >Exit run()</td><td valign=\"top\">taskDone</td><td valign=\"top\">Reschedule</td></tr>\n\
        122   *\n123   * </table>\n124   * <P>\n125   *\n126   * @since 1.0\n127 \
        \  */\n128  public interface ManagedScheduledExecutorService extends\n129\
        \      ManagedExecutorService, ScheduledExecutorService {\n130  \n131    /**\n\
        132     * Creates and executes a task based on a Trigger. The Trigger determines\
        \ when the task \n133     * should run and how often.\n134     *  \n135  \
        \   * @param command the task to execute.\n136     * @param trigger the trigger\
        \ that determines when the task should fire.\n137     * \n138     * @return\
        \ a Future representing pending completion of the task, and whose <code>get()</code>\
        \ \n139     *         method will return <code>null</code> upon completion. "
      lineNumber: 129
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedScheduledExecutorService.java
      variables:
        classes: ''
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedScheduledExecutorService.java
        kind: Interface
        name: ManagedScheduledExecutorService
        package: javax.enterprise.concurrent
    - codeSnip: "32   * Version 2] license.\"  If you don't indicate a single choice\
        \ of license, a\n33   * recipient has the option to distribute your version\
        \ of this file under\n34   * either the CDDL, the GPL Version 2 or to extend\
        \ the choice of license to\n35   * its licensees as provided above.  However,\
        \ if you add GPL Version 2 code\n36   * and therefore, elected the GPL Version\
        \ 2 license, then the option applies\n37   * only if the new code is made\
        \ subject to such option by the copyright\n38   * holder.\n39   */\n40  package\
        \ javax.enterprise.concurrent;\n41  \n42  import java.util.concurrent.ScheduledExecutorService;\n\
        43  \n44  /**\n45   * A manageable version of a {@link java.util.concurrent.ScheduledExecutorService}.<p>\n\
        46   *\n47   * A ManagedScheduledExecutorService extends the Java&trade; SE\
        \ ScheduledExecutorService\n48   * to provide methods for submitting delayed\
        \ or periodic tasks for execution in\n49   * a Java&trade; EE environment.\n\
        50   * Implementations of the ManagedScheduledExecutorService are\n51   *\
        \ provided by a Java&trade; EE Product Provider.  Application Component Providers\n\
        52   * use the Java Naming and Directory Interface&trade; (JNDI) to look-up\
        \ instances of one"
      lineNumber: 42
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedScheduledExecutorService.java
      variables:
        classes: ScheduledExecutorService
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/enterprise/concurrent/ManagedScheduledExecutorService.java
        kind: Interface
        name: ManagedScheduledExecutorService
        package: javax.enterprise.concurrent
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Java Threads
    - tag=Threads
  non-xml-technology-usage-02000:
    description: Non-XML EJB
    incidents:
    - message: ''
      uri: ''
      variables:
        tags:
        - EJB XML
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Bean=EJB XML
    - tag=Connect=EJB XML
    - tag=Java EE=EJB XML
  non-xml-technology-usage-17000:
    description: Non-XML JPA
    incidents:
    - message: ''
      uri: ''
      variables:
        tags:
        - JPA XML
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Java EE=JPA XML
    - tag=Persistence=JPA XML
    - tag=Store=JPA XML
  technology-usage-clustering-01000:
    description: ''
    incidents:
    - message: ''
      uri: ''
      variables:
        tags:
        - Clustering Web Session
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Clustering=Web Session
    - tag=Java EE=Web Session
    - tag=Sustain=Web Session
  technology-usage-connect-01000:
    description: Java Connect
    incidents:
    - codeSnip: " 89  \t\t\tshoppingCartService.priceShoppingCart(cart);\n 90  \t\t\
        \tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n\
        \ 91  \t\t} catch (Exception ex) {\n 92  \t\t\tthrow ex;\n 93  \t\t}\n 94\
        \  \n 95  \t\treturn cart;\n 96  \t}\n 97  \n 98  \t@DELETE\n 99  \t@Path(\"\
        /{cartId}/{itemId}/{quantity}\")\n100  \t@Produces(MediaType.APPLICATION_JSON)\n\
        101  \tpublic ShoppingCart delete(@PathParam(\"cartId\") String cartId,\n\
        102  \t\t\t\t\t\t\t   @PathParam(\"itemId\") String itemId,\n103  \t\t\t\t\
        \t\t\t   @PathParam(\"quantity\") int quantity) throws Exception {\n104  \n\
        105  \t\tList<ShoppingCartItem> toRemoveList = new ArrayList<>();\n106  \n\
        107  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n\
        108  \n109  \t\tcart.getShoppingCartItemList().stream()"
      lineNumber: 99
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        kind: Method
        name: DELETE
        package: com.redhat.coolstore.rest
    - codeSnip: "15  import javax.ws.rs.PathParam;\n16  import javax.ws.rs.Produces;\n\
        17  import javax.ws.rs.core.MediaType;\n18  \n19  import com.redhat.coolstore.model.Product;\n\
        20  import com.redhat.coolstore.model.ShoppingCart;\n21  import com.redhat.coolstore.model.ShoppingCartItem;\n\
        22  import com.redhat.coolstore.service.ShoppingCartService;\n23  \n24  @SessionScoped\n\
        25  @Path(\"/cart\")\n26  public class CartEndpoint implements Serializable\
        \ {\n27  \n28  \tprivate static final long serialVersionUID = -7227732980791688773L;\n\
        29  \n30  \t@Inject\n31  \tprivate ShoppingCartService shoppingCartService;\n\
        32  \n33  \t@GET\n34  \t@Path(\"/{cartId}\")\n35  \t@Produces(MediaType.APPLICATION_JSON)"
      lineNumber: 25
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        kind: Class
        name: SessionScoped
        package: com.redhat.coolstore.rest
    - codeSnip: "24  @SessionScoped\n25  @Path(\"/cart\")\n26  public class CartEndpoint\
        \ implements Serializable {\n27  \n28  \tprivate static final long serialVersionUID\
        \ = -7227732980791688773L;\n29  \n30  \t@Inject\n31  \tprivate ShoppingCartService\
        \ shoppingCartService;\n32  \n33  \t@GET\n34  \t@Path(\"/{cartId}\")\n35 \
        \ \t@Produces(MediaType.APPLICATION_JSON)\n36  \tpublic ShoppingCart getCart(@PathParam(\"\
        cartId\") String cartId) {\n37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n\
        38  \t}\n39  \n40  \t@POST\n41  \t@Path(\"/checkout/{cartId}\")\n42  \t@Produces(MediaType.APPLICATION_JSON)\n\
        43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n\
        44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);"
      lineNumber: 34
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        kind: Method
        name: GET
        package: com.redhat.coolstore.rest
    - codeSnip: "31  \tprivate ShoppingCartService shoppingCartService;\n32  \n33\
        \  \t@GET\n34  \t@Path(\"/{cartId}\")\n35  \t@Produces(MediaType.APPLICATION_JSON)\n\
        36  \tpublic ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\n\
        37  \t\treturn shoppingCartService.getShoppingCart(cartId);\n38  \t}\n39 \
        \ \n40  \t@POST\n41  \t@Path(\"/checkout/{cartId}\")\n42  \t@Produces(MediaType.APPLICATION_JSON)\n\
        43  \tpublic ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\n\
        44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n45  \t}\n\
        46  \n47  \t@POST\n48  \t@Path(\"/{cartId}/{itemId}/{quantity}\")\n49  \t\
        @Produces(MediaType.APPLICATION_JSON)\n50  \tpublic ShoppingCart add(@PathParam(\"\
        cartId\") String cartId,\n51  \t\t\t\t\t\t\t@PathParam(\"itemId\") String\
        \ itemId,"
      lineNumber: 41
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        kind: Method
        name: POST
        package: com.redhat.coolstore.rest
    - codeSnip: "38  \t}\n39  \n40  \t@POST\n41  \t@Path(\"/checkout/{cartId}\")\n\
        42  \t@Produces(MediaType.APPLICATION_JSON)\n43  \tpublic ShoppingCart checkout(@PathParam(\"\
        cartId\") String cartId) {\n44  \t\treturn shoppingCartService.checkOutShoppingCart(cartId);\n\
        45  \t}\n46  \n47  \t@POST\n48  \t@Path(\"/{cartId}/{itemId}/{quantity}\"\
        )\n49  \t@Produces(MediaType.APPLICATION_JSON)\n50  \tpublic ShoppingCart\
        \ add(@PathParam(\"cartId\") String cartId,\n51  \t\t\t\t\t\t\t@PathParam(\"\
        itemId\") String itemId,\n52  \t\t\t\t\t\t\t@PathParam(\"quantity\") int quantity)\
        \ throws Exception {\n53  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n\
        54  \n55  \t\tProduct product = shoppingCartService.getProduct(itemId);\n\
        56  \n57  \t\tShoppingCartItem sci = new ShoppingCartItem();\n58  \t\tsci.setProduct(product);"
      lineNumber: 48
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        kind: Method
        name: POST
        package: com.redhat.coolstore.rest
    - codeSnip: "65  \t\t\tcart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));\n\
        66  \t\t} catch (Exception ex) {\n67  \t\t\tcart.removeShoppingCartItem(sci);\n\
        68  \t\t\tthrow ex;\n69  \t\t}\n70  \n71  \t\treturn cart;\n72  \t}\n73  \n\
        74  \t@POST\n75  \t@Path(\"/{cartId}/{tmpId}\")\n76  \t@Produces(MediaType.APPLICATION_JSON)\n\
        77  \tpublic ShoppingCart set(@PathParam(\"cartId\") String cartId,\n78  \t\
        \t\t\t\t\t\t@PathParam(\"tmpId\") String tmpId) throws Exception {\n79  \n\
        80  \t\tShoppingCart cart = shoppingCartService.getShoppingCart(cartId);\n\
        81  \t\tShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);\n\
        82  \n83  \t\tif (tmpCart != null) {\n84  \t\t\tcart.resetShoppingCartItemList();\n\
        85  \t\t\tcart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());"
      lineNumber: 75
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
        kind: Method
        name: POST
        package: com.redhat.coolstore.rest
    - codeSnip: " 9  import javax.ws.rs.GET;\n10  import javax.ws.rs.Path;\n11  import\
        \ javax.ws.rs.PathParam;\n12  import javax.ws.rs.Produces;\n13  import javax.ws.rs.core.MediaType;\n\
        14  \n15  import com.redhat.coolstore.model.Order;\n16  import com.redhat.coolstore.service.OrderService;\n\
        17  \n18  @RequestScoped\n19  @Path(\"/orders\")\n20  @Consumes(MediaType.APPLICATION_JSON)\n\
        21  @Produces(MediaType.APPLICATION_JSON)\n22  public class OrderEndpoint\
        \ implements Serializable {\n23  \n24      private static final long serialVersionUID\
        \ = -7227732980791688774L;\n25  \n26      @Inject\n27      private OrderService\
        \ os;\n28  \n29  "
      lineNumber: 19
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        kind: Class
        name: RequestScoped
        package: com.redhat.coolstore.rest
    - codeSnip: "21  @Produces(MediaType.APPLICATION_JSON)\n22  public class OrderEndpoint\
        \ implements Serializable {\n23  \n24      private static final long serialVersionUID\
        \ = -7227732980791688774L;\n25  \n26      @Inject\n27      private OrderService\
        \ os;\n28  \n29  \n30      @GET\n31      @Path(\"/\")\n32      public List<Order>\
        \ listAll() {\n33          return os.getOrders();\n34      }\n35  \n36   \
        \   @GET\n37      @Path(\"/{orderId}\")\n38      public Order getOrder(@PathParam(\"\
        orderId\") long orderId) {\n39          return os.getOrderById(orderId);\n\
        40      }\n41  "
      lineNumber: 31
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        kind: Method
        name: GET
        package: com.redhat.coolstore.rest
    - codeSnip: "27      private OrderService os;\n28  \n29  \n30      @GET\n31  \
        \    @Path(\"/\")\n32      public List<Order> listAll() {\n33          return\
        \ os.getOrders();\n34      }\n35  \n36      @GET\n37      @Path(\"/{orderId}\"\
        )\n38      public Order getOrder(@PathParam(\"orderId\") long orderId) {\n\
        39          return os.getOrderById(orderId);\n40      }\n41  \n42  }\n"
      lineNumber: 37
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
        kind: Method
        name: GET
        package: com.redhat.coolstore.rest
    - codeSnip: " 5  \n 6  import javax.enterprise.context.RequestScoped;\n 7  import\
        \ javax.inject.Inject;\n 8  import javax.ws.rs.*;\n 9  import javax.ws.rs.core.MediaType;\n\
        10  \n11  import com.redhat.coolstore.model.Product;\n12  import com.redhat.coolstore.service.ProductService;\n\
        13  \n14  @RequestScoped\n15  @Path(\"/products\")\n16  @Consumes(MediaType.APPLICATION_JSON)\n\
        17  @Produces(MediaType.APPLICATION_JSON)\n18  public class ProductEndpoint\
        \ implements Serializable {\n19  \n20      /**\n21       *\n22       */\n\
        23      private static final long serialVersionUID = -7227732980791688773L;\n\
        24  \n25      @Inject"
      lineNumber: 15
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        kind: Class
        name: RequestScoped
        package: com.redhat.coolstore.rest
    - codeSnip: "20      /**\n21       *\n22       */\n23      private static final\
        \ long serialVersionUID = -7227732980791688773L;\n24  \n25      @Inject\n\
        26      private ProductService pm;\n27  \n28  \n29      @GET\n30      @Path(\"\
        /\")\n31      public List<Product> listAll() {\n32          return pm.getProducts();\n\
        33      }\n34  \n35      @GET\n36      @Path(\"/{itemId}\")\n37      public\
        \ Product getProduct(@PathParam(\"itemId\") String itemId) {\n38         \
        \ return pm.getProductByItemId(itemId);\n39      }\n40  "
      lineNumber: 30
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        kind: Method
        name: GET
        package: com.redhat.coolstore.rest
    - codeSnip: "26      private ProductService pm;\n27  \n28  \n29      @GET\n30\
        \      @Path(\"/\")\n31      public List<Product> listAll() {\n32        \
        \  return pm.getProducts();\n33      }\n34  \n35      @GET\n36      @Path(\"\
        /{itemId}\")\n37      public Product getProduct(@PathParam(\"itemId\") String\
        \ itemId) {\n38          return pm.getProductByItemId(itemId);\n39      }\n\
        40  \n41  }\n"
      lineNumber: 36
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
        kind: Method
        name: GET
        package: com.redhat.coolstore.rest
    - codeSnip: " 81   * @author Paul Sandoz\n 82   * @author Marc Hadley\n 83   *\
        \ @see Consumes\n 84   * @see Produces\n 85   * @see PathParam\n 86   * @since\
        \ 1.0\n 87   */\n 88  @Target({ElementType.TYPE, ElementType.METHOD})\n 89\
        \  @Retention(RetentionPolicy.RUNTIME)\n 90  @Documented\n 91  public @interface\
        \ Path {\n 92  \n 93      /**\n 94       * Defines a URI template for the\
        \ resource class or method, must not\n 95       * include matrix parameters.\n\
        \ 96       *\n 97       * <p>Embedded template parameters are allowed and\
        \ are of the form:</p>\n 98       *\n 99       * <pre> param = \"{\" *WSP\
        \ name *WSP [ \":\" *WSP regex *WSP ] \"}\"\n100       * name = (ALPHA / DIGIT\
        \ / \"_\")*(ALPHA / DIGIT / \".\" / \"_\" / \"-\" ) ; \\w[\\w\\.-]*\n101 \
        \      * regex = *( nonbrace / \"{\" *nonbrace \"}\" ) ; where nonbrace is\
        \ any char other than \"{\" and \"}\"</pre>"
      lineNumber: 91
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ws/rs/Path.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/ws/rs/Path.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.ws.rs
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Connect=RMI
    - tag=Java EE=RMI
    - tag=Other=RMI
  technology-usage-connect-01200:
    description: Mail usage
    incidents:
    - codeSnip: "50  import java.security.GeneralSecurityException;\n51  import java.security.NoSuchAlgorithmException;\n\
        52  import java.util.Locale;\n53  import java.util.logging.Level;\n54  import\
        \ javax.crypto.Cipher;\n55  import javax.crypto.NoSuchPaddingException;\n\
        56  import javax.crypto.SecretKey;\n57  import javax.crypto.SecretKeyFactory;\n\
        58  import javax.crypto.spec.DESKeySpec;\n59  \n60  import com.sun.mail.util.BASE64DecoderStream;\n\
        61  import com.sun.mail.util.BASE64EncoderStream;\n62  import com.sun.mail.util.MailLogger;\n\
        63  \n64  \n65  /**\n66   * NTLMAuthentication:\n67   *\n68   * @author Michael\
        \ McMahon\n69   * @author Bill Shannon (adapted for JavaMail)\n70   */"
      lineNumber: 60
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/auth/Ntlm.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/auth/Ntlm.java
        kind: Class
        name: Ntlm
        package: com.sun.mail.auth
    - codeSnip: "51  import java.security.NoSuchAlgorithmException;\n52  import java.util.Locale;\n\
        53  import java.util.logging.Level;\n54  import javax.crypto.Cipher;\n55 \
        \ import javax.crypto.NoSuchPaddingException;\n56  import javax.crypto.SecretKey;\n\
        57  import javax.crypto.SecretKeyFactory;\n58  import javax.crypto.spec.DESKeySpec;\n\
        59  \n60  import com.sun.mail.util.BASE64DecoderStream;\n61  import com.sun.mail.util.BASE64EncoderStream;\n\
        62  import com.sun.mail.util.MailLogger;\n63  \n64  \n65  /**\n66   * NTLMAuthentication:\n\
        67   *\n68   * @author Michael McMahon\n69   * @author Bill Shannon (adapted\
        \ for JavaMail)\n70   */\n71  public class Ntlm {"
      lineNumber: 61
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/auth/Ntlm.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/auth/Ntlm.java
        kind: Class
        name: Ntlm
        package: com.sun.mail.auth
    - codeSnip: "52  import java.util.Locale;\n53  import java.util.logging.Level;\n\
        54  import javax.crypto.Cipher;\n55  import javax.crypto.NoSuchPaddingException;\n\
        56  import javax.crypto.SecretKey;\n57  import javax.crypto.SecretKeyFactory;\n\
        58  import javax.crypto.spec.DESKeySpec;\n59  \n60  import com.sun.mail.util.BASE64DecoderStream;\n\
        61  import com.sun.mail.util.BASE64EncoderStream;\n62  import com.sun.mail.util.MailLogger;\n\
        63  \n64  \n65  /**\n66   * NTLMAuthentication:\n67   *\n68   * @author Michael\
        \ McMahon\n69   * @author Bill Shannon (adapted for JavaMail)\n70   */\n71\
        \  public class Ntlm {\n72  "
      lineNumber: 62
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/auth/Ntlm.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/auth/Ntlm.java
        kind: Class
        name: Ntlm
        package: com.sun.mail.auth
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.handlers;\n\
        42  \n43  import java.io.*;\n44  import java.awt.*;\n45  import java.awt.datatransfer.DataFlavor;\n\
        46  import javax.activation.*;\n47  import javax.mail.internet.*;\n48  \n\
        49  /**\n50   * DataContentHandler for image/gif.\n51   */\n52  public class\
        \ image_gif implements DataContentHandler {\n53      private static ActivationDataFlavor\
        \ myDF = new ActivationDataFlavor(\n54  \tjava.awt.Image.class,\n55  \t\"\
        image/gif\",\n56  \t\"GIF Image\");\n57  "
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/image_gif.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/image_gif.java
        kind: Class
        name: image_gif
        package: com.sun.mail.handlers
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.handlers;\n\
        42  \n43  import java.io.*;\n44  import java.util.Properties;\n45  import\
        \ java.awt.datatransfer.DataFlavor;\n46  import javax.activation.*;\n47  import\
        \ javax.mail.*;\n48  import javax.mail.internet.*;\n49  \n50  \n51  /**\n\
        52   * @author\tChristopher Cotton\n53   */\n54  \n55  \n56  public class\
        \ message_rfc822 implements DataContentHandler {\n57  "
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/message_rfc822.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/message_rfc822.java
        kind: Class
        name: message_rfc822
        package: com.sun.mail.handlers
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.handlers;\n\
        42  \n43  import java.io.*;\n44  import java.util.Properties;\n45  import\
        \ java.awt.datatransfer.DataFlavor;\n46  import javax.activation.*;\n47  import\
        \ javax.mail.*;\n48  import javax.mail.internet.*;\n49  \n50  \n51  /**\n\
        52   * @author\tChristopher Cotton\n53   */\n54  \n55  \n56  public class\
        \ message_rfc822 implements DataContentHandler {\n57  \n58      ActivationDataFlavor\
        \ ourDataFlavor = new ActivationDataFlavor("
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/message_rfc822.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/message_rfc822.java
        kind: Class
        name: message_rfc822
        package: com.sun.mail.handlers
    - codeSnip: "49  \n50  \n51  /**\n52   * @author\tChristopher Cotton\n53   */\n\
        54  \n55  \n56  public class message_rfc822 implements DataContentHandler\
        \ {\n57  \n58      ActivationDataFlavor ourDataFlavor = new ActivationDataFlavor(\n\
        59  \tjavax.mail.Message.class,\n60  \t\"message/rfc822\", \n61  \t\"Message\"\
        );\n62  \n63      /**\n64       * return the DataFlavors for this <code>DataContentHandler</code>\n\
        65       * @return The DataFlavors.\n66       */\n67      public DataFlavor[]\
        \ getTransferDataFlavors() {\n68  \treturn new DataFlavor[] { ourDataFlavor\
        \ };\n69      }"
      lineNumber: 59
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/message_rfc822.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/message_rfc822.java
        kind: Field
        name: ourDataFlavor
        package: com.sun.mail.handlers
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.handlers;\n\
        42  \n43  import java.io.*;\n44  import java.awt.datatransfer.DataFlavor;\n\
        45  import javax.activation.*;\n46  import javax.mail.MessagingException;\n\
        47  import javax.mail.internet.*;\n48  \n49  \n50  public class multipart_mixed\
        \ implements DataContentHandler {\n51      private ActivationDataFlavor myDF\
        \ = new ActivationDataFlavor(\n52  \t    javax.mail.internet.MimeMultipart.class,\n\
        53  \t    \"multipart/mixed\", \n54  \t    \"Multipart\");\n55  \n56     \
        \ /**"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/multipart_mixed.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/multipart_mixed.java
        kind: Class
        name: multipart_mixed
        package: com.sun.mail.handlers
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.handlers;\n\
        42  \n43  import java.io.*;\n44  import java.awt.datatransfer.DataFlavor;\n\
        45  import javax.activation.*;\n46  import javax.mail.MessagingException;\n\
        47  import javax.mail.internet.*;\n48  \n49  \n50  public class multipart_mixed\
        \ implements DataContentHandler {\n51      private ActivationDataFlavor myDF\
        \ = new ActivationDataFlavor(\n52  \t    javax.mail.internet.MimeMultipart.class,\n\
        53  \t    \"multipart/mixed\", \n54  \t    \"Multipart\");\n55  \n56     \
        \ /**\n57       * Return the DataFlavors for this <code>DataContentHandler</code>."
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/multipart_mixed.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/multipart_mixed.java
        kind: Class
        name: multipart_mixed
        package: com.sun.mail.handlers
    - codeSnip: "42  \n43  import java.io.*;\n44  import java.awt.datatransfer.DataFlavor;\n\
        45  import javax.activation.*;\n46  import javax.mail.MessagingException;\n\
        47  import javax.mail.internet.*;\n48  \n49  \n50  public class multipart_mixed\
        \ implements DataContentHandler {\n51      private ActivationDataFlavor myDF\
        \ = new ActivationDataFlavor(\n52  \t    javax.mail.internet.MimeMultipart.class,\n\
        53  \t    \"multipart/mixed\", \n54  \t    \"Multipart\");\n55  \n56     \
        \ /**\n57       * Return the DataFlavors for this <code>DataContentHandler</code>.\n\
        58       *\n59       * @return The DataFlavors\n60       */\n61      public\
        \ DataFlavor[] getTransferDataFlavors() { // throws Exception;\n62  \treturn\
        \ new DataFlavor[] { myDF };"
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/multipart_mixed.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/multipart_mixed.java
        kind: Field
        name: myDF
        package: com.sun.mail.handlers
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.handlers;\n\
        42  \n43  import java.io.*;\n44  import java.awt.datatransfer.DataFlavor;\n\
        45  import javax.activation.*;\n46  import javax.mail.internet.*;\n47  \n\
        48  /**\n49   * DataContentHandler for text/plain.\n50   *\n51   */\n52  public\
        \ class text_plain implements DataContentHandler {\n53      private static\
        \ ActivationDataFlavor myDF = new ActivationDataFlavor(\n54  \tjava.lang.String.class,\n\
        55  \t\"text/plain\",\n56  \t\"Text String\");"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/text_plain.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/text_plain.java
        kind: Class
        name: text_plain
        package: com.sun.mail.handlers
    - codeSnip: "40  \n41  package com.sun.mail.handlers;\n42  \n43  import java.awt.datatransfer.DataFlavor;\n\
        44  import java.io.IOException;\n45  import java.io.OutputStream;\n46  \n\
        47  import javax.activation.ActivationDataFlavor;\n48  import javax.activation.DataContentHandler;\n\
        49  import javax.activation.DataSource;\n50  import javax.mail.internet.ContentType;\n\
        51  import javax.xml.transform.Source;\n52  import javax.xml.transform.Transformer;\n\
        53  import javax.xml.transform.TransformerFactory;\n54  import javax.xml.transform.stream.StreamResult;\n\
        55  import javax.xml.transform.stream.StreamSource;\n56  \n57  /**\n58   *\
        \ DataContentHandler for text/xml.\n59   *\n60   * @author Anil Vijendran"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/text_xml.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/handlers/text_xml.java
        kind: Class
        name: text_xml
        package: com.sun.mail.handlers
    - lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/AString.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/AString.java
        kind: Class
        name: AString
        package: ''
    - codeSnip: "39   */\n40  \n41  package com.sun.mail.iap;\n42  \n43  import java.util.Vector;\n\
        44  import java.util.Properties;\n45  import java.io.*;\n46  import java.net.*;\n\
        47  import java.util.logging.Level;\n48  import javax.net.ssl.SSLSocket;\n\
        49  import com.sun.mail.util.*;\n50  \n51  /**\n52   * General protocol handling\
        \ code for IMAP-like protocols. <p>\n53   *\n54   * The Protocol object is\
        \ multithread safe.\n55   *\n56   * @author  John Mani\n57   * @author  Max\
        \ Spivak\n58   * @author  Bill Shannon\n59   */"
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/Protocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/Protocol.java
        kind: Class
        name: Protocol
        package: com.sun.mail.iap
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.iap;\n42  \n43  import java.io.*;\n44  import java.util.*;\n\
        45  import com.sun.mail.util.*;\n46  \n47  /**\n48   * This class represents\
        \ a response obtained from the input stream\n49   * of an IMAP server.\n50\
        \   *\n51   * @author  John Mani\n52   */\n53  \n54  public class Response\
        \ {\n55      protected int index;  // internal index (updated during the parse)"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/Response.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/Response.java
        kind: Class
        name: Response
        package: com.sun.mail.iap
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.iap;\n42  \n43  import java.io.*;\n44  import com.sun.mail.iap.ByteArray;\n\
        45  import com.sun.mail.util.ASCIIUtility;\n46  \n47  /**\n48   *\n49   *\
        \ Inputstream that is used to read a Response.\n50   *\n51   * @author  Arun\
        \ Krishnan\n52   * @author  Bill Shannon\n53   */\n54  "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/ResponseInputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/ResponseInputStream.java
        kind: Class
        name: ResponseInputStream
        package: com.sun.mail.iap
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.iap;\n42  \n43  import java.io.*;\n44  import com.sun.mail.iap.ByteArray;\n\
        45  import com.sun.mail.util.ASCIIUtility;\n46  \n47  /**\n48   *\n49   *\
        \ Inputstream that is used to read a Response.\n50   *\n51   * @author  Arun\
        \ Krishnan\n52   * @author  Bill Shannon\n53   */\n54  \n55  public class\
        \ ResponseInputStream {"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/ResponseInputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/iap/ResponseInputStream.java
        kind: Class
        name: ResponseInputStream
        package: com.sun.mail.iap
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import com.sun.mail.iap.*;\n44  \n45  /**\n\
        46   * Information from the APPENDUID response code\n47   * defined by the\
        \ UIDPLUS extension -\n48   * <A HREF=\"http://www.ietf.org/rfc/rfc2359.txt\"\
        >RFC 2359</A>.\n49   *\n50   * @author  Bill Shannon\n51   */\n52  \n53  public\
        \ class AppendUID { "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/AppendUID.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/AppendUID.java
        kind: Class
        name: AppendUID
        package: com.sun.mail.imap
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n\
        45  import com.sun.mail.util.*;\n46  import com.sun.mail.iap.*;\n47  import\
        \ com.sun.mail.imap.protocol.*;\n48  \n49  /**\n50   * The default IMAP folder\
        \ (root of the naming hierarchy).\n51   *\n52   * @author  John Mani\n53 \
        \  */"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
        kind: Class
        name: DefaultFolder
        package: com.sun.mail.imap
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n\
        45  import com.sun.mail.util.*;\n46  import com.sun.mail.iap.*;\n47  import\
        \ com.sun.mail.imap.protocol.*;\n48  \n49  /**\n50   * The default IMAP folder\
        \ (root of the naming hierarchy).\n51   *\n52   * @author  John Mani\n53 \
        \  */\n54  "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
        kind: Class
        name: DefaultFolder
        package: com.sun.mail.imap
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n\
        45  import com.sun.mail.util.*;\n46  import com.sun.mail.iap.*;\n47  import\
        \ com.sun.mail.imap.protocol.*;\n48  \n49  /**\n50   * The default IMAP folder\
        \ (root of the naming hierarchy).\n51   *\n52   * @author  John Mani\n53 \
        \  */\n54  \n55  public class DefaultFolder extends IMAPFolder {"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n45  import\
        \ com.sun.mail.util.*;\n46  import com.sun.mail.iap.*;\n47  import com.sun.mail.imap.protocol.*;\n\
        48  \n49  /**\n50   * The default IMAP folder (root of the naming hierarchy).\n\
        51   *\n52   * @author  John Mani\n53   */\n54  \n55  public class DefaultFolder\
        \ extends IMAPFolder {\n56      "
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n45  import\
        \ com.sun.mail.util.*;\n46  import com.sun.mail.iap.*;\n47  import com.sun.mail.imap.protocol.*;\n\
        48  \n49  /**\n50   * The default IMAP folder (root of the naming hierarchy).\n\
        51   *\n52   * @author  John Mani\n53   */\n54  \n55  public class DefaultFolder\
        \ extends IMAPFolder {\n56      \n57      protected DefaultFolder(IMAPStore\
        \ store) {"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/DefaultFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.io.*;\n44  \n45  import java.util.Enumeration;\n46 \
        \ import javax.mail.*;\n47  import javax.mail.internet.*;\n48  import javax.activation.*;\n\
        49  \n50  import com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52\
        \  import com.sun.mail.imap.protocol.*;\n53  \n54  /**\n55   * An IMAP body\
        \ part.\n56   *"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
        kind: Class
        name: IMAPBodyPart
        package: com.sun.mail.imap
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.io.*;\n44  \n45  import java.util.Enumeration;\n46 \
        \ import javax.mail.*;\n47  import javax.mail.internet.*;\n48  import javax.activation.*;\n\
        49  \n50  import com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52\
        \  import com.sun.mail.imap.protocol.*;\n53  \n54  /**\n55   * An IMAP body\
        \ part.\n56   *\n57   * @author  John Mani"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
        kind: Class
        name: IMAPBodyPart
        package: com.sun.mail.imap
    - codeSnip: "40  \n41  package com.sun.mail.imap;\n42  \n43  import java.io.*;\n\
        44  \n45  import java.util.Enumeration;\n46  import javax.mail.*;\n47  import\
        \ javax.mail.internet.*;\n48  import javax.activation.*;\n49  \n50  import\
        \ com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52  import com.sun.mail.imap.protocol.*;\n\
        53  \n54  /**\n55   * An IMAP body part.\n56   *\n57   * @author  John Mani\n\
        58   * @author  Bill Shannon\n59   */\n60  "
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
        kind: Class
        name: IMAPBodyPart
        package: com.sun.mail.imap
    - codeSnip: "41  package com.sun.mail.imap;\n42  \n43  import java.io.*;\n44 \
        \ \n45  import java.util.Enumeration;\n46  import javax.mail.*;\n47  import\
        \ javax.mail.internet.*;\n48  import javax.activation.*;\n49  \n50  import\
        \ com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52  import com.sun.mail.imap.protocol.*;\n\
        53  \n54  /**\n55   * An IMAP body part.\n56   *\n57   * @author  John Mani\n\
        58   * @author  Bill Shannon\n59   */\n60  \n61  public class IMAPBodyPart\
        \ extends MimeBodyPart implements ReadableMime {"
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
        kind: Class
        name: IMAPBodyPart
        package: com.sun.mail.imap
    - codeSnip: "42  \n43  import java.io.*;\n44  \n45  import java.util.Enumeration;\n\
        46  import javax.mail.*;\n47  import javax.mail.internet.*;\n48  import javax.activation.*;\n\
        49  \n50  import com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52\
        \  import com.sun.mail.imap.protocol.*;\n53  \n54  /**\n55   * An IMAP body\
        \ part.\n56   *\n57   * @author  John Mani\n58   * @author  Bill Shannon\n\
        59   */\n60  \n61  public class IMAPBodyPart extends MimeBodyPart implements\
        \ ReadableMime {\n62      private IMAPMessage message;"
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPBodyPart.java
        kind: Class
        name: IMAPBodyPart
        package: com.sun.mail.imap
    - codeSnip: "40  \n41  package com.sun.mail.imap;\n42  \n43  import java.util.Date;\n\
        44  import java.util.Vector;\n45  import java.util.Hashtable;\n46  import\
        \ java.util.NoSuchElementException;\n47  import java.util.logging.Level;\n\
        48  import java.io.*;\n49  \n50  import javax.mail.*;\n51  import javax.mail.event.*;\n\
        52  import javax.mail.internet.*;\n53  import javax.mail.search.*;\n54  \n\
        55  import com.sun.mail.util.*;\n56  import com.sun.mail.iap.*;\n57  import\
        \ com.sun.mail.imap.protocol.*;\n58  \n59  /**\n60   * This class implements\
        \ an IMAP folder. <p>"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "41  package com.sun.mail.imap;\n42  \n43  import java.util.Date;\n\
        44  import java.util.Vector;\n45  import java.util.Hashtable;\n46  import\
        \ java.util.NoSuchElementException;\n47  import java.util.logging.Level;\n\
        48  import java.io.*;\n49  \n50  import javax.mail.*;\n51  import javax.mail.event.*;\n\
        52  import javax.mail.internet.*;\n53  import javax.mail.search.*;\n54  \n\
        55  import com.sun.mail.util.*;\n56  import com.sun.mail.iap.*;\n57  import\
        \ com.sun.mail.imap.protocol.*;\n58  \n59  /**\n60   * This class implements\
        \ an IMAP folder. <p>\n61   *"
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "42  \n43  import java.util.Date;\n44  import java.util.Vector;\n\
        45  import java.util.Hashtable;\n46  import java.util.NoSuchElementException;\n\
        47  import java.util.logging.Level;\n48  import java.io.*;\n49  \n50  import\
        \ javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  import javax.mail.search.*;\n54  \n55  import com.sun.mail.util.*;\n56\
        \  import com.sun.mail.iap.*;\n57  import com.sun.mail.imap.protocol.*;\n\
        58  \n59  /**\n60   * This class implements an IMAP folder. <p>\n61   *\n\
        62   * A closed IMAPFolder object shares a protocol connection with its IMAPStore"
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "43  import java.util.Date;\n44  import java.util.Vector;\n45  import\
        \ java.util.Hashtable;\n46  import java.util.NoSuchElementException;\n47 \
        \ import java.util.logging.Level;\n48  import java.io.*;\n49  \n50  import\
        \ javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  import javax.mail.search.*;\n54  \n55  import com.sun.mail.util.*;\n56\
        \  import com.sun.mail.iap.*;\n57  import com.sun.mail.imap.protocol.*;\n\
        58  \n59  /**\n60   * This class implements an IMAP folder. <p>\n61   *\n\
        62   * A closed IMAPFolder object shares a protocol connection with its IMAPStore\n\
        63   * object. When the folder is opened, it gets its own protocol connection.\
        \ <p>"
      lineNumber: 53
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "45  import java.util.Hashtable;\n46  import java.util.NoSuchElementException;\n\
        47  import java.util.logging.Level;\n48  import java.io.*;\n49  \n50  import\
        \ javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  import javax.mail.search.*;\n54  \n55  import com.sun.mail.util.*;\n56\
        \  import com.sun.mail.iap.*;\n57  import com.sun.mail.imap.protocol.*;\n\
        58  \n59  /**\n60   * This class implements an IMAP folder. <p>\n61   *\n\
        62   * A closed IMAPFolder object shares a protocol connection with its IMAPStore\n\
        63   * object. When the folder is opened, it gets its own protocol connection.\
        \ <p>\n64   *\n65   * Applications that need to make use of IMAP-specific\
        \ features may cast"
      lineNumber: 55
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "46  import java.util.NoSuchElementException;\n47  import java.util.logging.Level;\n\
        48  import java.io.*;\n49  \n50  import javax.mail.*;\n51  import javax.mail.event.*;\n\
        52  import javax.mail.internet.*;\n53  import javax.mail.search.*;\n54  \n\
        55  import com.sun.mail.util.*;\n56  import com.sun.mail.iap.*;\n57  import\
        \ com.sun.mail.imap.protocol.*;\n58  \n59  /**\n60   * This class implements\
        \ an IMAP folder. <p>\n61   *\n62   * A closed IMAPFolder object shares a\
        \ protocol connection with its IMAPStore\n63   * object. When the folder is\
        \ opened, it gets its own protocol connection. <p>\n64   *\n65   * Applications\
        \ that need to make use of IMAP-specific features may cast\n66   * a <code>Folder</code>\
        \ object to an <code>IMAPFolder</code> object and"
      lineNumber: 56
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "47  import java.util.logging.Level;\n48  import java.io.*;\n49  \n\
        50  import javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  import javax.mail.search.*;\n54  \n55  import com.sun.mail.util.*;\n56\
        \  import com.sun.mail.iap.*;\n57  import com.sun.mail.imap.protocol.*;\n\
        58  \n59  /**\n60   * This class implements an IMAP folder. <p>\n61   *\n\
        62   * A closed IMAPFolder object shares a protocol connection with its IMAPStore\n\
        63   * object. When the folder is opened, it gets its own protocol connection.\
        \ <p>\n64   *\n65   * Applications that need to make use of IMAP-specific\
        \ features may cast\n66   * a <code>Folder</code> object to an <code>IMAPFolder</code>\
        \ object and\n67   * use the methods on this class. The {@link #getQuota getQuota}\
        \ and"
      lineNumber: 57
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPFolder.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import java.io.*;\n44  import javax.mail.*;\n\
        45  import com.sun.mail.imap.protocol.*;\n46  import com.sun.mail.iap.*;\n\
        47  import com.sun.mail.util.*;\n48  \n49  /**\n50   * This class implements\
        \ an IMAP data stream.\n51   *\n52   * @author  John Mani\n53   */\n54  "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
        kind: Class
        name: IMAPInputStream
        package: com.sun.mail.imap
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import java.io.*;\n44  import javax.mail.*;\n\
        45  import com.sun.mail.imap.protocol.*;\n46  import com.sun.mail.iap.*;\n\
        47  import com.sun.mail.util.*;\n48  \n49  /**\n50   * This class implements\
        \ an IMAP data stream.\n51   *\n52   * @author  John Mani\n53   */\n54  \n\
        55  public class IMAPInputStream extends InputStream {"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
        kind: Class
        name: IMAPInputStream
        package: com.sun.mail.imap
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.io.*;\n44  import javax.mail.*;\n45  import com.sun.mail.imap.protocol.*;\n\
        46  import com.sun.mail.iap.*;\n47  import com.sun.mail.util.*;\n48  \n49\
        \  /**\n50   * This class implements an IMAP data stream.\n51   *\n52   *\
        \ @author  John Mani\n53   */\n54  \n55  public class IMAPInputStream extends\
        \ InputStream {\n56      private IMAPMessage msg; // this message"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
        kind: Class
        name: IMAPInputStream
        package: com.sun.mail.imap
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.io.*;\n44  import javax.mail.*;\n45  import com.sun.mail.imap.protocol.*;\n\
        46  import com.sun.mail.iap.*;\n47  import com.sun.mail.util.*;\n48  \n49\
        \  /**\n50   * This class implements an IMAP data stream.\n51   *\n52   *\
        \ @author  John Mani\n53   */\n54  \n55  public class IMAPInputStream extends\
        \ InputStream {\n56      private IMAPMessage msg; // this message\n57    \
        \  private String section;  // section-id"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPInputStream.java
        kind: Class
        name: IMAPInputStream
        package: com.sun.mail.imap
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.util.Date;\n44  import java.io.*;\n45  import java.util.*;\n\
        46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n49  import\
        \ javax.activation.*;\n50  \n51  import com.sun.mail.util.*;\n52  import com.sun.mail.iap.*;\n\
        53  import com.sun.mail.imap.protocol.*;\n54  \n55  /**\n56   * This class\
        \ implements an IMAPMessage object. <p>\n57   *"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
        kind: Class
        name: FetchProfileCondition
        package: com.sun.mail.imap
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n42\
        \  \n43  import java.util.Date;\n44  import java.io.*;\n45  import java.util.*;\n\
        46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n49  import\
        \ javax.activation.*;\n50  \n51  import com.sun.mail.util.*;\n52  import com.sun.mail.iap.*;\n\
        53  import com.sun.mail.imap.protocol.*;\n54  \n55  /**\n56   * This class\
        \ implements an IMAPMessage object. <p>\n57   *\n58   * An IMAPMessage object\
        \ starts out as a light-weight object. It gets"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
        kind: Class
        name: FetchProfileCondition
        package: com.sun.mail.imap
    - codeSnip: "41  package com.sun.mail.imap;\n42  \n43  import java.util.Date;\n\
        44  import java.io.*;\n45  import java.util.*;\n46  \n47  import javax.mail.*;\n\
        48  import javax.mail.internet.*;\n49  import javax.activation.*;\n50  \n\
        51  import com.sun.mail.util.*;\n52  import com.sun.mail.iap.*;\n53  import\
        \ com.sun.mail.imap.protocol.*;\n54  \n55  /**\n56   * This class implements\
        \ an IMAPMessage object. <p>\n57   *\n58   * An IMAPMessage object starts\
        \ out as a light-weight object. It gets\n59   * filled-in incrementally when\
        \ a request is made for some item. Or\n60   * when a prefetch is done using\
        \ the FetchProfile. <p>\n61   *"
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
        kind: Class
        name: FetchProfileCondition
        package: com.sun.mail.imap
    - codeSnip: "42  \n43  import java.util.Date;\n44  import java.io.*;\n45  import\
        \ java.util.*;\n46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n\
        49  import javax.activation.*;\n50  \n51  import com.sun.mail.util.*;\n52\
        \  import com.sun.mail.iap.*;\n53  import com.sun.mail.imap.protocol.*;\n\
        54  \n55  /**\n56   * This class implements an IMAPMessage object. <p>\n57\
        \   *\n58   * An IMAPMessage object starts out as a light-weight object. It\
        \ gets\n59   * filled-in incrementally when a request is made for some item.\
        \ Or\n60   * when a prefetch is done using the FetchProfile. <p>\n61   *\n\
        62   * An IMAPMessage has a messageNumber and a sequenceNumber. The "
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
        kind: Class
        name: FetchProfileCondition
        package: com.sun.mail.imap
    - codeSnip: "43  import java.util.Date;\n44  import java.io.*;\n45  import java.util.*;\n\
        46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n49  import\
        \ javax.activation.*;\n50  \n51  import com.sun.mail.util.*;\n52  import com.sun.mail.iap.*;\n\
        53  import com.sun.mail.imap.protocol.*;\n54  \n55  /**\n56   * This class\
        \ implements an IMAPMessage object. <p>\n57   *\n58   * An IMAPMessage object\
        \ starts out as a light-weight object. It gets\n59   * filled-in incrementally\
        \ when a request is made for some item. Or\n60   * when a prefetch is done\
        \ using the FetchProfile. <p>\n61   *\n62   * An IMAPMessage has a messageNumber\
        \ and a sequenceNumber. The \n63   * messageNumber is its index into its containing\
        \ folder's messageCache."
      lineNumber: 53
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMessage.java
        kind: Class
        name: FetchProfileCondition
        package: com.sun.mail.imap
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.io.InputStream;\n44  import java.io.IOException;\n45\
        \  import java.util.Vector;\n46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n\
        49  \n50  import com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52\
        \  import com.sun.mail.imap.protocol.*;\n53  \n54  /**\n55   * This class\
        \ \n56   *\n57   * @author  John Mani"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
        kind: Class
        name: IMAPMultipartDataSource
        package: com.sun.mail.imap
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n42\
        \  \n43  import java.io.InputStream;\n44  import java.io.IOException;\n45\
        \  import java.util.Vector;\n46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n\
        49  \n50  import com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52\
        \  import com.sun.mail.imap.protocol.*;\n53  \n54  /**\n55   * This class\
        \ \n56   *\n57   * @author  John Mani\n58   */"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
        kind: Class
        name: IMAPMultipartDataSource
        package: com.sun.mail.imap
    - codeSnip: "40  \n41  package com.sun.mail.imap;\n42  \n43  import java.io.InputStream;\n\
        44  import java.io.IOException;\n45  import java.util.Vector;\n46  \n47  import\
        \ javax.mail.*;\n48  import javax.mail.internet.*;\n49  \n50  import com.sun.mail.util.*;\n\
        51  import com.sun.mail.iap.*;\n52  import com.sun.mail.imap.protocol.*;\n\
        53  \n54  /**\n55   * This class \n56   *\n57   * @author  John Mani\n58 \
        \  */\n59  \n60  public class IMAPMultipartDataSource extends MimePartDataSource"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
        kind: Class
        name: IMAPMultipartDataSource
        package: com.sun.mail.imap
    - codeSnip: "41  package com.sun.mail.imap;\n42  \n43  import java.io.InputStream;\n\
        44  import java.io.IOException;\n45  import java.util.Vector;\n46  \n47  import\
        \ javax.mail.*;\n48  import javax.mail.internet.*;\n49  \n50  import com.sun.mail.util.*;\n\
        51  import com.sun.mail.iap.*;\n52  import com.sun.mail.imap.protocol.*;\n\
        53  \n54  /**\n55   * This class \n56   *\n57   * @author  John Mani\n58 \
        \  */\n59  \n60  public class IMAPMultipartDataSource extends MimePartDataSource\n\
        61  \t\t\t\t     implements MultipartDataSource {"
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
        kind: Class
        name: IMAPMultipartDataSource
        package: com.sun.mail.imap
    - codeSnip: "42  \n43  import java.io.InputStream;\n44  import java.io.IOException;\n\
        45  import java.util.Vector;\n46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n\
        49  \n50  import com.sun.mail.util.*;\n51  import com.sun.mail.iap.*;\n52\
        \  import com.sun.mail.imap.protocol.*;\n53  \n54  /**\n55   * This class\
        \ \n56   *\n57   * @author  John Mani\n58   */\n59  \n60  public class IMAPMultipartDataSource\
        \ extends MimePartDataSource\n61  \t\t\t\t     implements MultipartDataSource\
        \ {\n62      private Vector parts;"
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPMultipartDataSource.java
        kind: Class
        name: IMAPMultipartDataSource
        package: com.sun.mail.imap
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import java.io.*;\n44  import javax.mail.*;\n\
        45  import com.sun.mail.imap.protocol.*;\n46  import com.sun.mail.iap.ProtocolException;\n\
        47  \n48  /**\n49   * This class implements a nested IMAP message\n50   *\n\
        51   * @author  John Mani\n52   */\n53  \n54  public class IMAPNestedMessage\
        \ extends IMAPMessage {"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPNestedMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPNestedMessage.java
        kind: Class
        name: IMAPNestedMessage
        package: com.sun.mail.imap
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap;\n42  \n43  import java.io.*;\n44  import javax.mail.*;\n\
        45  import com.sun.mail.imap.protocol.*;\n46  import com.sun.mail.iap.ProtocolException;\n\
        47  \n48  /**\n49   * This class implements a nested IMAP message\n50   *\n\
        51   * @author  John Mani\n52   */\n53  \n54  public class IMAPNestedMessage\
        \ extends IMAPMessage {\n55      private IMAPMessage msg; // the enclosure\
        \ of this nested message"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPNestedMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPNestedMessage.java
        kind: Class
        name: IMAPNestedMessage
        package: com.sun.mail.imap
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.io.*;\n44  import javax.mail.*;\n45  import com.sun.mail.imap.protocol.*;\n\
        46  import com.sun.mail.iap.ProtocolException;\n47  \n48  /**\n49   * This\
        \ class implements a nested IMAP message\n50   *\n51   * @author  John Mani\n\
        52   */\n53  \n54  public class IMAPNestedMessage extends IMAPMessage {\n\
        55      private IMAPMessage msg; // the enclosure of this nested message\n\
        56  "
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPNestedMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPNestedMessage.java
        kind: Class
        name: IMAPNestedMessage
        package: com.sun.mail.imap
    - codeSnip: "42  \n43  import java.lang.reflect.*;\n44  import java.util.Vector;\n\
        45  import java.util.StringTokenizer;\n46  import java.io.PrintStream;\n47\
        \  import java.io.IOException;\n48  import java.net.InetAddress;\n49  import\
        \ java.net.UnknownHostException;\n50  import java.util.logging.Level;\n51\
        \  \n52  import javax.mail.*;\n53  import javax.mail.event.*;\n54  \n55  import\
        \ com.sun.mail.iap.*;\n56  import com.sun.mail.imap.protocol.*;\n57  import\
        \ com.sun.mail.util.PropUtil;\n58  import com.sun.mail.util.MailLogger;\n\
        59  import com.sun.mail.util.SocketConnectException;\n60  import com.sun.mail.util.MailConnectException;\n\
        61  \n62  /**"
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: IMAPStore
        package: com.sun.mail.imap
    - codeSnip: "43  import java.lang.reflect.*;\n44  import java.util.Vector;\n45\
        \  import java.util.StringTokenizer;\n46  import java.io.PrintStream;\n47\
        \  import java.io.IOException;\n48  import java.net.InetAddress;\n49  import\
        \ java.net.UnknownHostException;\n50  import java.util.logging.Level;\n51\
        \  \n52  import javax.mail.*;\n53  import javax.mail.event.*;\n54  \n55  import\
        \ com.sun.mail.iap.*;\n56  import com.sun.mail.imap.protocol.*;\n57  import\
        \ com.sun.mail.util.PropUtil;\n58  import com.sun.mail.util.MailLogger;\n\
        59  import com.sun.mail.util.SocketConnectException;\n60  import com.sun.mail.util.MailConnectException;\n\
        61  \n62  /**\n63   * This class provides access to an IMAP message store.\
        \ <p>"
      lineNumber: 53
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: IMAPStore
        package: com.sun.mail.imap
    - codeSnip: "45  import java.util.StringTokenizer;\n46  import java.io.PrintStream;\n\
        47  import java.io.IOException;\n48  import java.net.InetAddress;\n49  import\
        \ java.net.UnknownHostException;\n50  import java.util.logging.Level;\n51\
        \  \n52  import javax.mail.*;\n53  import javax.mail.event.*;\n54  \n55  import\
        \ com.sun.mail.iap.*;\n56  import com.sun.mail.imap.protocol.*;\n57  import\
        \ com.sun.mail.util.PropUtil;\n58  import com.sun.mail.util.MailLogger;\n\
        59  import com.sun.mail.util.SocketConnectException;\n60  import com.sun.mail.util.MailConnectException;\n\
        61  \n62  /**\n63   * This class provides access to an IMAP message store.\
        \ <p>\n64   *\n65   * Applications that need to make use of IMAP-specific\
        \ features may cast"
      lineNumber: 55
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "46  import java.io.PrintStream;\n47  import java.io.IOException;\n\
        48  import java.net.InetAddress;\n49  import java.net.UnknownHostException;\n\
        50  import java.util.logging.Level;\n51  \n52  import javax.mail.*;\n53  import\
        \ javax.mail.event.*;\n54  \n55  import com.sun.mail.iap.*;\n56  import com.sun.mail.imap.protocol.*;\n\
        57  import com.sun.mail.util.PropUtil;\n58  import com.sun.mail.util.MailLogger;\n\
        59  import com.sun.mail.util.SocketConnectException;\n60  import com.sun.mail.util.MailConnectException;\n\
        61  \n62  /**\n63   * This class provides access to an IMAP message store.\
        \ <p>\n64   *\n65   * Applications that need to make use of IMAP-specific\
        \ features may cast\n66   * a <code>Store</code> object to an <code>IMAPStore</code>\
        \ object and"
      lineNumber: 56
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "47  import java.io.IOException;\n48  import java.net.InetAddress;\n\
        49  import java.net.UnknownHostException;\n50  import java.util.logging.Level;\n\
        51  \n52  import javax.mail.*;\n53  import javax.mail.event.*;\n54  \n55 \
        \ import com.sun.mail.iap.*;\n56  import com.sun.mail.imap.protocol.*;\n57\
        \  import com.sun.mail.util.PropUtil;\n58  import com.sun.mail.util.MailLogger;\n\
        59  import com.sun.mail.util.SocketConnectException;\n60  import com.sun.mail.util.MailConnectException;\n\
        61  \n62  /**\n63   * This class provides access to an IMAP message store.\
        \ <p>\n64   *\n65   * Applications that need to make use of IMAP-specific\
        \ features may cast\n66   * a <code>Store</code> object to an <code>IMAPStore</code>\
        \ object and\n67   * use the methods on this class. The {@link #getQuota getQuota}\
        \ and"
      lineNumber: 57
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "48  import java.net.InetAddress;\n49  import java.net.UnknownHostException;\n\
        50  import java.util.logging.Level;\n51  \n52  import javax.mail.*;\n53  import\
        \ javax.mail.event.*;\n54  \n55  import com.sun.mail.iap.*;\n56  import com.sun.mail.imap.protocol.*;\n\
        57  import com.sun.mail.util.PropUtil;\n58  import com.sun.mail.util.MailLogger;\n\
        59  import com.sun.mail.util.SocketConnectException;\n60  import com.sun.mail.util.MailConnectException;\n\
        61  \n62  /**\n63   * This class provides access to an IMAP message store.\
        \ <p>\n64   *\n65   * Applications that need to make use of IMAP-specific\
        \ features may cast\n66   * a <code>Store</code> object to an <code>IMAPStore</code>\
        \ object and\n67   * use the methods on this class. The {@link #getQuota getQuota}\
        \ and\n68   * {@link #setQuota setQuota} methods support the IMAP QUOTA extension."
      lineNumber: 58
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "49  import java.net.UnknownHostException;\n50  import java.util.logging.Level;\n\
        51  \n52  import javax.mail.*;\n53  import javax.mail.event.*;\n54  \n55 \
        \ import com.sun.mail.iap.*;\n56  import com.sun.mail.imap.protocol.*;\n57\
        \  import com.sun.mail.util.PropUtil;\n58  import com.sun.mail.util.MailLogger;\n\
        59  import com.sun.mail.util.SocketConnectException;\n60  import com.sun.mail.util.MailConnectException;\n\
        61  \n62  /**\n63   * This class provides access to an IMAP message store.\
        \ <p>\n64   *\n65   * Applications that need to make use of IMAP-specific\
        \ features may cast\n66   * a <code>Store</code> object to an <code>IMAPStore</code>\
        \ object and\n67   * use the methods on this class. The {@link #getQuota getQuota}\
        \ and\n68   * {@link #setQuota setQuota} methods support the IMAP QUOTA extension.\n\
        69   * Refer to <A HREF=\"http://www.ietf.org/rfc/rfc2087.txt\">RFC 2087</A>"
      lineNumber: 59
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "50  import java.util.logging.Level;\n51  \n52  import javax.mail.*;\n\
        53  import javax.mail.event.*;\n54  \n55  import com.sun.mail.iap.*;\n56 \
        \ import com.sun.mail.imap.protocol.*;\n57  import com.sun.mail.util.PropUtil;\n\
        58  import com.sun.mail.util.MailLogger;\n59  import com.sun.mail.util.SocketConnectException;\n\
        60  import com.sun.mail.util.MailConnectException;\n61  \n62  /**\n63   *\
        \ This class provides access to an IMAP message store. <p>\n64   *\n65   *\
        \ Applications that need to make use of IMAP-specific features may cast\n\
        66   * a <code>Store</code> object to an <code>IMAPStore</code> object and\n\
        67   * use the methods on this class. The {@link #getQuota getQuota} and\n\
        68   * {@link #setQuota setQuota} methods support the IMAP QUOTA extension.\n\
        69   * Refer to <A HREF=\"http://www.ietf.org/rfc/rfc2087.txt\">RFC 2087</A>\n\
        70   * for more information. <p>"
      lineNumber: 60
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/IMAPStore.java
        kind: Class
        name: ''
        package: com.sun.mail.imap
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.io.PrintStream;\n44  import java.util.*;\n45  import\
        \ java.util.logging.Level;\n46  \n47  import javax.mail.*;\n48  import com.sun.mail.util.PropUtil;\n\
        49  import com.sun.mail.util.MailLogger;\n50  \n51  /**\n52   * A cache of\
        \ IMAPMessage objects along with the\n53   * mapping from message number to\
        \ IMAP sequence number.\n54   *\n55   * All operations on this object are\
        \ protected by the messageCacheLock\n56   * in IMAPFolder.\n57   */"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/MessageCache.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/MessageCache.java
        kind: Class
        name: MessageCache
        package: com.sun.mail.imap
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n42\
        \  \n43  import java.io.PrintStream;\n44  import java.util.*;\n45  import\
        \ java.util.logging.Level;\n46  \n47  import javax.mail.*;\n48  import com.sun.mail.util.PropUtil;\n\
        49  import com.sun.mail.util.MailLogger;\n50  \n51  /**\n52   * A cache of\
        \ IMAPMessage objects along with the\n53   * mapping from message number to\
        \ IMAP sequence number.\n54   *\n55   * All operations on this object are\
        \ protected by the messageCacheLock\n56   * in IMAPFolder.\n57   */\n58  public\
        \ class MessageCache {"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/MessageCache.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/MessageCache.java
        kind: Class
        name: MessageCache
        package: com.sun.mail.imap
    - codeSnip: "39   */\n40  \n41  package com.sun.mail.imap;\n42  \n43  import java.io.PrintStream;\n\
        44  import java.util.*;\n45  import java.util.logging.Level;\n46  \n47  import\
        \ javax.mail.*;\n48  import com.sun.mail.util.PropUtil;\n49  import com.sun.mail.util.MailLogger;\n\
        50  \n51  /**\n52   * A cache of IMAPMessage objects along with the\n53  \
        \ * mapping from message number to IMAP sequence number.\n54   *\n55   * All\
        \ operations on this object are protected by the messageCacheLock\n56   *\
        \ in IMAPFolder.\n57   */\n58  public class MessageCache {\n59      /*"
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/MessageCache.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/MessageCache.java
        kind: Class
        name: MessageCache
        package: com.sun.mail.imap
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n\
        42  \n43  import java.util.Vector;\n44  \n45  import javax.mail.*;\n46  \n\
        47  import com.sun.mail.util.*;\n48  import com.sun.mail.imap.protocol.MessageSet;\n\
        49  import com.sun.mail.imap.protocol.UIDSet;\n50  \n51  /**\n52   * Holder\
        \ for some static utility methods.\n53   *\n54   * @author  John Mani\n55\
        \   * @author  Bill Shannon\n56   */\n57  "
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/Utility.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/Utility.java
        kind: Interface
        name: Condition
        package: com.sun.mail.imap
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap;\n42\
        \  \n43  import java.util.Vector;\n44  \n45  import javax.mail.*;\n46  \n\
        47  import com.sun.mail.util.*;\n48  import com.sun.mail.imap.protocol.MessageSet;\n\
        49  import com.sun.mail.imap.protocol.UIDSet;\n50  \n51  /**\n52   * Holder\
        \ for some static utility methods.\n53   *\n54   * @author  John Mani\n55\
        \   * @author  Bill Shannon\n56   */\n57  \n58  public final class Utility\
        \ {"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/Utility.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/Utility.java
        kind: Interface
        name: Condition
        package: com.sun.mail.imap
    - codeSnip: "39   */\n40  \n41  package com.sun.mail.imap;\n42  \n43  import java.util.Vector;\n\
        44  \n45  import javax.mail.*;\n46  \n47  import com.sun.mail.util.*;\n48\
        \  import com.sun.mail.imap.protocol.MessageSet;\n49  import com.sun.mail.imap.protocol.UIDSet;\n\
        50  \n51  /**\n52   * Holder for some static utility methods.\n53   *\n54\
        \   * @author  John Mani\n55   * @author  Bill Shannon\n56   */\n57  \n58\
        \  public final class Utility {\n59  "
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/Utility.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/Utility.java
        kind: Interface
        name: Condition
        package: com.sun.mail.imap
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.io.ByteArrayInputStream;\n\
        44  import com.sun.mail.iap.*;\n45  import com.sun.mail.util.ASCIIUtility;\n\
        46  \n47  /**\n48   * The BODY fetch response item.\n49   *\n50   * @author\
        \  John Mani\n51   */\n52  \n53  public class BODY implements Item {\n54 \
        \     "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODY.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODY.java
        kind: Class
        name: BODY
        package: com.sun.mail.imap.protocol
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.io.ByteArrayInputStream;\n\
        44  import com.sun.mail.iap.*;\n45  import com.sun.mail.util.ASCIIUtility;\n\
        46  \n47  /**\n48   * The BODY fetch response item.\n49   *\n50   * @author\
        \  John Mani\n51   */\n52  \n53  public class BODY implements Item {\n54 \
        \     \n55      static final char[] name = {'B','O','D','Y'};"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODY.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODY.java
        kind: Class
        name: BODY
        package: com.sun.mail.imap.protocol
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.util.Vector;\n44  import\
        \ javax.mail.internet.ParameterList;\n45  import com.sun.mail.iap.*; \n46\
        \  import com.sun.mail.util.PropUtil;\n47  \n48  /**\n49   * A BODYSTRUCTURE\
        \ response.\n50   *\n51   * @author  John Mani\n52   * @author  Bill Shannon\n\
        53   */\n54  "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODYSTRUCTURE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODYSTRUCTURE.java
        kind: Class
        name: BODYSTRUCTURE
        package: com.sun.mail.imap.protocol
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.util.Vector;\n44  import\
        \ javax.mail.internet.ParameterList;\n45  import com.sun.mail.iap.*; \n46\
        \  import com.sun.mail.util.PropUtil;\n47  \n48  /**\n49   * A BODYSTRUCTURE\
        \ response.\n50   *\n51   * @author  John Mani\n52   * @author  Bill Shannon\n\
        53   */\n54  \n55  public class BODYSTRUCTURE implements Item {"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODYSTRUCTURE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODYSTRUCTURE.java
        kind: Class
        name: BODYSTRUCTURE
        package: com.sun.mail.imap.protocol
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.util.Vector;\n44  import javax.mail.internet.ParameterList;\n\
        45  import com.sun.mail.iap.*; \n46  import com.sun.mail.util.PropUtil;\n\
        47  \n48  /**\n49   * A BODYSTRUCTURE response.\n50   *\n51   * @author  John\
        \ Mani\n52   * @author  Bill Shannon\n53   */\n54  \n55  public class BODYSTRUCTURE\
        \ implements Item {\n56      "
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODYSTRUCTURE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/BODYSTRUCTURE.java
        kind: Class
        name: BODYSTRUCTURE
        package: com.sun.mail.imap.protocol
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.util.Vector;\n44  import java.util.Date;\n45  import\
        \ java.io.UnsupportedEncodingException;\n46  import java.text.ParseException;\n\
        47  import javax.mail.internet.InternetAddress;\n48  import javax.mail.internet.AddressException;\n\
        49  import javax.mail.internet.MailDateFormat;\n50  import javax.mail.internet.MimeUtility;\n\
        51  import com.sun.mail.iap.*;\n52  \n53  /**\n54   * The ENEVELOPE item of\
        \ an IMAP FETCH response.\n55   *\n56   * @author  John Mani\n57   * @author\
        \  Bill Shannon"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
        kind: Class
        name: ENVELOPE
        package: com.sun.mail.imap.protocol
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.util.Vector;\n44  import java.util.Date;\n45  import\
        \ java.io.UnsupportedEncodingException;\n46  import java.text.ParseException;\n\
        47  import javax.mail.internet.InternetAddress;\n48  import javax.mail.internet.AddressException;\n\
        49  import javax.mail.internet.MailDateFormat;\n50  import javax.mail.internet.MimeUtility;\n\
        51  import com.sun.mail.iap.*;\n52  \n53  /**\n54   * The ENEVELOPE item of\
        \ an IMAP FETCH response.\n55   *\n56   * @author  John Mani\n57   * @author\
        \  Bill Shannon\n58   */"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
        kind: Class
        name: ENVELOPE
        package: com.sun.mail.imap.protocol
    - codeSnip: "39   */\n40  \n41  package com.sun.mail.imap.protocol;\n42  \n43\
        \  import java.util.Vector;\n44  import java.util.Date;\n45  import java.io.UnsupportedEncodingException;\n\
        46  import java.text.ParseException;\n47  import javax.mail.internet.InternetAddress;\n\
        48  import javax.mail.internet.AddressException;\n49  import javax.mail.internet.MailDateFormat;\n\
        50  import javax.mail.internet.MimeUtility;\n51  import com.sun.mail.iap.*;\n\
        52  \n53  /**\n54   * The ENEVELOPE item of an IMAP FETCH response.\n55  \
        \ *\n56   * @author  John Mani\n57   * @author  Bill Shannon\n58   */\n59\
        \  "
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
        kind: Class
        name: ENVELOPE
        package: com.sun.mail.imap.protocol
    - codeSnip: "40  \n41  package com.sun.mail.imap.protocol;\n42  \n43  import java.util.Vector;\n\
        44  import java.util.Date;\n45  import java.io.UnsupportedEncodingException;\n\
        46  import java.text.ParseException;\n47  import javax.mail.internet.InternetAddress;\n\
        48  import javax.mail.internet.AddressException;\n49  import javax.mail.internet.MailDateFormat;\n\
        50  import javax.mail.internet.MimeUtility;\n51  import com.sun.mail.iap.*;\n\
        52  \n53  /**\n54   * The ENEVELOPE item of an IMAP FETCH response.\n55  \
        \ *\n56   * @author  John Mani\n57   * @author  Bill Shannon\n58   */\n59\
        \  \n60  public class ENVELOPE implements Item {"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
        kind: Class
        name: ENVELOPE
        package: com.sun.mail.imap.protocol
    - codeSnip: "41  package com.sun.mail.imap.protocol;\n42  \n43  import java.util.Vector;\n\
        44  import java.util.Date;\n45  import java.io.UnsupportedEncodingException;\n\
        46  import java.text.ParseException;\n47  import javax.mail.internet.InternetAddress;\n\
        48  import javax.mail.internet.AddressException;\n49  import javax.mail.internet.MailDateFormat;\n\
        50  import javax.mail.internet.MimeUtility;\n51  import com.sun.mail.iap.*;\n\
        52  \n53  /**\n54   * The ENEVELOPE item of an IMAP FETCH response.\n55  \
        \ *\n56   * @author  John Mani\n57   * @author  Bill Shannon\n58   */\n59\
        \  \n60  public class ENVELOPE implements Item {\n61      "
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ENVELOPE.java
        kind: Class
        name: ENVELOPE
        package: com.sun.mail.imap.protocol
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import javax.mail.Flags;\n44  import\
        \ com.sun.mail.iap.*; \n45  \n46  /**\n47   * This class \n48   *\n49   *\
        \ @author  John Mani\n50   */\n51  \n52  public class FLAGS extends Flags\
        \ implements Item {\n53  "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FLAGS.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FLAGS.java
        kind: Class
        name: FLAGS
        package: com.sun.mail.imap.protocol
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import javax.mail.Flags;\n44  import\
        \ com.sun.mail.iap.*; \n45  \n46  /**\n47   * This class \n48   *\n49   *\
        \ @author  John Mani\n50   */\n51  \n52  public class FLAGS extends Flags\
        \ implements Item {\n53  \n54      // IMAP item name"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FLAGS.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FLAGS.java
        kind: Class
        name: FLAGS
        package: com.sun.mail.imap.protocol
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.lang.reflect.*;\n44 \
        \ \n45  import javax.mail.FetchProfile;\n46  import com.sun.mail.iap.ParsingException;\n\
        47  \n48  /**\n49   * Metadata describing a FETCH item.\n50   * Note that\
        \ the \"name\" field MUST be in uppercase. <p>\n51   *\n52   * @author  Bill\
        \ Shannon\n53   * @since JavaMail 1.4.6\n54   */\n55  "
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchItem.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchItem.java
        kind: Class
        name: FetchItem
        package: com.sun.mail.imap.protocol
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.lang.reflect.*;\n44  \n45  import javax.mail.FetchProfile;\n\
        46  import com.sun.mail.iap.ParsingException;\n47  \n48  /**\n49   * Metadata\
        \ describing a FETCH item.\n50   * Note that the \"name\" field MUST be in\
        \ uppercase. <p>\n51   *\n52   * @author  Bill Shannon\n53   * @since JavaMail\
        \ 1.4.6\n54   */\n55  \n56  public abstract class FetchItem { "
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchItem.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchItem.java
        kind: Class
        name: FetchItem
        package: com.sun.mail.imap.protocol
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.io.*;\n44  import java.util.*;\n\
        45  import com.sun.mail.util.*;\n46  import com.sun.mail.iap.*;\n47  \n48\
        \  /**\n49   * This class represents a FETCH response obtained from the input\
        \ stream\n50   * of an IMAP server.\n51   *\n52   * @author  John Mani\n53\
        \   * @author  Bill Shannon\n54   */\n55  "
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchResponse.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchResponse.java
        kind: Class
        name: FetchResponse
        package: com.sun.mail.imap.protocol
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.io.*;\n44  import java.util.*;\n45  import com.sun.mail.util.*;\n\
        46  import com.sun.mail.iap.*;\n47  \n48  /**\n49   * This class represents\
        \ a FETCH response obtained from the input stream\n50   * of an IMAP server.\n\
        51   *\n52   * @author  John Mani\n53   * @author  Bill Shannon\n54   */\n\
        55  \n56  public class FetchResponse extends IMAPResponse {"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchResponse.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/FetchResponse.java
        kind: Class
        name: FetchResponse
        package: com.sun.mail.imap.protocol
    - codeSnip: "39   */\n40  \n41  package com.sun.mail.imap.protocol;\n42  \n43\
        \  import java.io.*;\n44  import java.util.*;\n45  import java.text.*;\n46\
        \  import java.lang.reflect.*;\n47  import java.util.logging.Level;\n48  \n\
        49  import javax.mail.*;\n50  import javax.mail.internet.*;\n51  import javax.mail.search.*;\n\
        52  \n53  import com.sun.mail.util.*;\n54  import com.sun.mail.iap.*;\n55\
        \  import com.sun.mail.auth.Ntlm;\n56  \n57  import com.sun.mail.imap.ACL;\n\
        58  import com.sun.mail.imap.Rights;\n59  import com.sun.mail.imap.AppendUID;"
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "40  \n41  package com.sun.mail.imap.protocol;\n42  \n43  import java.io.*;\n\
        44  import java.util.*;\n45  import java.text.*;\n46  import java.lang.reflect.*;\n\
        47  import java.util.logging.Level;\n48  \n49  import javax.mail.*;\n50  import\
        \ javax.mail.internet.*;\n51  import javax.mail.search.*;\n52  \n53  import\
        \ com.sun.mail.util.*;\n54  import com.sun.mail.iap.*;\n55  import com.sun.mail.auth.Ntlm;\n\
        56  \n57  import com.sun.mail.imap.ACL;\n58  import com.sun.mail.imap.Rights;\n\
        59  import com.sun.mail.imap.AppendUID;\n60  import com.sun.mail.imap.SortTerm;"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "41  package com.sun.mail.imap.protocol;\n42  \n43  import java.io.*;\n\
        44  import java.util.*;\n45  import java.text.*;\n46  import java.lang.reflect.*;\n\
        47  import java.util.logging.Level;\n48  \n49  import javax.mail.*;\n50  import\
        \ javax.mail.internet.*;\n51  import javax.mail.search.*;\n52  \n53  import\
        \ com.sun.mail.util.*;\n54  import com.sun.mail.iap.*;\n55  import com.sun.mail.auth.Ntlm;\n\
        56  \n57  import com.sun.mail.imap.ACL;\n58  import com.sun.mail.imap.Rights;\n\
        59  import com.sun.mail.imap.AppendUID;\n60  import com.sun.mail.imap.SortTerm;\n\
        61  "
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "43  import java.io.*;\n44  import java.util.*;\n45  import java.text.*;\n\
        46  import java.lang.reflect.*;\n47  import java.util.logging.Level;\n48 \
        \ \n49  import javax.mail.*;\n50  import javax.mail.internet.*;\n51  import\
        \ javax.mail.search.*;\n52  \n53  import com.sun.mail.util.*;\n54  import\
        \ com.sun.mail.iap.*;\n55  import com.sun.mail.auth.Ntlm;\n56  \n57  import\
        \ com.sun.mail.imap.ACL;\n58  import com.sun.mail.imap.Rights;\n59  import\
        \ com.sun.mail.imap.AppendUID;\n60  import com.sun.mail.imap.SortTerm;\n61\
        \  \n62  /**\n63   * This class extends the iap.Protocol object and implements\
        \ IMAP"
      lineNumber: 53
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "44  import java.util.*;\n45  import java.text.*;\n46  import java.lang.reflect.*;\n\
        47  import java.util.logging.Level;\n48  \n49  import javax.mail.*;\n50  import\
        \ javax.mail.internet.*;\n51  import javax.mail.search.*;\n52  \n53  import\
        \ com.sun.mail.util.*;\n54  import com.sun.mail.iap.*;\n55  import com.sun.mail.auth.Ntlm;\n\
        56  \n57  import com.sun.mail.imap.ACL;\n58  import com.sun.mail.imap.Rights;\n\
        59  import com.sun.mail.imap.AppendUID;\n60  import com.sun.mail.imap.SortTerm;\n\
        61  \n62  /**\n63   * This class extends the iap.Protocol object and implements\
        \ IMAP\n64   * semantics. In general, there is a method corresponding to each"
      lineNumber: 54
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "45  import java.text.*;\n46  import java.lang.reflect.*;\n47  import\
        \ java.util.logging.Level;\n48  \n49  import javax.mail.*;\n50  import javax.mail.internet.*;\n\
        51  import javax.mail.search.*;\n52  \n53  import com.sun.mail.util.*;\n54\
        \  import com.sun.mail.iap.*;\n55  import com.sun.mail.auth.Ntlm;\n56  \n\
        57  import com.sun.mail.imap.ACL;\n58  import com.sun.mail.imap.Rights;\n\
        59  import com.sun.mail.imap.AppendUID;\n60  import com.sun.mail.imap.SortTerm;\n\
        61  \n62  /**\n63   * This class extends the iap.Protocol object and implements\
        \ IMAP\n64   * semantics. In general, there is a method corresponding to each\n\
        65   * IMAP protocol command. The typical implementation issues the"
      lineNumber: 55
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "47  import java.util.logging.Level;\n48  \n49  import javax.mail.*;\n\
        50  import javax.mail.internet.*;\n51  import javax.mail.search.*;\n52  \n\
        53  import com.sun.mail.util.*;\n54  import com.sun.mail.iap.*;\n55  import\
        \ com.sun.mail.auth.Ntlm;\n56  \n57  import com.sun.mail.imap.ACL;\n58  import\
        \ com.sun.mail.imap.Rights;\n59  import com.sun.mail.imap.AppendUID;\n60 \
        \ import com.sun.mail.imap.SortTerm;\n61  \n62  /**\n63   * This class extends\
        \ the iap.Protocol object and implements IMAP\n64   * semantics. In general,\
        \ there is a method corresponding to each\n65   * IMAP protocol command. The\
        \ typical implementation issues the\n66   * appropriate protocol command,\
        \ collects all responses, processes\n67   * those responses that are specific\
        \ to this command and then"
      lineNumber: 57
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "48  \n49  import javax.mail.*;\n50  import javax.mail.internet.*;\n\
        51  import javax.mail.search.*;\n52  \n53  import com.sun.mail.util.*;\n54\
        \  import com.sun.mail.iap.*;\n55  import com.sun.mail.auth.Ntlm;\n56  \n\
        57  import com.sun.mail.imap.ACL;\n58  import com.sun.mail.imap.Rights;\n\
        59  import com.sun.mail.imap.AppendUID;\n60  import com.sun.mail.imap.SortTerm;\n\
        61  \n62  /**\n63   * This class extends the iap.Protocol object and implements\
        \ IMAP\n64   * semantics. In general, there is a method corresponding to each\n\
        65   * IMAP protocol command. The typical implementation issues the\n66  \
        \ * appropriate protocol command, collects all responses, processes\n67  \
        \ * those responses that are specific to this command and then\n68   * dispatches\
        \ the rest (the unsolicited ones) to the dispatcher"
      lineNumber: 58
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "49  import javax.mail.*;\n50  import javax.mail.internet.*;\n51 \
        \ import javax.mail.search.*;\n52  \n53  import com.sun.mail.util.*;\n54 \
        \ import com.sun.mail.iap.*;\n55  import com.sun.mail.auth.Ntlm;\n56  \n57\
        \  import com.sun.mail.imap.ACL;\n58  import com.sun.mail.imap.Rights;\n59\
        \  import com.sun.mail.imap.AppendUID;\n60  import com.sun.mail.imap.SortTerm;\n\
        61  \n62  /**\n63   * This class extends the iap.Protocol object and implements\
        \ IMAP\n64   * semantics. In general, there is a method corresponding to each\n\
        65   * IMAP protocol command. The typical implementation issues the\n66  \
        \ * appropriate protocol command, collects all responses, processes\n67  \
        \ * those responses that are specific to this command and then\n68   * dispatches\
        \ the rest (the unsolicited ones) to the dispatcher\n69   * using the <code>notifyResponseHandlers(r)</code>."
      lineNumber: 59
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "50  import javax.mail.internet.*;\n51  import javax.mail.search.*;\n\
        52  \n53  import com.sun.mail.util.*;\n54  import com.sun.mail.iap.*;\n55\
        \  import com.sun.mail.auth.Ntlm;\n56  \n57  import com.sun.mail.imap.ACL;\n\
        58  import com.sun.mail.imap.Rights;\n59  import com.sun.mail.imap.AppendUID;\n\
        60  import com.sun.mail.imap.SortTerm;\n61  \n62  /**\n63   * This class extends\
        \ the iap.Protocol object and implements IMAP\n64   * semantics. In general,\
        \ there is a method corresponding to each\n65   * IMAP protocol command. The\
        \ typical implementation issues the\n66   * appropriate protocol command,\
        \ collects all responses, processes\n67   * those responses that are specific\
        \ to this command and then\n68   * dispatches the rest (the unsolicited ones)\
        \ to the dispatcher\n69   * using the <code>notifyResponseHandlers(r)</code>.\n\
        70   *"
      lineNumber: 60
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPProtocol.java
        kind: Class
        name: IMAPProtocol
        package: com.sun.mail.imap.protocol
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.io.*;\n44  import java.util.*;\n\
        45  import com.sun.mail.util.*;\n46  import com.sun.mail.iap.*;\n47  \n48\
        \  /**\n49   * This class represents a response obtained from the input stream\n\
        50   * of an IMAP server.\n51   *\n52   * @author  John Mani\n53   */\n54\
        \  \n55  public class IMAPResponse extends Response {"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPResponse.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPResponse.java
        kind: Class
        name: IMAPResponse
        package: com.sun.mail.imap.protocol
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.io.*;\n44  import java.util.*;\n45  import com.sun.mail.util.*;\n\
        46  import com.sun.mail.iap.*;\n47  \n48  /**\n49   * This class represents\
        \ a response obtained from the input stream\n50   * of an IMAP server.\n51\
        \   *\n52   * @author  John Mani\n53   */\n54  \n55  public class IMAPResponse\
        \ extends Response {\n56      private String key;"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPResponse.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPResponse.java
        kind: Class
        name: IMAPResponse
        package: com.sun.mail.imap.protocol
    - codeSnip: "39   */\n40  \n41  package com.sun.mail.imap.protocol;\n42  \n43\
        \  import java.io.*;\n44  import java.util.*;\n45  import java.util.logging.Level;\n\
        46  import javax.security.sasl.*;\n47  import javax.security.auth.callback.*;\n\
        48  \n49  import com.sun.mail.iap.*;\n50  import com.sun.mail.imap.*;\n51\
        \  import com.sun.mail.util.*;\n52  \n53  /**\n54   * This class contains\
        \ a single method that does authentication using\n55   * SASL.  This is in\
        \ a separate class so that it can be compiled with\n56   * J2SE 1.5.  Eventually\
        \ it should be merged into IMAPProtocol.java.\n57   */\n58  \n59  public class\
        \ IMAPSaslAuthenticator implements SaslAuthenticator {"
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPSaslAuthenticator.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPSaslAuthenticator.java
        kind: Class
        name: ''
        package: com.sun.mail.imap.protocol
    - codeSnip: "40  \n41  package com.sun.mail.imap.protocol;\n42  \n43  import java.io.*;\n\
        44  import java.util.*;\n45  import java.util.logging.Level;\n46  import javax.security.sasl.*;\n\
        47  import javax.security.auth.callback.*;\n48  \n49  import com.sun.mail.iap.*;\n\
        50  import com.sun.mail.imap.*;\n51  import com.sun.mail.util.*;\n52  \n53\
        \  /**\n54   * This class contains a single method that does authentication\
        \ using\n55   * SASL.  This is in a separate class so that it can be compiled\
        \ with\n56   * J2SE 1.5.  Eventually it should be merged into IMAPProtocol.java.\n\
        57   */\n58  \n59  public class IMAPSaslAuthenticator implements SaslAuthenticator\
        \ {\n60  "
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPSaslAuthenticator.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPSaslAuthenticator.java
        kind: Class
        name: ''
        package: com.sun.mail.imap.protocol
    - codeSnip: "41  package com.sun.mail.imap.protocol;\n42  \n43  import java.io.*;\n\
        44  import java.util.*;\n45  import java.util.logging.Level;\n46  import javax.security.sasl.*;\n\
        47  import javax.security.auth.callback.*;\n48  \n49  import com.sun.mail.iap.*;\n\
        50  import com.sun.mail.imap.*;\n51  import com.sun.mail.util.*;\n52  \n53\
        \  /**\n54   * This class contains a single method that does authentication\
        \ using\n55   * SASL.  This is in a separate class so that it can be compiled\
        \ with\n56   * J2SE 1.5.  Eventually it should be merged into IMAPProtocol.java.\n\
        57   */\n58  \n59  public class IMAPSaslAuthenticator implements SaslAuthenticator\
        \ {\n60  \n61      private IMAPProtocol pr;"
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPSaslAuthenticator.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/IMAPSaslAuthenticator.java
        kind: Class
        name: ''
        package: com.sun.mail.imap.protocol
    - codeSnip: "40  \n41  package com.sun.mail.imap.protocol;\n42  \n43  import java.util.Date;\n\
        44  import java.util.TimeZone;\n45  import java.util.Locale;\n46  import java.text.ParseException;\n\
        47  import java.text.SimpleDateFormat;\n48  import java.text.FieldPosition;\n\
        49  \n50  import javax.mail.internet.MailDateFormat;\n51  \n52  import com.sun.mail.iap.*;\
        \ \n53  \n54  \n55  /**\n56   * This class \n57   *\n58   * @author  John\
        \ Mani\n59   */\n60  "
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/INTERNALDATE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/INTERNALDATE.java
        kind: Class
        name: INTERNALDATE
        package: com.sun.mail.imap.protocol
    - codeSnip: "42  \n43  import java.util.Date;\n44  import java.util.TimeZone;\n\
        45  import java.util.Locale;\n46  import java.text.ParseException;\n47  import\
        \ java.text.SimpleDateFormat;\n48  import java.text.FieldPosition;\n49  \n\
        50  import javax.mail.internet.MailDateFormat;\n51  \n52  import com.sun.mail.iap.*;\
        \ \n53  \n54  \n55  /**\n56   * This class \n57   *\n58   * @author  John\
        \ Mani\n59   */\n60  \n61  public class INTERNALDATE implements Item {\n62\
        \  "
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/INTERNALDATE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/INTERNALDATE.java
        kind: Class
        name: INTERNALDATE
        package: com.sun.mail.imap.protocol
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.util.Vector;\n44  \n\
        45  import com.sun.mail.iap.*;\n46  \n47  /**\n48   * A LIST response.\n49\
        \   *\n50   * @author  John Mani\n51   * @author  Bill Shannon\n52   */\n\
        53  \n54  public class ListInfo { \n55      public String name = null;"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ListInfo.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/ListInfo.java
        kind: Class
        name: ListInfo
        package: com.sun.mail.imap.protocol
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import javax.mail.Flags;\n44  import\
        \ com.sun.mail.iap.*;\n45  \n46  /**\n47   * This class \n48   *\n49   * @author\
        \  John Mani\n50   */\n51  \n52  public class MailboxInfo { \n53      public\
        \ Flags availableFlags = null;"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/MailboxInfo.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/MailboxInfo.java
        kind: Class
        name: MailboxInfo
        package: com.sun.mail.imap.protocol
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import javax.mail.Flags;\n44  import\
        \ com.sun.mail.iap.*;\n45  \n46  /**\n47   * This class \n48   *\n49   * @author\
        \  John Mani\n50   */\n51  \n52  public class MailboxInfo { \n53      public\
        \ Flags availableFlags = null;\n54      public Flags permanentFlags = null;"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/MailboxInfo.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/MailboxInfo.java
        kind: Class
        name: MailboxInfo
        package: com.sun.mail.imap.protocol
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.util.*;\n44  import com.sun.mail.iap.*;\n\
        45  \n46  /**\n47   * This class and its inner class represent the response\
        \ to the\n48   * NAMESPACE command. <p>\n49   *\n50   * See <A HREF=\"http://www.ietf.org/rfc/rfc2342.txt\"\
        >RFC 2342</A>.\n51   *\n52   * @author Bill Shannon\n53   */\n54  "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/Namespaces.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/Namespaces.java
        kind: Class
        name: Namespace
        package: com.sun.mail.imap.protocol
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.io.ByteArrayInputStream;\n\
        44  import com.sun.mail.iap.*; \n45  import com.sun.mail.util.ASCIIUtility;\n\
        46  \n47  /**\n48   * This class \n49   *\n50   * @author  John Mani\n51 \
        \  */\n52  \n53  public class RFC822DATA implements Item {\n54     "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/RFC822DATA.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/RFC822DATA.java
        kind: Class
        name: RFC822DATA
        package: com.sun.mail.imap.protocol
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import java.io.ByteArrayInputStream;\n\
        44  import com.sun.mail.iap.*; \n45  import com.sun.mail.util.ASCIIUtility;\n\
        46  \n47  /**\n48   * This class \n49   *\n50   * @author  John Mani\n51 \
        \  */\n52  \n53  public class RFC822DATA implements Item {\n54     \n55  \
        \    static final char[] name = {'R','F','C','8','2','2'};"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/RFC822DATA.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/RFC822DATA.java
        kind: Class
        name: RFC822DATA
        package: com.sun.mail.imap.protocol
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import com.sun.mail.iap.*; \n44 \
        \ \n45  /**\n46   * This class \n47   *\n48   * @author  John Mani\n49   */\n\
        50  \n51  public class RFC822SIZE implements Item {\n52      \n53      static\
        \ final char[] name = {'R','F','C','8','2','2','.','S','I','Z','E'};"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/RFC822SIZE.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/RFC822SIZE.java
        kind: Class
        name: RFC822SIZE
        package: com.sun.mail.imap.protocol
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import com.sun.mail.iap.ProtocolException;\n\
        44  \n45  /**\n46   * Interface to make it easier to call IMAPSaslAuthenticator.\n\
        47   */\n48  \n49  public interface SaslAuthenticator {\n50      public boolean\
        \ authenticate(String[] mechs, String realm, String authzid,\n51  \t\t\t\t\
        String u, String p) throws ProtocolException;\n52  \n53  }"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SaslAuthenticator.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SaslAuthenticator.java
        kind: Interface
        name: SaslAuthenticator
        package: com.sun.mail.imap.protocol
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.util.*;\n44  import java.io.IOException;\n45  \n46 \
        \ import javax.mail.*;\n47  import javax.mail.search.*;\n48  import com.sun.mail.iap.*;\n\
        49  \n50  /**\n51   * This class traverses a search-tree and generates the\
        \ \n52   * corresponding IMAP search sequence. \n53   *\n54   * Each IMAPProtocol\
        \ instance contains an instance of this class,\n55   * which might be subclassed\
        \ by subclasses of IMAPProtocol to add\n56   * support for additional product-specific\
        \ search terms."
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SearchSequence.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SearchSequence.java
        kind: Class
        name: SearchSequence
        package: com.sun.mail.imap.protocol
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.util.*;\n44  import java.io.IOException;\n45  \n46 \
        \ import javax.mail.*;\n47  import javax.mail.search.*;\n48  import com.sun.mail.iap.*;\n\
        49  \n50  /**\n51   * This class traverses a search-tree and generates the\
        \ \n52   * corresponding IMAP search sequence. \n53   *\n54   * Each IMAPProtocol\
        \ instance contains an instance of this class,\n55   * which might be subclassed\
        \ by subclasses of IMAPProtocol to add\n56   * support for additional product-specific\
        \ search terms.\n57   *"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SearchSequence.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SearchSequence.java
        kind: Class
        name: SearchSequence
        package: com.sun.mail.imap.protocol
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.imap.protocol;\n\
        42  \n43  import java.util.*;\n44  import java.io.IOException;\n45  \n46 \
        \ import javax.mail.*;\n47  import javax.mail.search.*;\n48  import com.sun.mail.iap.*;\n\
        49  \n50  /**\n51   * This class traverses a search-tree and generates the\
        \ \n52   * corresponding IMAP search sequence. \n53   *\n54   * Each IMAPProtocol\
        \ instance contains an instance of this class,\n55   * which might be subclassed\
        \ by subclasses of IMAPProtocol to add\n56   * support for additional product-specific\
        \ search terms.\n57   *\n58   * @author\tJohn Mani"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SearchSequence.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/SearchSequence.java
        kind: Class
        name: SearchSequence
        package: com.sun.mail.imap.protocol
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import com.sun.mail.iap.*;\n44  \n\
        45  /**\n46   * STATUS response.\n47   *\n48   * @author  John Mani\n49  \
        \ */\n50  \n51  public class Status { \n52      public String mbox = null;\n\
        53      public int total = -1;"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/Status.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/Status.java
        kind: Class
        name: Status
        package: com.sun.mail.imap.protocol
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.imap.protocol;\n42  \n43  import com.sun.mail.iap.*; \n44 \
        \ \n45  /**\n46   * This class represents the UID data item\n47   *\n48  \
        \ * @author  John Mani\n49   */\n50  \n51  public class UID implements Item\
        \ {\n52      \n53      static final char[] name = {'U','I','D'};"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/UID.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/imap/protocol/UID.java
        kind: Class
        name: UID
        package: com.sun.mail.imap.protocol
    - lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/AppendStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/AppendStream.java
        kind: Class
        name: AppendStream
        package: ''
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.pop3;\n42  \n43  import javax.mail.*;\n44  \n45  /**\n46  \
        \ * The POP3 DefaultFolder.  Only contains the \"INBOX\" folder.\n47   *\n\
        48   * @author Christopher Cotton\n49   */\n50  public class DefaultFolder\
        \ extends Folder {\n51  \n52      DefaultFolder(POP3Store store) {\n53  \t\
        super(store);"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/DefaultFolder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/DefaultFolder.java
        kind: Class
        name: DefaultFolder
        package: com.sun.mail.pop3
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.pop3;\n42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n\
        45  import javax.mail.event.*;\n46  import java.io.InputStream;\n47  import\
        \ java.io.BufferedInputStream;\n48  import java.io.ByteArrayInputStream;\n\
        49  import java.io.IOException;\n50  import java.io.EOFException;\n51  import\
        \ java.util.Vector;\n52  import java.util.StringTokenizer;\n53  import java.util.logging.Level;"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
        kind: Class
        name: POP3Folder
        package: com.sun.mail.pop3
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.pop3;\n42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n\
        45  import javax.mail.event.*;\n46  import java.io.InputStream;\n47  import\
        \ java.io.BufferedInputStream;\n48  import java.io.ByteArrayInputStream;\n\
        49  import java.io.IOException;\n50  import java.io.EOFException;\n51  import\
        \ java.util.Vector;\n52  import java.util.StringTokenizer;\n53  import java.util.logging.Level;\n\
        54  import java.lang.reflect.Constructor;"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
        kind: Class
        name: POP3Folder
        package: com.sun.mail.pop3
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.pop3;\n42  \n43  import javax.mail.*;\n44  import javax.mail.internet.*;\n\
        45  import javax.mail.event.*;\n46  import java.io.InputStream;\n47  import\
        \ java.io.BufferedInputStream;\n48  import java.io.ByteArrayInputStream;\n\
        49  import java.io.IOException;\n50  import java.io.EOFException;\n51  import\
        \ java.util.Vector;\n52  import java.util.StringTokenizer;\n53  import java.util.logging.Level;\n\
        54  import java.lang.reflect.Constructor;\n55  "
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
        kind: Class
        name: POP3Folder
        package: com.sun.mail.pop3
    - codeSnip: "46  import java.io.InputStream;\n47  import java.io.BufferedInputStream;\n\
        48  import java.io.ByteArrayInputStream;\n49  import java.io.IOException;\n\
        50  import java.io.EOFException;\n51  import java.util.Vector;\n52  import\
        \ java.util.StringTokenizer;\n53  import java.util.logging.Level;\n54  import\
        \ java.lang.reflect.Constructor;\n55  \n56  import com.sun.mail.util.LineInputStream;\n\
        57  import com.sun.mail.util.MailLogger;\n58  \n59  /**\n60   * A POP3 Folder\
        \ (can only be \"INBOX\").\n61   *\n62   * See the <a href=\"package-summary.html\"\
        >com.sun.mail.pop3</a> package\n63   * documentation for further information\
        \ on the POP3 protocol provider. <p>\n64   *\n65   * @author      Bill Shannon\n\
        66   * @author\tJohn Mani (ported to the javax.mail APIs)"
      lineNumber: 56
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
        kind: Class
        name: POP3Folder
        package: com.sun.mail.pop3
    - codeSnip: "47  import java.io.BufferedInputStream;\n48  import java.io.ByteArrayInputStream;\n\
        49  import java.io.IOException;\n50  import java.io.EOFException;\n51  import\
        \ java.util.Vector;\n52  import java.util.StringTokenizer;\n53  import java.util.logging.Level;\n\
        54  import java.lang.reflect.Constructor;\n55  \n56  import com.sun.mail.util.LineInputStream;\n\
        57  import com.sun.mail.util.MailLogger;\n58  \n59  /**\n60   * A POP3 Folder\
        \ (can only be \"INBOX\").\n61   *\n62   * See the <a href=\"package-summary.html\"\
        >com.sun.mail.pop3</a> package\n63   * documentation for further information\
        \ on the POP3 protocol provider. <p>\n64   *\n65   * @author      Bill Shannon\n\
        66   * @author\tJohn Mani (ported to the javax.mail APIs)\n67   */"
      lineNumber: 57
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Folder.java
        kind: Class
        name: POP3Folder
        package: com.sun.mail.pop3
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.pop3;\n\
        42  \n43  import java.io.*;\n44  import java.util.Enumeration;\n45  import\
        \ java.util.logging.Level;\n46  import java.lang.ref.SoftReference;\n47  import\
        \ javax.mail.*;\n48  import javax.mail.internet.*;\n49  import javax.mail.event.*;\n\
        50  import com.sun.mail.util.ReadableMime;\n51  \n52  /**\n53   * A POP3 Message.\
        \  Just like a MimeMessage except that\n54   * some things are not supported.\n\
        55   *\n56   * @author      Bill Shannon\n57   */"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
        kind: Class
        name: POP3Message
        package: com.sun.mail.pop3
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.pop3;\n42\
        \  \n43  import java.io.*;\n44  import java.util.Enumeration;\n45  import\
        \ java.util.logging.Level;\n46  import java.lang.ref.SoftReference;\n47  import\
        \ javax.mail.*;\n48  import javax.mail.internet.*;\n49  import javax.mail.event.*;\n\
        50  import com.sun.mail.util.ReadableMime;\n51  \n52  /**\n53   * A POP3 Message.\
        \  Just like a MimeMessage except that\n54   * some things are not supported.\n\
        55   *\n56   * @author      Bill Shannon\n57   */\n58  public class POP3Message\
        \ extends MimeMessage implements ReadableMime {"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
        kind: Class
        name: POP3Message
        package: com.sun.mail.pop3
    - codeSnip: "39   */\n40  \n41  package com.sun.mail.pop3;\n42  \n43  import java.io.*;\n\
        44  import java.util.Enumeration;\n45  import java.util.logging.Level;\n46\
        \  import java.lang.ref.SoftReference;\n47  import javax.mail.*;\n48  import\
        \ javax.mail.internet.*;\n49  import javax.mail.event.*;\n50  import com.sun.mail.util.ReadableMime;\n\
        51  \n52  /**\n53   * A POP3 Message.  Just like a MimeMessage except that\n\
        54   * some things are not supported.\n55   *\n56   * @author      Bill Shannon\n\
        57   */\n58  public class POP3Message extends MimeMessage implements ReadableMime\
        \ {\n59  "
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
        kind: Class
        name: POP3Message
        package: com.sun.mail.pop3
    - codeSnip: "40  \n41  package com.sun.mail.pop3;\n42  \n43  import java.io.*;\n\
        44  import java.util.Enumeration;\n45  import java.util.logging.Level;\n46\
        \  import java.lang.ref.SoftReference;\n47  import javax.mail.*;\n48  import\
        \ javax.mail.internet.*;\n49  import javax.mail.event.*;\n50  import com.sun.mail.util.ReadableMime;\n\
        51  \n52  /**\n53   * A POP3 Message.  Just like a MimeMessage except that\n\
        54   * some things are not supported.\n55   *\n56   * @author      Bill Shannon\n\
        57   */\n58  public class POP3Message extends MimeMessage implements ReadableMime\
        \ {\n59  \n60      /*"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Message.java
        kind: Class
        name: POP3Message
        package: com.sun.mail.pop3
    - codeSnip: "149  \t\t    // This should eventually be replaced by\n150  \t\t\
        \    // Thread.currentThread().getContextClassLoader().\n151  \t\t    messageClass\
        \ = Class.forName(s, false, cl);\n152  \t\t} catch (ClassNotFoundException\
        \ ex1) {\n153  \t\t    // That didn't work, now try the \"system\" class loader.\n\
        154  \t\t    // (Need both of these because JDK 1.1 class loaders\n155  \t\
        \t    // may not delegate to their parent class loader.)\n156  \t\t    messageClass\
        \ = Class.forName(s);\n157  \t\t}\n158  \n159  \t\tClass[] c = {javax.mail.Folder.class,\
        \ int.class};\n160  \t\tmessageConstructor = messageClass.getConstructor(c);\n\
        161  \t    } catch (Exception ex) {\n162  \t\tlogger.log(Level.CONFIG, \"\
        failed to load message class\", ex);\n163  \t    }\n164  \t}\n165      }\n\
        166  \n167      /**\n168       * Get the value of a boolean property.\n169\
        \       * Print out the value if logging is enabled."
      lineNumber: 159
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
        kind: Constructor
        name: POP3Store
        package: com.sun.mail.pop3
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.pop3;\n\
        42  \n43  import java.util.Properties;\n44  import java.util.logging.Level;\n\
        45  import java.lang.reflect.*;\n46  \n47  import javax.mail.*;\n48  import\
        \ javax.mail.internet.*;\n49  import java.io.File;\n50  import java.io.PrintStream;\n\
        51  import java.io.IOException;\n52  import java.io.EOFException;\n53  import\
        \ java.util.Collections;\n54  import java.util.Map;\n55  \n56  import com.sun.mail.util.PropUtil;\n\
        57  import com.sun.mail.util.MailLogger;"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
        kind: Class
        name: POP3Store
        package: com.sun.mail.pop3
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.pop3;\n42\
        \  \n43  import java.util.Properties;\n44  import java.util.logging.Level;\n\
        45  import java.lang.reflect.*;\n46  \n47  import javax.mail.*;\n48  import\
        \ javax.mail.internet.*;\n49  import java.io.File;\n50  import java.io.PrintStream;\n\
        51  import java.io.IOException;\n52  import java.io.EOFException;\n53  import\
        \ java.util.Collections;\n54  import java.util.Map;\n55  \n56  import com.sun.mail.util.PropUtil;\n\
        57  import com.sun.mail.util.MailLogger;\n58  import com.sun.mail.util.SocketConnectException;"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
        kind: Class
        name: POP3Store
        package: com.sun.mail.pop3
    - codeSnip: "46  \n47  import javax.mail.*;\n48  import javax.mail.internet.*;\n\
        49  import java.io.File;\n50  import java.io.PrintStream;\n51  import java.io.IOException;\n\
        52  import java.io.EOFException;\n53  import java.util.Collections;\n54  import\
        \ java.util.Map;\n55  \n56  import com.sun.mail.util.PropUtil;\n57  import\
        \ com.sun.mail.util.MailLogger;\n58  import com.sun.mail.util.SocketConnectException;\n\
        59  import com.sun.mail.util.MailConnectException;\n60  \n61  /**\n62   *\
        \ A POP3 Message Store.  Contains only one folder, \"INBOX\".\n63   *\n64\
        \   * See the <a href=\"package-summary.html\">com.sun.mail.pop3</a> package\n\
        65   * documentation for further information on the POP3 protocol provider.\
        \ <p>\n66   *"
      lineNumber: 56
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
        kind: Class
        name: POP3Store
        package: com.sun.mail.pop3
    - codeSnip: "47  import javax.mail.*;\n48  import javax.mail.internet.*;\n49 \
        \ import java.io.File;\n50  import java.io.PrintStream;\n51  import java.io.IOException;\n\
        52  import java.io.EOFException;\n53  import java.util.Collections;\n54  import\
        \ java.util.Map;\n55  \n56  import com.sun.mail.util.PropUtil;\n57  import\
        \ com.sun.mail.util.MailLogger;\n58  import com.sun.mail.util.SocketConnectException;\n\
        59  import com.sun.mail.util.MailConnectException;\n60  \n61  /**\n62   *\
        \ A POP3 Message Store.  Contains only one folder, \"INBOX\".\n63   *\n64\
        \   * See the <a href=\"package-summary.html\">com.sun.mail.pop3</a> package\n\
        65   * documentation for further information on the POP3 protocol provider.\
        \ <p>\n66   *\n67   * @author      Bill Shannon"
      lineNumber: 57
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
        kind: Class
        name: POP3Store
        package: com.sun.mail.pop3
    - codeSnip: "48  import javax.mail.internet.*;\n49  import java.io.File;\n50 \
        \ import java.io.PrintStream;\n51  import java.io.IOException;\n52  import\
        \ java.io.EOFException;\n53  import java.util.Collections;\n54  import java.util.Map;\n\
        55  \n56  import com.sun.mail.util.PropUtil;\n57  import com.sun.mail.util.MailLogger;\n\
        58  import com.sun.mail.util.SocketConnectException;\n59  import com.sun.mail.util.MailConnectException;\n\
        60  \n61  /**\n62   * A POP3 Message Store.  Contains only one folder, \"\
        INBOX\".\n63   *\n64   * See the <a href=\"package-summary.html\">com.sun.mail.pop3</a>\
        \ package\n65   * documentation for further information on the POP3 protocol\
        \ provider. <p>\n66   *\n67   * @author      Bill Shannon\n68   * @author\
        \      John Mani"
      lineNumber: 58
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
        kind: Class
        name: POP3Store
        package: com.sun.mail.pop3
    - codeSnip: "49  import java.io.File;\n50  import java.io.PrintStream;\n51  import\
        \ java.io.IOException;\n52  import java.io.EOFException;\n53  import java.util.Collections;\n\
        54  import java.util.Map;\n55  \n56  import com.sun.mail.util.PropUtil;\n\
        57  import com.sun.mail.util.MailLogger;\n58  import com.sun.mail.util.SocketConnectException;\n\
        59  import com.sun.mail.util.MailConnectException;\n60  \n61  /**\n62   *\
        \ A POP3 Message Store.  Contains only one folder, \"INBOX\".\n63   *\n64\
        \   * See the <a href=\"package-summary.html\">com.sun.mail.pop3</a> package\n\
        65   * documentation for further information on the POP3 protocol provider.\
        \ <p>\n66   *\n67   * @author      Bill Shannon\n68   * @author      John\
        \ Mani\n69   */"
      lineNumber: 59
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/POP3Store.java
        kind: Class
        name: POP3Store
        package: com.sun.mail.pop3
    - codeSnip: "40  \n41  package com.sun.mail.pop3;\n42  \n43  import java.util.*;\n\
        44  import java.net.*;\n45  import java.io.*;\n46  import java.security.*;\n\
        47  import java.util.logging.Level;\n48  import javax.net.ssl.SSLSocket;\n\
        49  \n50  import com.sun.mail.util.*;\n51  \n52  class Response {\n53    \
        \  boolean ok = false;\t\t// true if \"+OK\"\n54      String data = null;\t\
        \t// rest of line after \"+OK\" or \"-ERR\"\n55      InputStream bytes = null;\t\
        // all the bytes from a multi-line response\n56  }\n57  \n58  /**\n59   *\
        \ This class provides a POP3 connection and implements \n60   * the POP3 protocol\
        \ requests."
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/Protocol.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/Protocol.java
        kind: Class
        name: Protocol
        package: com.sun.mail.pop3
    - lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/WritableSharedFile.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/pop3/WritableSharedFile.java
        kind: Class
        name: WritableSharedFile
        package: ''
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.smtp;\n42\
        \  \n43  import java.io.*;\n44  import java.util.*;\n45  import java.util.logging.Level;\n\
        46  import java.security.*;\n47  \n48  import com.sun.mail.util.*;\n49  \n\
        50  /**\n51   * DIGEST-MD5 authentication support.\n52   *\n53   * @author\
        \ Dean Gibson\n54   * @author Bill Shannon\n55   */\n56  \n57  public class\
        \ DigestMD5 {\n58  "
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/DigestMD5.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/DigestMD5.java
        kind: Class
        name: DigestMD5
        package: com.sun.mail.smtp
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.SendFailedException;\n44\
        \  import javax.mail.internet.InternetAddress;\n45  \n46  /**\n47   * This\
        \ exception is thrown when the message cannot be sent. <p>\n48   * \n49  \
        \ * The exception includes the address to which the message could not be\n\
        50   * sent.  This will usually appear in a chained list of exceptions,\n\
        51   * one per address, attached to a top level SendFailedException that\n\
        52   * aggregates all the addresses.\n53   *"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressFailedException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressFailedException.java
        kind: Class
        name: SMTPAddressFailedException
        package: com.sun.mail.smtp
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.SendFailedException;\n44\
        \  import javax.mail.internet.InternetAddress;\n45  \n46  /**\n47   * This\
        \ exception is thrown when the message cannot be sent. <p>\n48   * \n49  \
        \ * The exception includes the address to which the message could not be\n\
        50   * sent.  This will usually appear in a chained list of exceptions,\n\
        51   * one per address, attached to a top level SendFailedException that\n\
        52   * aggregates all the addresses.\n53   *\n54   * @since JavaMail 1.3.2"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressFailedException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressFailedException.java
        kind: Class
        name: SMTPAddressFailedException
        package: com.sun.mail.smtp
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.MessagingException;\n44\
        \  import javax.mail.internet.InternetAddress;\n45  \n46  /**\n47   * This\
        \ exception is chained off a SendFailedException when the\n48   * <code>mail.smtp.reportsuccess</code>\
        \ property is true.  It\n49   * indicates an address to which the message\
        \ was sent.  The command\n50   * will be an SMTP RCPT command and the return\
        \ code will be the\n51   * return code from that command.\n52   *\n53   *\
        \ @since JavaMail 1.3.2"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressSucceededException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressSucceededException.java
        kind: Class
        name: SMTPAddressSucceededException
        package: com.sun.mail.smtp
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.MessagingException;\n44\
        \  import javax.mail.internet.InternetAddress;\n45  \n46  /**\n47   * This\
        \ exception is chained off a SendFailedException when the\n48   * <code>mail.smtp.reportsuccess</code>\
        \ property is true.  It\n49   * indicates an address to which the message\
        \ was sent.  The command\n50   * will be an SMTP RCPT command and the return\
        \ code will be the\n51   * return code from that command.\n52   *\n53   *\
        \ @since JavaMail 1.3.2\n54   */"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressSucceededException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPAddressSucceededException.java
        kind: Class
        name: SMTPAddressSucceededException
        package: com.sun.mail.smtp
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import java.io.*;\n44  import javax.mail.*;\n\
        45  import javax.mail.internet.*;\n46  \n47  /**\n48   * This class is a specialization\
        \ of the MimeMessage class that allows\n49   * you to specify various SMTP\
        \ options and parameters that will be\n50   * used when this message is sent\
        \ over SMTP.  Simply use this class\n51   * instead of MimeMessage and set\
        \ SMTP options using the methods on\n52   * this class. <p>\n53   *\n54  \
        \ * See the <a href=\"package-summary.html\">com.sun.mail.smtp</a> package"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPMessage.java
        kind: Class
        name: SMTPMessage
        package: com.sun.mail.smtp
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import java.io.*;\n44  import javax.mail.*;\n\
        45  import javax.mail.internet.*;\n46  \n47  /**\n48   * This class is a specialization\
        \ of the MimeMessage class that allows\n49   * you to specify various SMTP\
        \ options and parameters that will be\n50   * used when this message is sent\
        \ over SMTP.  Simply use this class\n51   * instead of MimeMessage and set\
        \ SMTP options using the methods on\n52   * this class. <p>\n53   *\n54  \
        \ * See the <a href=\"package-summary.html\">com.sun.mail.smtp</a> package\n\
        55   * documentation for further information on the SMTP protocol provider.\
        \ <p>"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPMessage.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPMessage.java
        kind: Class
        name: SMTPMessage
        package: com.sun.mail.smtp
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import java.io.*;\n44  import com.sun.mail.util.CRLFOutputStream;\n\
        45  \n46  /**\n47   * In addition to converting lines into the canonical format,\n\
        48   * i.e., terminating lines with the CRLF sequence, escapes the \".\"\n\
        49   * by adding another \".\" to any \".\" that appears in the beginning\n\
        50   * of a line.  See RFC821 section 4.5.2.\n51   * \n52   * @author Max\
        \ Spivak\n53   * @see CRLFOutputStream\n54   */"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPOutputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPOutputStream.java
        kind: Class
        name: SMTPOutputStream
        package: com.sun.mail.smtp
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.smtp;\n42\
        \  \n43  import java.io.*;\n44  import java.util.*;\n45  import java.util.logging.Level;\n\
        46  import javax.security.sasl.*;\n47  import javax.security.auth.callback.*;\n\
        48  import javax.mail.MessagingException;\n49  \n50  import com.sun.mail.util.*;\n\
        51  \n52  /**\n53   * This class contains a single method that does authentication\
        \ using\n54   * SASL.  This is in a separate class so that it can be compiled\
        \ with\n55   * J2SE 1.5.  Eventually it should be merged into SMTPTransport.java.\n\
        56   */\n57  \n58  public class SMTPSaslAuthenticator implements SaslAuthenticator\
        \ {"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSaslAuthenticator.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSaslAuthenticator.java
        kind: Class
        name: ''
        package: com.sun.mail.smtp
    - codeSnip: "40  \n41  package com.sun.mail.smtp;\n42  \n43  import java.io.*;\n\
        44  import java.util.*;\n45  import java.util.logging.Level;\n46  import javax.security.sasl.*;\n\
        47  import javax.security.auth.callback.*;\n48  import javax.mail.MessagingException;\n\
        49  \n50  import com.sun.mail.util.*;\n51  \n52  /**\n53   * This class contains\
        \ a single method that does authentication using\n54   * SASL.  This is in\
        \ a separate class so that it can be compiled with\n55   * J2SE 1.5.  Eventually\
        \ it should be merged into SMTPTransport.java.\n56   */\n57  \n58  public\
        \ class SMTPSaslAuthenticator implements SaslAuthenticator {\n59  \n60   \
        \   private SMTPTransport pr;"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSaslAuthenticator.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSaslAuthenticator.java
        kind: Class
        name: ''
        package: com.sun.mail.smtp
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.Address;\n44  import javax.mail.SendFailedException;\n\
        45  import javax.mail.internet.InternetAddress;\n46  \n47  /**\n48   * This\
        \ exception is thrown when the message cannot be sent. <p>\n49   * \n50  \
        \ * This exception will usually appear first in a chained list of exceptions,\n\
        51   * followed by SMTPAddressFailedExceptions and/or\n52   * SMTPAddressSucceededExceptions,\
        \ * one per address.\n53   * This exception corresponds to one of the SMTP\
        \ commands used to"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSendFailedException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSendFailedException.java
        kind: Class
        name: SMTPSendFailedException
        package: com.sun.mail.smtp
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.Address;\n44  import javax.mail.SendFailedException;\n\
        45  import javax.mail.internet.InternetAddress;\n46  \n47  /**\n48   * This\
        \ exception is thrown when the message cannot be sent. <p>\n49   * \n50  \
        \ * This exception will usually appear first in a chained list of exceptions,\n\
        51   * followed by SMTPAddressFailedExceptions and/or\n52   * SMTPAddressSucceededExceptions,\
        \ * one per address.\n53   * This exception corresponds to one of the SMTP\
        \ commands used to\n54   * send a message, such as the MAIL, DATA, and \"\
        end of data\" commands,"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSendFailedException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSendFailedException.java
        kind: Class
        name: SMTPSendFailedException
        package: com.sun.mail.smtp
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.Address;\n44  import javax.mail.SendFailedException;\n\
        45  import javax.mail.internet.InternetAddress;\n46  \n47  /**\n48   * This\
        \ exception is thrown when the message cannot be sent. <p>\n49   * \n50  \
        \ * This exception will usually appear first in a chained list of exceptions,\n\
        51   * followed by SMTPAddressFailedExceptions and/or\n52   * SMTPAddressSucceededExceptions,\
        \ * one per address.\n53   * This exception corresponds to one of the SMTP\
        \ commands used to\n54   * send a message, such as the MAIL, DATA, and \"\
        end of data\" commands,\n55   * but not including the RCPT command."
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSendFailedException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSendFailedException.java
        kind: Class
        name: SMTPSendFailedException
        package: com.sun.mail.smtp
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.SendFailedException;\n44\
        \  import javax.mail.internet.InternetAddress;\n45  \n46  /**\n47   * This\
        \ exception is thrown when the message cannot be sent. <p>\n48   * \n49  \
        \ * The exception includes the sender's address, which the mail server\n50\
        \   * rejected.\n51   *\n52   * @since JavaMail 1.4.4\n53   */"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSenderFailedException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSenderFailedException.java
        kind: Class
        name: SMTPSenderFailedException
        package: com.sun.mail.smtp
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.SendFailedException;\n44\
        \  import javax.mail.internet.InternetAddress;\n45  \n46  /**\n47   * This\
        \ exception is thrown when the message cannot be sent. <p>\n48   * \n49  \
        \ * The exception includes the sender's address, which the mail server\n50\
        \   * rejected.\n51   *\n52   * @since JavaMail 1.4.4\n53   */\n54  "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSenderFailedException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPSenderFailedException.java
        kind: Class
        name: SMTPSenderFailedException
        package: com.sun.mail.smtp
    - codeSnip: "40  \n41  package com.sun.mail.smtp;\n42  \n43  import java.io.*;\n\
        44  import java.net.*;\n45  import java.util.*;\n46  import java.util.logging.Level;\n\
        47  import java.lang.reflect.*;\n48  import javax.net.ssl.SSLSocket;\n49 \
        \ \n50  import javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  \n54  import com.sun.mail.util.*;\n55  import com.sun.mail.auth.*;\n56\
        \  \n57  /**\n58   * This class implements the Transport abstract class using\
        \ SMTP for\n59   * message submission and transport. <p>\n60   *"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
        kind: Class
        name: Authenticator
        package: com.sun.mail.smtp
    - codeSnip: "41  package com.sun.mail.smtp;\n42  \n43  import java.io.*;\n44 \
        \ import java.net.*;\n45  import java.util.*;\n46  import java.util.logging.Level;\n\
        47  import java.lang.reflect.*;\n48  import javax.net.ssl.SSLSocket;\n49 \
        \ \n50  import javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  \n54  import com.sun.mail.util.*;\n55  import com.sun.mail.auth.*;\n56\
        \  \n57  /**\n58   * This class implements the Transport abstract class using\
        \ SMTP for\n59   * message submission and transport. <p>\n60   *\n61   * See\
        \ the <a href=\"package-summary.html\">com.sun.mail.smtp</a> package"
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
        kind: Class
        name: Authenticator
        package: com.sun.mail.smtp
    - codeSnip: "42  \n43  import java.io.*;\n44  import java.net.*;\n45  import java.util.*;\n\
        46  import java.util.logging.Level;\n47  import java.lang.reflect.*;\n48 \
        \ import javax.net.ssl.SSLSocket;\n49  \n50  import javax.mail.*;\n51  import\
        \ javax.mail.event.*;\n52  import javax.mail.internet.*;\n53  \n54  import\
        \ com.sun.mail.util.*;\n55  import com.sun.mail.auth.*;\n56  \n57  /**\n58\
        \   * This class implements the Transport abstract class using SMTP for\n\
        59   * message submission and transport. <p>\n60   *\n61   * See the <a href=\"\
        package-summary.html\">com.sun.mail.smtp</a> package\n62   * documentation\
        \ for further information on the SMTP protocol provider. <p>"
      lineNumber: 52
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
        kind: Class
        name: Authenticator
        package: com.sun.mail.smtp
    - codeSnip: "44  import java.net.*;\n45  import java.util.*;\n46  import java.util.logging.Level;\n\
        47  import java.lang.reflect.*;\n48  import javax.net.ssl.SSLSocket;\n49 \
        \ \n50  import javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  \n54  import com.sun.mail.util.*;\n55  import com.sun.mail.auth.*;\n56\
        \  \n57  /**\n58   * This class implements the Transport abstract class using\
        \ SMTP for\n59   * message submission and transport. <p>\n60   *\n61   * See\
        \ the <a href=\"package-summary.html\">com.sun.mail.smtp</a> package\n62 \
        \  * documentation for further information on the SMTP protocol provider.\
        \ <p>\n63   *\n64   * This class includes many protected methods that allow\
        \ a subclass to"
      lineNumber: 54
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
        kind: Class
        name: Authenticator
        package: com.sun.mail.smtp
    - codeSnip: "45  import java.util.*;\n46  import java.util.logging.Level;\n47\
        \  import java.lang.reflect.*;\n48  import javax.net.ssl.SSLSocket;\n49  \n\
        50  import javax.mail.*;\n51  import javax.mail.event.*;\n52  import javax.mail.internet.*;\n\
        53  \n54  import com.sun.mail.util.*;\n55  import com.sun.mail.auth.*;\n56\
        \  \n57  /**\n58   * This class implements the Transport abstract class using\
        \ SMTP for\n59   * message submission and transport. <p>\n60   *\n61   * See\
        \ the <a href=\"package-summary.html\">com.sun.mail.smtp</a> package\n62 \
        \  * documentation for further information on the SMTP protocol provider.\
        \ <p>\n63   *\n64   * This class includes many protected methods that allow\
        \ a subclass to\n65   * extend this class and add support for non-standard\
        \ SMTP commands."
      lineNumber: 55
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SMTPTransport.java
        kind: Class
        name: Authenticator
        package: com.sun.mail.smtp
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.smtp;\n42  \n43  import javax.mail.MessagingException;\n44\
        \  \n45  /**\n46   * Interface to make it easier to call SMTPSaslAuthenticator.\n\
        47   */\n48  \n49  public interface SaslAuthenticator {\n50      public boolean\
        \ authenticate(String[] mechs, String realm, String authzid,\n51  \t\t\t\t\
        String u, String p) throws MessagingException;\n52  \n53  }"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SaslAuthenticator.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/smtp/SaslAuthenticator.java
        kind: Interface
        name: SaslAuthenticator
        package: com.sun.mail.smtp
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.util;\n42  \n43  import javax.mail.MessagingException;\n44\
        \  \n45  /**\n46   * A MessagingException that indicates a socket connection\
        \ attempt failed.\n47   * Unlike java.net.ConnectException, it includes details\
        \ of what we\n48   * were trying to connect to.  The underlying exception\
        \ is available\n49   * as the \"cause\" of this exception.\n50   *\n51   *\
        \ @see\t\tjava.net.ConnectException\n52   * @author\tBill Shannon\n53   *\
        \ @since \tJavaMail 1.5.0"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/MailConnectException.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/MailConnectException.java
        kind: Class
        name: MailConnectException
        package: com.sun.mail.util
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package com.sun.mail.util;\n42\
        \  \n43  import java.io.PrintStream;\n44  import java.text.MessageFormat;\n\
        45  import java.util.logging.Logger;\n46  import java.util.logging.Level;\n\
        47  \n48  import javax.mail.Session;\n49  \n50  /**\n51   * A simplified logger\
        \ used by JavaMail to handle logging to a\n52   * PrintStream and logging\
        \ through a java.util.logging.Logger.\n53   * If debug is set, messages are\
        \ written to the PrintStream and\n54   * prefixed by the specified prefix\
        \ (which is not included in\n55   * Logger messages).\n56   * Messages are\
        \ logged by the Logger based on the configuration\n57   * of the logging system.\n\
        58   */"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/MailLogger.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/MailLogger.java
        kind: Class
        name: MailLogger
        package: com.sun.mail.util
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.util;\n\
        42  \n43  import java.lang.reflect.*;\n44  import java.security.*;\n45  \n\
        46  import javax.mail.internet.MimePart;\n47  \n48  /**\n49   * General MIME-related\
        \ utility methods.\n50   *\n51   * @author\tBill Shannon\n52   * @since\t\
        JavaMail 1.4.4\n53   */\n54  public class MimeUtil {\n55  \n56      private\
        \ static final Method cleanContentType;"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/MimeUtil.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/MimeUtil.java
        kind: Class
        name: MimeUtil
        package: com.sun.mail.util
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.util;\n42  \n43  import java.util.*;\n44  import javax.mail.Session;\n\
        45  \n46  /**\n47   * Utilities to make it easier to get property values.\n\
        48   * Properties can be strings or type-specific value objects.\n49   *\n\
        50   * @author Bill Shannon\n51   */\n52  public class PropUtil {\n53  \n\
        54      // No one should instantiate this class."
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/PropUtil.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/PropUtil.java
        kind: Class
        name: PropUtil
        package: com.sun.mail.util
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ com.sun.mail.util;\n42  \n43  import java.io.InputStream;\n44  \n45  import\
        \ javax.mail.MessagingException;\n46  \n47  /**\n48   * A Message or message\
        \ Part whose data can be read as a MIME format\n49   * stream.  Note that\
        \ the MIME stream will include both the headers\n50   * and the body of the\
        \ message or part.  This should be the same data\n51   * that is produced\
        \ by the writeTo method, but in a readable form.\n52   *\n53   * @author\t\
        Bill Shannon\n54   * @since\tJavaMail 1.4.5\n55   */"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/ReadableMime.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/ReadableMime.java
        kind: Interface
        name: ReadableMime
        package: com.sun.mail.util
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package com.sun.mail.util;\n\
        42  \n43  import java.io.InputStream;\n44  import java.io.ByteArrayOutputStream;\n\
        45  \n46  import javax.mail.util.SharedByteArrayInputStream;\n47  \n48  /**\n\
        49   * A ByteArrayOutputStream that allows us to share the byte array\n50\
        \   * rather than copy it.  Eventually could replace this with something\n\
        51   * that doesn't require a single contiguous byte array.\n52   *\n53  \
        \ * @author\tBill Shannon\n54   * @since\tJavaMail 1.4.5\n55   */\n56  public\
        \ class SharedByteArrayOutputStream extends ByteArrayOutputStream {"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/SharedByteArrayOutputStream.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/SharedByteArrayOutputStream.java
        kind: Class
        name: SharedByteArrayOutputStream
        package: com.sun.mail.util
    - codeSnip: "41  package com.sun.mail.util.logging;\n42  \n43  import java.io.ObjectStreamException;\n\
        44  import java.lang.reflect.InvocationTargetException;\n45  import java.lang.reflect.Method;\n\
        46  import java.security.AccessController;\n47  import java.security.PrivilegedAction;\n\
        48  import java.util.*;\n49  import java.util.logging.Formatter;\n50  import\
        \ java.util.logging.*;\n51  import javax.mail.Authenticator;\n52  \n53  /**\n\
        54   * An adapter class to allow the Mail API to access the LogManager properties.\n\
        55   * The LogManager properties are treated as the root of all properties.\n\
        56   * First, the parent properties are searched. If no value is found, then,\n\
        57   * the LogManager is searched with prefix value.  If not found, then,\
        \ just the\n58   * key itself is searched in the LogManager. If a value is\
        \ found in the\n59   * LogManager it is then copied to this properties object\
        \ with no key prefix.\n60   * If no value is found in the LogManager or the\
        \ parent properties, then this\n61   * properties object is searched only\
        \ by passing the key value."
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/LogManagerProperties.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/LogManagerProperties.java
        kind: Class
        name: LogManagerProperties
        package: com.sun.mail.util.logging
    - codeSnip: "34   * recipient has the option to distribute your version of this\
        \ file under\n35   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n36   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n37   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n38   * only if the new code is made subject\
        \ to such option by the copyright\n39   * holder.\n40   */\n41  \n42  package\
        \ com.sun.mail.util.logging;\n43  \n44  import com.sun.mail.smtp.SMTPTransport;\n\
        45  import java.io.*;\n46  import java.lang.reflect.Array;\n47  import java.net.InetAddress;\n\
        48  import java.net.URLConnection;\n49  import java.net.UnknownHostException;\n\
        50  import java.nio.charset.Charset;\n51  import java.security.AccessController;\n\
        52  import java.security.PrivilegedAction;\n53  import java.util.*;\n54  import\
        \ java.util.logging.*;"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
        kind: Class
        name: DefaultAuthenticator
        package: com.sun.mail.util.logging
    - codeSnip: "50  import java.nio.charset.Charset;\n51  import java.security.AccessController;\n\
        52  import java.security.PrivilegedAction;\n53  import java.util.*;\n54  import\
        \ java.util.logging.*;\n55  import java.util.logging.Formatter;\n56  import\
        \ javax.activation.DataHandler;\n57  import javax.activation.DataSource;\n\
        58  import javax.activation.FileTypeMap;\n59  import javax.activation.MimetypesFileTypeMap;\n\
        60  import javax.mail.*;\n61  import javax.mail.internet.*;\n62  import javax.mail.util.ByteArrayDataSource;\n\
        63  \n64  /**\n65   * <tt>Handler</tt> that formats log records as an email\
        \ message.\n66   *\n67   * <p>\n68   * This <tt>Handler</tt> will store a\
        \ fixed number of log records used to\n69   * generate a single email message.\
        \  When the internal buffer reaches capacity,\n70   * all log records are\
        \ formatted and placed in an email which is sent to an"
      lineNumber: 60
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
        kind: Class
        name: DefaultAuthenticator
        package: com.sun.mail.util.logging
    - codeSnip: "51  import java.security.AccessController;\n52  import java.security.PrivilegedAction;\n\
        53  import java.util.*;\n54  import java.util.logging.*;\n55  import java.util.logging.Formatter;\n\
        56  import javax.activation.DataHandler;\n57  import javax.activation.DataSource;\n\
        58  import javax.activation.FileTypeMap;\n59  import javax.activation.MimetypesFileTypeMap;\n\
        60  import javax.mail.*;\n61  import javax.mail.internet.*;\n62  import javax.mail.util.ByteArrayDataSource;\n\
        63  \n64  /**\n65   * <tt>Handler</tt> that formats log records as an email\
        \ message.\n66   *\n67   * <p>\n68   * This <tt>Handler</tt> will store a\
        \ fixed number of log records used to\n69   * generate a single email message.\
        \  When the internal buffer reaches capacity,\n70   * all log records are\
        \ formatted and placed in an email which is sent to an\n71   * email server.\
        \  The code to manually setup this handler can be as simple as"
      lineNumber: 61
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
        kind: Class
        name: DefaultAuthenticator
        package: com.sun.mail.util.logging
    - codeSnip: "52  import java.security.PrivilegedAction;\n53  import java.util.*;\n\
        54  import java.util.logging.*;\n55  import java.util.logging.Formatter;\n\
        56  import javax.activation.DataHandler;\n57  import javax.activation.DataSource;\n\
        58  import javax.activation.FileTypeMap;\n59  import javax.activation.MimetypesFileTypeMap;\n\
        60  import javax.mail.*;\n61  import javax.mail.internet.*;\n62  import javax.mail.util.ByteArrayDataSource;\n\
        63  \n64  /**\n65   * <tt>Handler</tt> that formats log records as an email\
        \ message.\n66   *\n67   * <p>\n68   * This <tt>Handler</tt> will store a\
        \ fixed number of log records used to\n69   * generate a single email message.\
        \  When the internal buffer reaches capacity,\n70   * all log records are\
        \ formatted and placed in an email which is sent to an\n71   * email server.\
        \  The code to manually setup this handler can be as simple as\n72   * the\
        \ following:"
      lineNumber: 62
      message: ''
      uri: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
      variables:
        file: file:///root/.m2/repository/com/sun/mail/javax.mail/1.5.0/com/sun/mail/util/logging/MailHandler.java
        kind: Class
        name: DefaultAuthenticator
        package: com.sun.mail.util.logging
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail;\n42  \n43  import java.io.*;\n44  import java.util.Vector;\n\
        45  import javax.mail.event.MailEvent;\n46  \n47  /**\n48   * Package private\
        \ class used by Store & Folder to dispatch events.\n49   * This class implements\
        \ an event queue, and a dispatcher thread that\n50   * dequeues and dispatches\
        \ events from the queue.\n51   *\n52   * Pieces stolen from sun.misc.Queue.\n\
        53   *\n54   * @author\tBill Shannon\n55   */"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/EventQueue.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/EventQueue.java
        kind: Class
        name: QueueElement
        package: javax.mail
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail;\n42  \n\
        43  import java.io.*;\n44  import java.lang.*;\n45  import java.util.Vector;\n\
        46  import java.util.StringTokenizer;\n47  import javax.mail.search.SearchTerm;\n\
        48  import javax.mail.event.*;\n49  \n50  /**\n51   * Folder is an abstract\
        \ class that represents a folder for mail\n52   * messages. Subclasses implement\
        \ protocol specific Folders.<p>\n53   *\n54   * Folders can contain Messages,\
        \ other Folders or both, thus providing\n55   * a tree-like hierarchy rooted\
        \ at the Store's default folder. (Note \n56   * that some Folder implementations\
        \ may not allow both Messages and \n57   * other Folders in the same Folder).<p>"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Folder.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Folder.java
        kind: Class
        name: TerminatorEvent
        package: javax.mail
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package javax.mail;\n42  \n43\
        \  import java.io.*;\n44  import java.lang.*;\n45  import java.util.Vector;\n\
        46  import java.util.StringTokenizer;\n47  import javax.mail.search.SearchTerm;\n\
        48  import javax.mail.event.*;\n49  \n50  /**\n51   * Folder is an abstract\
        \ class that represents a folder for mail\n52   * messages. Subclasses implement\
        \ protocol specific Folders.<p>\n53   *\n54   * Folders can contain Messages,\
        \ other Folders or both, thus providing\n55   * a tree-like hierarchy rooted\
        \ at the Store's default folder. (Note \n56   * that some Folder implementations\
        \ may not allow both Messages and \n57   * other Folders in the same Folder).<p>\n\
        58   *"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Folder.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Folder.java
        kind: Class
        name: TerminatorEvent
        package: javax.mail
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail;\n42  \n\
        43  import java.util.Vector;\n44  import java.util.Date;\n45  import java.util.Properties;\n\
        46  import java.io.*;\n47  import javax.mail.search.SearchTerm;\n48  \n49\
        \  /**\n50   * This class models an email message. This is an abstract class.\
        \  \n51   * Subclasses provide actual implementations. <p>\n52   *\n53   *\
        \ Message implements the Part interface. Message contains a set of\n54   *\
        \ attributes and a \"content\". Messages within a folder also have a \n55\
        \   * set of flags that describe its state within the folder.<p>\n56   *\n\
        57   * Message defines some new attributes in addition to those defined"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Message.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Message.java
        kind: Class
        name: RecipientType
        package: javax.mail
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail;\n\
        42  \n43  import java.io.*;\n44  import java.net.*;\n45  import java.util.*;\n\
        46  import javax.mail.event.*;\n47  \n48  /**\n49   * An abstract class that\
        \ contains the functionality\n50   * common to messaging services, such as\
        \ stores and transports. <p>\n51   * A messaging service is created from a\
        \ <code>Session</code> and is\n52   * named using a <code>URLName</code>.\
        \  A service must be connected\n53   * before it can be used.  Connection\
        \ events are sent to reflect\n54   * its connection status.\n55   *\n56  \
        \ * @author Christopher Cotton"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Service.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Service.java
        kind: Class
        name: TerminatorEvent
        package: javax.mail
    - codeSnip: "46  import java.security.*;\n47  import java.util.Enumeration;\n\
        48  import java.util.Hashtable;\n49  import java.util.Properties;\n50  import\
        \ java.util.StringTokenizer;\n51  import java.util.Vector;\n52  import java.util.logging.Level;\n\
        53  \n54  import javax.activation.*;\n55  \n56  import com.sun.mail.util.LineInputStream;\n\
        57  import com.sun.mail.util.MailLogger;\n58  \n59  /**\n60   * The Session\
        \ class represents a mail session and is not subclassed.\n61   * It collects\
        \ together properties and defaults used by the mail API's.\n62   * A single\
        \ default session can be shared by multiple applications on the\n63   * desktop.\
        \  Unshared sessions can also be created. <p>\n64   *\n65   * The Session\
        \ class provides access to the protocol providers that\n66   * implement the\
        \ <code>Store</code>, <code>Transport</code>, and related"
      lineNumber: 56
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Session.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Session.java
        kind: Class
        name: Session
        package: javax.mail
    - codeSnip: "47  import java.util.Enumeration;\n48  import java.util.Hashtable;\n\
        49  import java.util.Properties;\n50  import java.util.StringTokenizer;\n\
        51  import java.util.Vector;\n52  import java.util.logging.Level;\n53  \n\
        54  import javax.activation.*;\n55  \n56  import com.sun.mail.util.LineInputStream;\n\
        57  import com.sun.mail.util.MailLogger;\n58  \n59  /**\n60   * The Session\
        \ class represents a mail session and is not subclassed.\n61   * It collects\
        \ together properties and defaults used by the mail API's.\n62   * A single\
        \ default session can be shared by multiple applications on the\n63   * desktop.\
        \  Unshared sessions can also be created. <p>\n64   *\n65   * The Session\
        \ class provides access to the protocol providers that\n66   * implement the\
        \ <code>Store</code>, <code>Transport</code>, and related\n67   * classes.\
        \  The protocol providers are configured using the following files:"
      lineNumber: 57
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Session.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Session.java
        kind: Class
        name: Session
        package: javax.mail
    - codeSnip: "788  \t\tserviceClass = Class.forName(provider.getClassName());\n\
        789  \t    } catch (Exception ex) {\n790  \t\t// Nothing worked, give up.\n\
        791  \t\tlogger.log(Level.FINE, \"Exception loading provider\", ex);\n792\
        \  \t\tthrow new NoSuchProviderException(provider.getProtocol());\n793  \t\
        \    }\n794  \t}\n795  \n796  \t// construct an instance of the class\n797\
        \  \ttry {\n798  \t    Class[] c = {javax.mail.Session.class, javax.mail.URLName.class};\n\
        799  \t    Constructor cons = serviceClass.getConstructor(c);\n800  \n801\
        \  \t    Object[] o = {this, url};\n802  \t    service = cons.newInstance(o);\n\
        803  \n804  \t} catch (Exception ex) {\n805  \t    logger.log(Level.FINE,\
        \ \"Exception loading provider\", ex);\n806  \t    throw new NoSuchProviderException(provider.getProtocol());\n\
        807  \t}\n808  "
      lineNumber: 798
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Session.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Session.java
        kind: Method
        name: getService
        package: javax.mail
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail;\n\
        42  \n43  import java.io.*;\n44  import java.net.*;\n45  import java.util.*;\n\
        46  import javax.mail.event.*;\n47  \n48  /**\n49   * An abstract class that\
        \ models a message store and its\n50   * access protocol, for storing and\
        \ retrieving messages. \n51   * Subclasses provide actual implementations.\
        \ <p>\n52   *\n53   * Note that <code>Store</code> extends the <code>Service</code>\n\
        54   * class, which provides many common methods for naming stores,\n55  \
        \ * connecting to stores, and listening to connection events.\n56   *"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Store.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Store.java
        kind: Class
        name: Store
        package: javax.mail
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package javax.mail;\n42  \n43\
        \  import java.io.IOException;\n44  import java.net.*;\n45  import java.util.Vector;\n\
        46  import java.util.Hashtable;\n47  import java.util.Enumeration;\n48  import\
        \ javax.mail.event.*;\n49  \n50  /**\n51   * An abstract class that models\
        \ a message transport.\n52   * Subclasses provide actual implementations.\
        \ <p>\n53   *\n54   * Note that <code>Transport</code> extends the <code>Service</code>\n\
        55   * class, which provides many common methods for naming transports,\n\
        56   * connecting to transports, and listening to connection events.\n57 \
        \  *\n58   * @author John Mani"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Transport.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/Transport.java
        kind: Class
        name: Transport
        package: javax.mail
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.event;\n42  \n43  import java.util.*;\n44  import javax.mail.*;\n\
        45  \n46  /**\n47   * This class models Connection events.\n48   *\n49   *\
        \ @author John Mani\n50   */\n51  \n52  public class ConnectionEvent extends\
        \ MailEvent  {\n53  \n54      /** A connection was opened. */"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/ConnectionEvent.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/ConnectionEvent.java
        kind: Class
        name: ConnectionEvent
        package: javax.mail.event
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.event;\n42  \n43  import java.util.*;\n44  import javax.mail.*;\n\
        45  \n46  /**\n47   * This class models Folder <em>existence</em> events.\
        \ FolderEvents are\n48   * delivered to FolderListeners registered on the\
        \ affected Folder as\n49   * well as the containing Store. <p>\n50   *\n51\
        \   * Service providers vary widely in their ability to notify clients of\n\
        52   * these events.  At a minimum, service providers must notify listeners\n\
        53   * registered on the same Store or Folder object on which the operation\n\
        54   * occurs.  Service providers may also notify listeners when changes"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/FolderEvent.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/FolderEvent.java
        kind: Class
        name: FolderEvent
        package: javax.mail.event
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.event;\n42  \n43  import java.util.*;\n44  import javax.mail.*;\n\
        45  \n46  /**\n47   * This class models Message change events.\n48   *\n49\
        \   * @author John Mani\n50   */\n51  \n52  public class MessageChangedEvent\
        \ extends MailEvent {\n53  \n54      /** The message's flags changed. */"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/MessageChangedEvent.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/MessageChangedEvent.java
        kind: Class
        name: MessageChangedEvent
        package: javax.mail.event
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.event;\n42  \n43  import java.util.*;\n44  import javax.mail.*;\n\
        45  \n46  /**\n47   * This class notifies changes in the number of messages\
        \ in a folder. <p>\n48   *\n49   * Note that some folder types may only deliver\
        \ MessageCountEvents at\n50   * certain times or after certain operations.\
        \  IMAP in particular will\n51   * only notify the client of MessageCountEvents\
        \ when a client issues a\n52   * new command.\n53   * Refer to RFC 2060 <A\
        \ HREF=\"http://www.ietf.org/rfc/rfc2060.txt\">\n54   * http://www.ietf.org/rfc/rfc2060.txt</A>\
        \ for details."
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/MessageCountEvent.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/MessageCountEvent.java
        kind: Class
        name: MessageCountEvent
        package: javax.mail.event
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.event;\n42  \n43  import java.util.*;\n44  import javax.mail.*;\n\
        45  \n46  /**\n47   * This class models notifications from the Store connection.\
        \ These\n48   * notifications can be ALERTS or NOTICES. ALERTS must be presented\n\
        49   * to the user in a fashion that calls the user's attention to the\n50\
        \   * message.\n51   *\n52   * @author John Mani\n53   */\n54  "
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/StoreEvent.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/StoreEvent.java
        kind: Class
        name: StoreEvent
        package: javax.mail.event
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.event;\n42  \n43  import java.util.*;\n44  import javax.mail.*;\n\
        45  \n46  /**\n47   * This class models Transport events.\n48   *\n49   *\
        \ @author John Mani\n50   * @author Max Spivak\n51   * \n52   * @see javax.mail.Transport\n\
        53   * @see javax.mail.event.TransportListener\n54   */"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/TransportEvent.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/event/TransportEvent.java
        kind: Class
        name: TransportEvent
        package: javax.mail.event
    - lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/AsciiOutputStream.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/AsciiOutputStream.java
        kind: Class
        name: AsciiOutputStream
        package: ''
    - lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/AsciiOutputStream.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/AsciiOutputStream.java
        kind: Class
        name: AsciiOutputStream
        package: ''
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.*;\n44  import java.util.*;\n\
        45  import java.io.*;\n46  \n47  /**\n48   * This class represents a MIME\
        \ ContentDisposition value. It provides\n49   * methods to parse a ContentDisposition\
        \ string into individual components\n50   * and to generate a MIME style ContentDisposition\
        \ string.\n51   *\n52   * @author  John Mani\n53   */"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ContentDisposition.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ContentDisposition.java
        kind: Class
        name: ContentDisposition
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.*;\n44  import java.util.*;\n\
        45  import java.io.*;\n46  \n47  /**\n48   * This class represents a MIME\
        \ Content-Type value. It provides\n49   * methods to parse a Content-Type\
        \ string into individual components\n50   * and to generate a MIME style Content-Type\
        \ string.\n51   *\n52   * @author  John Mani\n53   */"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ContentType.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ContentType.java
        kind: Class
        name: ContentType
        package: javax.mail.internet
    - codeSnip: "40  \n41  package javax.mail.internet;\n42  \n43  import java.io.UnsupportedEncodingException;\n\
        44  import java.net.InetAddress;\n45  import java.net.UnknownHostException;\n\
        46  import java.util.List;\n47  import java.util.ArrayList;\n48  import java.util.StringTokenizer;\n\
        49  import java.util.Locale;\n50  import javax.mail.*;\n51  import com.sun.mail.util.PropUtil;\n\
        52  \n53  /**\n54   * This class represents an Internet email address using\
        \ the syntax\n55   * of <a href=\"http://www.ietf.org/rfc/rfc822.txt\">RFC822</a>.\n\
        56   * Typical address syntax is of the form \"user@host.domain\" or\n57 \
        \  * \"Personal Name &lt;user@host.domain&gt;\".\n58   *\n59   * @author Bill\
        \ Shannon\n60   * @author John Mani"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetAddress.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetAddress.java
        kind: Class
        name: InternetAddress
        package: javax.mail.internet
    - codeSnip: "41  package javax.mail.internet;\n42  \n43  import java.io.UnsupportedEncodingException;\n\
        44  import java.net.InetAddress;\n45  import java.net.UnknownHostException;\n\
        46  import java.util.List;\n47  import java.util.ArrayList;\n48  import java.util.StringTokenizer;\n\
        49  import java.util.Locale;\n50  import javax.mail.*;\n51  import com.sun.mail.util.PropUtil;\n\
        52  \n53  /**\n54   * This class represents an Internet email address using\
        \ the syntax\n55   * of <a href=\"http://www.ietf.org/rfc/rfc822.txt\">RFC822</a>.\n\
        56   * Typical address syntax is of the form \"user@host.domain\" or\n57 \
        \  * \"Personal Name &lt;user@host.domain&gt;\".\n58   *\n59   * @author Bill\
        \ Shannon\n60   * @author John Mani\n61   */"
      lineNumber: 51
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetAddress.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetAddress.java
        kind: Class
        name: InternetAddress
        package: javax.mail.internet
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import java.io.*;\n44  import java.util.*;\n\
        45  import javax.mail.*;\n46  import com.sun.mail.util.LineInputStream;\n\
        47  import com.sun.mail.util.PropUtil;\n48  \n49  /**\n50   * InternetHeaders\
        \ is a utility class that manages RFC822 style\n51   * headers. Given an RFC822\
        \ format message stream, it reads lines\n52   * until the blank line that\
        \ indicates end of header. The input stream\n53   * is positioned at the start\
        \ of the body. The lines are stored \n54   * within the object and can be\
        \ extracted as either Strings or\n55   * {@link javax.mail.Header} objects.\
        \ <p>"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetHeaders.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetHeaders.java
        kind: Class
        name: InternetHeader
        package: javax.mail.internet
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import java.io.*;\n44  import java.util.*;\n45  import javax.mail.*;\n\
        46  import com.sun.mail.util.LineInputStream;\n47  import com.sun.mail.util.PropUtil;\n\
        48  \n49  /**\n50   * InternetHeaders is a utility class that manages RFC822\
        \ style\n51   * headers. Given an RFC822 format message stream, it reads lines\n\
        52   * until the blank line that indicates end of header. The input stream\n\
        53   * is positioned at the start of the body. The lines are stored \n54 \
        \  * within the object and can be extracted as either Strings or\n55   * {@link\
        \ javax.mail.Header} objects. <p>\n56   *"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetHeaders.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetHeaders.java
        kind: Class
        name: InternetHeaders
        package: javax.mail.internet
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import java.io.*;\n44  import java.util.*;\n45  import javax.mail.*;\n\
        46  import com.sun.mail.util.LineInputStream;\n47  import com.sun.mail.util.PropUtil;\n\
        48  \n49  /**\n50   * InternetHeaders is a utility class that manages RFC822\
        \ style\n51   * headers. Given an RFC822 format message stream, it reads lines\n\
        52   * until the blank line that indicates end of header. The input stream\n\
        53   * is positioned at the start of the body. The lines are stored \n54 \
        \  * within the object and can be extracted as either Strings or\n55   * {@link\
        \ javax.mail.Header} objects. <p>\n56   *\n57   * This class is mostly intended\
        \ for service providers. MimeMessage"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetHeaders.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/InternetHeaders.java
        kind: Class
        name: InternetHeaders
        package: javax.mail.internet
    - codeSnip: "46  import java.util.Locale;\n47  import java.util.TimeZone;\n48\
        \  import java.util.logging.Level;\n49  import java.text.DateFormat;\n50 \
        \ import java.text.SimpleDateFormat;\n51  import java.text.NumberFormat;\n\
        52  import java.text.FieldPosition;\n53  import java.text.ParsePosition;\n\
        54  import java.text.ParseException;\n55  \n56  import com.sun.mail.util.MailLogger;\n\
        57  \n58  /**\n59   * Formats and parses date specification based on the\n\
        60   * draft-ietf-drums-msg-fmt-08 dated January 26, 2000. This is a followup\n\
        61   * spec to RFC822.<p>\n62   *\n63   * This class does not take pattern\
        \ strings. It always formats the\n64   * date based on the specification below.<p>\n\
        65   *\n66   * 3.3 Date and Time Specification<p>"
      lineNumber: 56
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MailDateFormat.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MailDateFormat.java
        kind: Class
        name: MailDateFormat
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n\
        45  import java.io.*;\n46  import java.util.*;\n47  import com.sun.mail.util.*;\n\
        48  \n49  /**\n50   * This class represents a MIME body part. It implements\
        \ the \n51   * <code>BodyPart</code> abstract class and the <code>MimePart</code>\n\
        52   * interface. MimeBodyParts are contained in <code>MimeMultipart</code>\n\
        53   * objects. <p>"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeBodyPart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeBodyPart.java
        kind: Class
        name: EncodedFileDataSource
        package: javax.mail.internet
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n45  import\
        \ java.io.*;\n46  import java.util.*;\n47  import com.sun.mail.util.*;\n48\
        \  \n49  /**\n50   * This class represents a MIME body part. It implements\
        \ the \n51   * <code>BodyPart</code> abstract class and the <code>MimePart</code>\n\
        52   * interface. MimeBodyParts are contained in <code>MimeMultipart</code>\n\
        53   * objects. <p>\n54   *\n55   * MimeBodyPart uses the <code>InternetHeaders</code>\
        \ class to parse\n56   * and store the headers of that body part. <p>\n57\
        \   *"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeBodyPart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeBodyPart.java
        kind: Class
        name: MimeBodyPart
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n\
        45  import java.lang.*;\n46  import java.io.*;\n47  import java.util.*;\n\
        48  import java.text.ParseException;\n49  import com.sun.mail.util.*;\n50\
        \  import javax.mail.util.SharedByteArrayInputStream;\n51  \n52  /**\n53 \
        \  * This class represents a MIME style email message. It implements"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMessage.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMessage.java
        kind: Class
        name: RecipientType
        package: javax.mail.internet
    - codeSnip: "39   */\n40  \n41  package javax.mail.internet;\n42  \n43  import\
        \ javax.mail.*;\n44  import javax.activation.*;\n45  import java.lang.*;\n\
        46  import java.io.*;\n47  import java.util.*;\n48  import java.text.ParseException;\n\
        49  import com.sun.mail.util.*;\n50  import javax.mail.util.SharedByteArrayInputStream;\n\
        51  \n52  /**\n53   * This class represents a MIME style email message. It\
        \ implements\n54   * the <code>Message</code> abstract class and the <code>MimePart</code>\n\
        55   * interface. <p>\n56   *\n57   * Clients wanting to create new MIME style\
        \ messages will instantiate\n58   * an empty MimeMessage object and then fill\
        \ it with appropriate \n59   * attributes and content. <p>"
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMessage.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMessage.java
        kind: Class
        name: MimeMessage
        package: javax.mail.internet
    - codeSnip: "40  \n41  package javax.mail.internet;\n42  \n43  import javax.mail.*;\n\
        44  import javax.activation.*;\n45  import java.lang.*;\n46  import java.io.*;\n\
        47  import java.util.*;\n48  import java.text.ParseException;\n49  import\
        \ com.sun.mail.util.*;\n50  import javax.mail.util.SharedByteArrayInputStream;\n\
        51  \n52  /**\n53   * This class represents a MIME style email message. It\
        \ implements\n54   * the <code>Message</code> abstract class and the <code>MimePart</code>\n\
        55   * interface. <p>\n56   *\n57   * Clients wanting to create new MIME style\
        \ messages will instantiate\n58   * an empty MimeMessage object and then fill\
        \ it with appropriate \n59   * attributes and content. <p>\n60   * "
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMessage.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMessage.java
        kind: Class
        name: RecipientType
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n\
        45  import java.util.*;\n46  import java.io.*;\n47  import com.sun.mail.util.LineOutputStream;\n\
        48  import com.sun.mail.util.LineInputStream;\n49  import com.sun.mail.util.ASCIIUtility;\n\
        50  import com.sun.mail.util.PropUtil;\n51  \n52  /**\n53   * The MimeMultipart\
        \ class is an implementation of the abstract Multipart"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
        kind: Class
        name: MimeMultipart
        package: javax.mail.internet
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n45  import\
        \ java.util.*;\n46  import java.io.*;\n47  import com.sun.mail.util.LineOutputStream;\n\
        48  import com.sun.mail.util.LineInputStream;\n49  import com.sun.mail.util.ASCIIUtility;\n\
        50  import com.sun.mail.util.PropUtil;\n51  \n52  /**\n53   * The MimeMultipart\
        \ class is an implementation of the abstract Multipart\n54   * class that\
        \ uses MIME conventions for the multipart data. <p>\n55   *\n56   * A MimeMultipart\
        \ is obtained from a MimePart whose primary type\n57   * is \"multipart\"\
        \ (by invoking the part's <code>getContent()</code> method)"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
        kind: Class
        name: MimeMultipart
        package: javax.mail.internet
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n45  import\
        \ java.util.*;\n46  import java.io.*;\n47  import com.sun.mail.util.LineOutputStream;\n\
        48  import com.sun.mail.util.LineInputStream;\n49  import com.sun.mail.util.ASCIIUtility;\n\
        50  import com.sun.mail.util.PropUtil;\n51  \n52  /**\n53   * The MimeMultipart\
        \ class is an implementation of the abstract Multipart\n54   * class that\
        \ uses MIME conventions for the multipart data. <p>\n55   *\n56   * A MimeMultipart\
        \ is obtained from a MimePart whose primary type\n57   * is \"multipart\"\
        \ (by invoking the part's <code>getContent()</code> method)\n58   * or it\
        \ can be created by a client as part of creating a new MimeMessage. <p>"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
        kind: Class
        name: MimeMultipart
        package: javax.mail.internet
    - codeSnip: "39   */\n40  \n41  package javax.mail.internet;\n42  \n43  import\
        \ javax.mail.*;\n44  import javax.activation.*;\n45  import java.util.*;\n\
        46  import java.io.*;\n47  import com.sun.mail.util.LineOutputStream;\n48\
        \  import com.sun.mail.util.LineInputStream;\n49  import com.sun.mail.util.ASCIIUtility;\n\
        50  import com.sun.mail.util.PropUtil;\n51  \n52  /**\n53   * The MimeMultipart\
        \ class is an implementation of the abstract Multipart\n54   * class that\
        \ uses MIME conventions for the multipart data. <p>\n55   *\n56   * A MimeMultipart\
        \ is obtained from a MimePart whose primary type\n57   * is \"multipart\"\
        \ (by invoking the part's <code>getContent()</code> method)\n58   * or it\
        \ can be created by a client as part of creating a new MimeMessage. <p>\n\
        59   *"
      lineNumber: 49
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
        kind: Class
        name: MimeMultipart
        package: javax.mail.internet
    - codeSnip: "40  \n41  package javax.mail.internet;\n42  \n43  import javax.mail.*;\n\
        44  import javax.activation.*;\n45  import java.util.*;\n46  import java.io.*;\n\
        47  import com.sun.mail.util.LineOutputStream;\n48  import com.sun.mail.util.LineInputStream;\n\
        49  import com.sun.mail.util.ASCIIUtility;\n50  import com.sun.mail.util.PropUtil;\n\
        51  \n52  /**\n53   * The MimeMultipart class is an implementation of the\
        \ abstract Multipart\n54   * class that uses MIME conventions for the multipart\
        \ data. <p>\n55   *\n56   * A MimeMultipart is obtained from a MimePart whose\
        \ primary type\n57   * is \"multipart\" (by invoking the part's <code>getContent()</code>\
        \ method)\n58   * or it can be created by a client as part of creating a new\
        \ MimeMessage. <p>\n59   *\n60   * The default multipart subtype is \"mixed\"\
        .  The other multipart"
      lineNumber: 50
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeMultipart.java
        kind: Class
        name: MimeMultipart
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.*;\n44  import java.io.*;\n\
        45  import java.util.Enumeration;\n46  \n47  /**\n48   * The MimePart interface\
        \ models an <strong>Entity</strong> as defined\n49   * by MIME (RFC2045, Section\
        \ 2.4). <p>\n50   *\n51   * MimePart extends the Part interface to add additional\
        \ RFC822 and MIME\n52   * specific semantics and attributes. It provides the\
        \ base interface for\n53   * the MimeMessage and  MimeBodyPart classes "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePart.java
        kind: Interface
        name: MimePart
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n\
        45  import java.io.*;\n46  import java.net.UnknownServiceException;\n47  import\
        \ com.sun.mail.util.PropUtil;\n48  import com.sun.mail.util.FolderClosedIOException;\n\
        49  \n50  /**\n51   * A utility class that implements a DataSource out of\n\
        52   * a MimePart. This class is primarily meant for service providers.\n\
        53   *"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePartDataSource.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePartDataSource.java
        kind: Class
        name: MimePartDataSource
        package: javax.mail.internet
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n45  import\
        \ java.io.*;\n46  import java.net.UnknownServiceException;\n47  import com.sun.mail.util.PropUtil;\n\
        48  import com.sun.mail.util.FolderClosedIOException;\n49  \n50  /**\n51 \
        \  * A utility class that implements a DataSource out of\n52   * a MimePart.\
        \ This class is primarily meant for service providers.\n53   *\n54   * @see\t\
        \tjavax.mail.internet.MimePart\n55   * @see\t\tjavax.activation.DataSource\n\
        56   * @author \tJohn Mani\n57   */"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePartDataSource.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePartDataSource.java
        kind: Class
        name: MimePartDataSource
        package: javax.mail.internet
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import javax.mail.*;\n44  import javax.activation.*;\n45  import\
        \ java.io.*;\n46  import java.net.UnknownServiceException;\n47  import com.sun.mail.util.PropUtil;\n\
        48  import com.sun.mail.util.FolderClosedIOException;\n49  \n50  /**\n51 \
        \  * A utility class that implements a DataSource out of\n52   * a MimePart.\
        \ This class is primarily meant for service providers.\n53   *\n54   * @see\t\
        \tjavax.mail.internet.MimePart\n55   * @see\t\tjavax.activation.DataSource\n\
        56   * @author \tJohn Mani\n57   */\n58  "
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePartDataSource.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimePartDataSource.java
        kind: Class
        name: MimePartDataSource
        package: javax.mail.internet
    - codeSnip: "1282      private static Hashtable java2mime;\n1283  \n1284     \
        \ static {\n1285  \tjava2mime = new Hashtable(40);\n1286  \tmime2java = new\
        \ Hashtable(10);\n1287  \n1288  \ttry {\n1289  \t    // Use this class's classloader\
        \ to load the mapping file\n1290  \t    // XXX - we should use SecuritySupport,\
        \ but it's in another package\n1291  \t    InputStream is = \n1292  \t\t \
        \   javax.mail.internet.MimeUtility.class.getResourceAsStream(\n1293  \t\t\
        \    \"/META-INF/javamail.charset.map\");\n1294  \n1295  \t    if (is != null)\
        \ {\n1296  \t\ttry {\n1297  \t\t    is = new LineInputStream(is);\n1298  \n\
        1299  \t\t    // Load the JDK-to-MIME charset mapping table\n1300  \t\t  \
        \  loadMappings((LineInputStream)is, java2mime);\n1301  \n1302  \t\t    //\
        \ Load the MIME-to-JDK charset mapping table"
      lineNumber: 1292
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeUtility.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeUtility.java
        kind: Class
        name: MimeUtility
        package: javax.mail.internet
    - codeSnip: "38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import javax.mail.MessagingException;\n44  import javax.mail.EncodingAware;\n\
        45  import javax.activation.*;\n46  import java.util.*;\n47  import java.io.*;\n\
        48  import com.sun.mail.util.*;\n49  \n50  /**\n51   * This is a utility class\
        \ that provides various MIME related\n52   * functionality. <p>\n53   *\n\
        54   * There are a set of methods to encode and decode MIME headers as \n\
        55   * per RFC 2047.  Note that, in general, these methods are\n56   * <strong>not</strong>\
        \ needed when using methods such as\n57   * <code>setSubject</code> and <code>setRecipients</code>;\
        \ JavaMail\n58   * will automatically encode and decode data when using these\
        \ \"higher"
      lineNumber: 48
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeUtility.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/MimeUtility.java
        kind: Class
        name: MimeUtility
        package: javax.mail.internet
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import java.util.Vector;\n44  import java.util.StringTokenizer;\n\
        45  import java.util.Locale;\n46  import javax.mail.*;\n47  \n48  /**\n49\
        \   * This class models an RFC1036 newsgroup address.\n50   *\n51   * @author\
        \ Bill Shannon\n52   * @author John Mani\n53   */\n54  \n55  public class\
        \ NewsAddress extends Address {\n56  "
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/NewsAddress.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/NewsAddress.java
        kind: Class
        name: NewsAddress
        package: javax.mail.internet
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import java.util.*;\n44  import java.io.*;\n\
        45  import com.sun.mail.util.PropUtil;\n46  import com.sun.mail.util.ASCIIUtility;\n\
        47  \n48  /**\n49   * This class holds MIME parameters (attribute-value pairs).\n\
        50   * The <code>mail.mime.encodeparameters</code> and\n51   * <code>mail.mime.decodeparameters</code>\
        \ System properties\n52   * control whether encoded parameters, as specified\
        \ by \n53   * <a href=\"http://www.ietf.org/rfc/rfc2231.txt\">RFC 2231</a>,\n\
        54   * are supported.  By default, such encoded parameters <b>are</b>\n55\
        \   * supported. <p>"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ParameterList.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ParameterList.java
        kind: Class
        name: ParameterList
        package: javax.mail.internet
    - codeSnip: "36   * and therefore, elected the GPL Version 2 license, then the\
        \ option applies\n37   * only if the new code is made subject to such option\
        \ by the copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import java.util.*;\n44  import java.io.*;\n45  import com.sun.mail.util.PropUtil;\n\
        46  import com.sun.mail.util.ASCIIUtility;\n47  \n48  /**\n49   * This class\
        \ holds MIME parameters (attribute-value pairs).\n50   * The <code>mail.mime.encodeparameters</code>\
        \ and\n51   * <code>mail.mime.decodeparameters</code> System properties\n\
        52   * control whether encoded parameters, as specified by \n53   * <a href=\"\
        http://www.ietf.org/rfc/rfc2231.txt\">RFC 2231</a>,\n54   * are supported.\
        \  By default, such encoded parameters <b>are</b>\n55   * supported. <p>\n\
        56   *"
      lineNumber: 46
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ParameterList.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ParameterList.java
        kind: Class
        name: ParameterList
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import javax.mail.MessagingException;\n\
        44  \n45  /**\n46   * The exception thrown due to an error in parsing RFC822\
        \ \n47   * or MIME headers\n48   *\n49   * @author John Mani\n50   */\n51\
        \  \n52  public class ParseException extends MessagingException {\n53  "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ParseException.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/ParseException.java
        kind: Class
        name: ParseException
        package: javax.mail.internet
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import java.io.*;\n44  import java.util.Enumeration;\n\
        45  import javax.mail.*;\n46  \n47  import com.sun.mail.util.LineOutputStream;\n\
        48  \n49  /**\n50   * A MimeBodyPart that handles data that has already been\
        \ encoded.\n51   * This class is useful when constructing a message and attaching\n\
        52   * data that has already been encoded (for example, using base64\n53 \
        \  * encoding).  The data may have been encoded by the application,\n54  \
        \ * or may have been stored in a file or database in encoded form.\n55   *\
        \ The encoding is supplied when this object is created.  The data"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/PreencodedMimeBodyPart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/PreencodedMimeBodyPart.java
        kind: Class
        name: PreencodedMimeBodyPart
        package: javax.mail.internet
    - codeSnip: "37   * only if the new code is made subject to such option by the\
        \ copyright\n38   * holder.\n39   */\n40  \n41  package javax.mail.internet;\n\
        42  \n43  import java.io.*;\n44  import java.util.Enumeration;\n45  import\
        \ javax.mail.*;\n46  \n47  import com.sun.mail.util.LineOutputStream;\n48\
        \  \n49  /**\n50   * A MimeBodyPart that handles data that has already been\
        \ encoded.\n51   * This class is useful when constructing a message and attaching\n\
        52   * data that has already been encoded (for example, using base64\n53 \
        \  * encoding).  The data may have been encoded by the application,\n54  \
        \ * or may have been stored in a file or database in encoded form.\n55   *\
        \ The encoding is supplied when this object is created.  The data\n56   *\
        \ is attached to this object in the usual fashion, by using the\n57   * <code>setText</code>,\
        \ <code>setContent</code>, or"
      lineNumber: 47
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/PreencodedMimeBodyPart.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/PreencodedMimeBodyPart.java
        kind: Class
        name: PreencodedMimeBodyPart
        package: javax.mail.internet
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.internet;\n42  \n43  import java.net.*;\n44  import javax.mail.Session;\n\
        45  \n46  /**\n47   * This is a utility class that generates unique values.\
        \ The generated\n48   * String contains only US-ASCII characters and hence\
        \ is safe for use\n49   * in RFC822 headers. <p>\n50   *\n51   * This is a\
        \ package private class.\n52   *\n53   * @author John Mani\n54   * @author\
        \ Max Spivak"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/UniqueValue.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/internet/UniqueValue.java
        kind: Class
        name: UniqueValue
        package: javax.mail.internet
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  import javax.mail.internet.InternetAddress;\n46  \n47  /**\n48   * This\
        \ abstract class implements string comparisons for Message \n49   * addresses.\
        \ <p>\n50   *\n51   * Note that this class differs from the <code>AddressTerm</code>\
        \ class\n52   * in that this class does comparisons on address strings rather\
        \ than\n53   * Address objects."
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressStringTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressStringTerm.java
        kind: Class
        name: AddressStringTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  import javax.mail.internet.InternetAddress;\n46  \n47  /**\n48   * This\
        \ abstract class implements string comparisons for Message \n49   * addresses.\
        \ <p>\n50   *\n51   * Note that this class differs from the <code>AddressTerm</code>\
        \ class\n52   * in that this class does comparisons on address strings rather\
        \ than\n53   * Address objects.\n54   *"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressStringTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressStringTerm.java
        kind: Class
        name: AddressStringTerm
        package: javax.mail.search
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  import javax.mail.internet.InternetAddress;\n46  \n47  /**\n48   * This\
        \ abstract class implements string comparisons for Message \n49   * addresses.\
        \ <p>\n50   *\n51   * Note that this class differs from the <code>AddressTerm</code>\
        \ class\n52   * in that this class does comparisons on address strings rather\
        \ than\n53   * Address objects.\n54   *\n55   * @since       JavaMail 1.1"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressStringTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressStringTerm.java
        kind: Class
        name: AddressStringTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Address;\n44  \n45  /**\n\
        46   * This class implements Message Address comparisons.\n47   *\n48   *\
        \ @author Bill Shannon\n49   * @author John Mani\n50   */\n51  \n52  public\
        \ abstract class AddressTerm extends SearchTerm {\n53      /**"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AddressTerm.java
        kind: Class
        name: AddressTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  \n45  /**\n\
        46   * This class implements the logical AND operator on individual\n47  \
        \ * SearchTerms.\n48   *\n49   * @author Bill Shannon\n50   * @author John\
        \ Mani\n51   */\n52  public final class AndTerm extends SearchTerm {\n53  "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AndTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/AndTerm.java
        kind: Class
        name: AndTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.*;\n44  \n45  /**\n46  \
        \ * This class implements searches on a message body.\n47   * All parts of\
        \ the message that are of MIME type \"text/*\" are searched.\n48   * The pattern\
        \ is a simple string that must appear as a substring in\n49   * the message\
        \ body.\n50   * \n51   * @author Bill Shannon\n52   * @author John Mani\n\
        53   */"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/BodyTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/BodyTerm.java
        kind: Class
        name: BodyTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.*;\n44  \n45  /**\n46  \
        \ * This class implements comparisons for Message Flags.\n47   *\n48   * @author\
        \ Bill Shannon\n49   * @author John Mani\n50   */\n51  public final class\
        \ FlagTerm extends SearchTerm {\n52  \n53      /**"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FlagTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FlagTerm.java
        kind: Class
        name: FlagTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements string comparisons for the From\
        \ Address\n48   * header. <p>\n49   *\n50   * Note that this class differs\
        \ from the <code>FromTerm</code> class\n51   * in that this class does comparisons\
        \ on address strings rather than Address\n52   * objects. The string comparisons\
        \ are case-insensitive.\n53   *"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromStringTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromStringTerm.java
        kind: Class
        name: FromStringTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements string comparisons for the From\
        \ Address\n48   * header. <p>\n49   *\n50   * Note that this class differs\
        \ from the <code>FromTerm</code> class\n51   * in that this class does comparisons\
        \ on address strings rather than Address\n52   * objects. The string comparisons\
        \ are case-insensitive.\n53   *\n54   * @since       JavaMail 1.1"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromStringTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromStringTerm.java
        kind: Class
        name: FromStringTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements comparisons for the From Address\
        \ header.\n48   *\n49   * @author Bill Shannon\n50   * @author John Mani\n\
        51   */\n52  public final class FromTerm extends AddressTerm {\n53  "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromTerm.java
        kind: Class
        name: FromTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements comparisons for the From Address\
        \ header.\n48   *\n49   * @author Bill Shannon\n50   * @author John Mani\n\
        51   */\n52  public final class FromTerm extends AddressTerm {\n53  \n54 \
        \     private static final long serialVersionUID = 5214730291502658665L;"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/FromTerm.java
        kind: Class
        name: FromTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import java.util.Locale;\n44  import javax.mail.Message;\n\
        45  \n46  /**\n47   * This class implements comparisons for Message headers.\n\
        48   * The comparison is case-insensitive.\n49   *\n50   * @author Bill Shannon\n\
        51   * @author John Mani\n52   */\n53  public final class HeaderTerm extends\
        \ StringTerm {\n54      /**"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/HeaderTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/HeaderTerm.java
        kind: Class
        name: HeaderTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  \n45  /**\n\
        46   * This term models the RFC822 \"MessageId\" - a message-id for \n47 \
        \  * Internet messages that is supposed to be unique per message.\n48   *\
        \ Clients can use this term to search a folder for a message given\n49   *\
        \ its MessageId. <p>\n50   *\n51   * The MessageId is represented as a String.\n\
        52   *\n53   * @author Bill Shannon"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/MessageIDTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/MessageIDTerm.java
        kind: Class
        name: MessageIDTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  \n45  /**\n\
        46   * This class implements comparisons for Message numbers.\n47   *\n48\
        \   * @author Bill Shannon\n49   * @author John Mani\n50   */\n51  public\
        \ final class MessageNumberTerm extends IntegerComparisonTerm {\n52  \n53\
        \      private static final long serialVersionUID = -5379625829658623812L;"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/MessageNumberTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/MessageNumberTerm.java
        kind: Class
        name: MessageNumberTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  \n45  /**\n\
        46   * This class implements the logical NEGATION operator.\n47   *\n48  \
        \ * @author Bill Shannon\n49   * @author John Mani\n50   */\n51  public final\
        \ class NotTerm extends SearchTerm {\n52      /**\n53       * The search term\
        \ to negate."
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/NotTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/NotTerm.java
        kind: Class
        name: NotTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  \n45  /**\n\
        46   * This class implements the logical OR operator on individual SearchTerms.\n\
        47   *\n48   * @author Bill Shannon\n49   * @author John Mani\n50   */\n51\
        \  public final class OrTerm extends SearchTerm {\n52  \n53      /**"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/OrTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/OrTerm.java
        kind: Class
        name: OrTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import java.util.Date;\n44  import javax.mail.Message;\n\
        45  \n46  /**\n47   * This class implements comparisons for the Message Received\
        \ date\n48   *\n49   * @author Bill Shannon\n50   * @author John Mani\n51\
        \   */\n52  public final class ReceivedDateTerm extends DateTerm {\n53  \n\
        54      private static final long serialVersionUID = -2756695246195503170L;"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/ReceivedDateTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/ReceivedDateTerm.java
        kind: Class
        name: ReceivedDateTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements string comparisons for the Recipient\
        \ Address\n48   * headers. <p>\n49   *\n50   * Note that this class differs\
        \ from the <code>RecipientTerm</code> class\n51   * in that this class does\
        \ comparisons on address strings rather than Address\n52   * objects. The\
        \ string comparisons are case-insensitive.\n53   *"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientStringTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientStringTerm.java
        kind: Class
        name: RecipientStringTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements string comparisons for the Recipient\
        \ Address\n48   * headers. <p>\n49   *\n50   * Note that this class differs\
        \ from the <code>RecipientTerm</code> class\n51   * in that this class does\
        \ comparisons on address strings rather than Address\n52   * objects. The\
        \ string comparisons are case-insensitive.\n53   *\n54   * @since       JavaMail\
        \ 1.1"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientStringTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientStringTerm.java
        kind: Class
        name: RecipientStringTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements comparisons for the Recipient\
        \ Address headers.\n48   *\n49   * @author Bill Shannon\n50   * @author John\
        \ Mani\n51   */\n52  public final class RecipientTerm extends AddressTerm\
        \ {\n53  "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientTerm.java
        kind: Class
        name: RecipientTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  import javax.mail.Address;\n\
        45  \n46  /**\n47   * This class implements comparisons for the Recipient\
        \ Address headers.\n48   *\n49   * @author Bill Shannon\n50   * @author John\
        \ Mani\n51   */\n52  public final class RecipientTerm extends AddressTerm\
        \ {\n53  \n54      /**"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/RecipientTerm.java
        kind: Class
        name: RecipientTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.MessagingException;\n44\
        \  \n45  \n46  /**\n47   * The exception thrown when a Search expression could\
        \ not be handled.\n48   *\n49   * @author John Mani\n50   */\n51  \n52  public\
        \ class SearchException extends MessagingException {\n53  "
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SearchException.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SearchException.java
        kind: Class
        name: SearchException
        package: javax.mail.search
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import java.io.Serializable;\n44  \n45  import\
        \ javax.mail.Message;\n46  \n47  /**\n48   * Search criteria are expressed\
        \ as a tree of search-terms, forming\n49   * a parse-tree for the search expression.\
        \ <p>\n50   *\n51   * Search-terms are represented by this class. This is\
        \ an abstract\n52   * class; subclasses implement specific match methods.\
        \ <p>\n53   *\n54   * Search terms are serializable, which allows storing\
        \ a search term\n55   * between sessions."
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SearchTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SearchTerm.java
        kind: Class
        name: SearchTerm
        package: javax.mail.search
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import java.util.Date;\n44  import javax.mail.Message;\n\
        45  \n46  /**\n47   * This class implements comparisons for the Message SentDate.\n\
        48   *\n49   * @author Bill Shannon\n50   * @author John Mani\n51   */\n52\
        \  public final class SentDateTerm extends DateTerm {\n53  \n54      private\
        \ static final long serialVersionUID = 5647755030530907263L;"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SentDateTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SentDateTerm.java
        kind: Class
        name: SentDateTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  \n45  /**\n\
        46   * This class implements comparisons for Message sizes.\n47   *\n48  \
        \ * @author Bill Shannon\n49   * @author John Mani\n50   */\n51  public final\
        \ class SizeTerm extends IntegerComparisonTerm {\n52  \n53      private static\
        \ final long serialVersionUID = -2556219451005103709L;"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SizeTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SizeTerm.java
        kind: Class
        name: SizeTerm
        package: javax.mail.search
    - codeSnip: "33   * recipient has the option to distribute your version of this\
        \ file under\n34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.search;\n42  \n43  import javax.mail.Message;\n44  \n45  /**\n\
        46   * This class implements comparisons for the message Subject header.\n\
        47   * The comparison is case-insensitive.  The pattern is a simple string\n\
        48   * that must appear as a substring in the Subject.\n49   *\n50   * @author\
        \ Bill Shannon\n51   * @author John Mani\n52   */\n53  public final class\
        \ SubjectTerm extends StringTerm {"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SubjectTerm.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/search/SubjectTerm.java
        kind: Class
        name: SubjectTerm
        package: javax.mail.search
    - codeSnip: "35   * its licensees as provided above.  However, if you add GPL\
        \ Version 2 code\n36   * and therefore, elected the GPL Version 2 license,\
        \ then the option applies\n37   * only if the new code is made subject to\
        \ such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.util;\n42  \n43  import java.io.*;\n44  import javax.activation.*;\n\
        45  import javax.mail.internet.*;\n46  \n47  /**\n48   * A DataSource backed\
        \ by a byte array.  The byte array may be\n49   * passed in directly, or may\
        \ be initialized from an InputStream\n50   * or a String.\n51   *\n52   *\
        \ @since JavaMail 1.4\n53   * @author John Mani\n54   * @author Bill Shannon\n\
        55   * @author Max Spivak"
      lineNumber: 45
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/util/ByteArrayDataSource.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/util/ByteArrayDataSource.java
        kind: Class
        name: DSByteArrayOutputStream
        package: javax.mail.util
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.util;\n42  \n43  import java.io.*;\n44  import javax.mail.internet.SharedInputStream;\n\
        45  \n46  /**\n47   * A ByteArrayInputStream that implements the SharedInputStream\
        \ interface,\n48   * allowing the underlying byte array to be shared between\
        \ multiple readers.\n49   *\n50   * @author  Bill Shannon\n51   * @since JavaMail\
        \ 1.4\n52   */\n53  \n54  public class SharedByteArrayInputStream extends\
        \ ByteArrayInputStream"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/util/SharedByteArrayInputStream.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/util/SharedByteArrayInputStream.java
        kind: Class
        name: SharedByteArrayInputStream
        package: javax.mail.util
    - codeSnip: "34   * either the CDDL, the GPL Version 2 or to extend the choice\
        \ of license to\n35   * its licensees as provided above.  However, if you\
        \ add GPL Version 2 code\n36   * and therefore, elected the GPL Version 2\
        \ license, then the option applies\n37   * only if the new code is made subject\
        \ to such option by the copyright\n38   * holder.\n39   */\n40  \n41  package\
        \ javax.mail.util;\n42  \n43  import java.io.*;\n44  import javax.mail.internet.SharedInputStream;\n\
        45  \n46  /**\n47   * A <code>SharedFileInputStream</code> is a\n48   * <code>BufferedInputStream</code>\
        \ that buffers\n49   * data from the file and supports the <code>mark</code>\n\
        50   * and <code>reset</code> methods.  It also supports the\n51   * <code>newStream</code>\
        \ method that allows you to create\n52   * other streams that represent subsets\
        \ of the file.\n53   * A <code>RandomAccessFile</code> object is used to\n\
        54   * access the file data. <p>"
      lineNumber: 44
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/util/SharedFileInputStream.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-api/7.0/javax/mail/util/SharedFileInputStream.java
        kind: Class
        name: SharedFile
        package: javax.mail.util
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Connect=Mail
    - tag=Java EE=Mail
    - tag=Mail usage
    - tag=Other=Mail
  technology-usage-database-01000:
    description: ''
    incidents:
    - codeSnip: "157   * }\n158   * </pre>\n159   * <p>\n160   * @see javax.sql.DataSource\n\
        161   * @see javax.sql.XADataSource\n162   * @see javax.sql.ConnectionPoolDataSource\n\
        163   * @since Common Annotations 1.1\n164   */\n165  @Target({ElementType.TYPE})\n\
        166  @Retention(RetentionPolicy.RUNTIME)\n167  public @interface DataSourceDefinition\
        \ {\n168  \n169      /**\n170       * JNDI name by which the data source will\
        \ be registered.\n171       * @since 1.1\n172       */\n173       String name();\n\
        174  \n175      /**\n176       * DataSource implementation class name which\
        \ implements:\n177       *  <code>javax.sql.DataSource</code> or <code>javax.sql.XADataSource</code>"
      lineNumber: 167
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/annotation/sql/DataSourceDefinition.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/annotation/sql/DataSourceDefinition.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.annotation.sql
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Database=JDBC datasources
    - tag=Java EE=JDBC datasources
    - tag=Store=JDBC datasources
  technology-usage-database-01001:
    description: ''
    incidents:
    - codeSnip: "157   * }\n158   * </pre>\n159   * <p>\n160   * @see javax.sql.DataSource\n\
        161   * @see javax.sql.XADataSource\n162   * @see javax.sql.ConnectionPoolDataSource\n\
        163   * @since Common Annotations 1.1\n164   */\n165  @Target({ElementType.TYPE})\n\
        166  @Retention(RetentionPolicy.RUNTIME)\n167  public @interface DataSourceDefinition\
        \ {\n168  \n169      /**\n170       * JNDI name by which the data source will\
        \ be registered.\n171       * @since 1.1\n172       */\n173       String name();\n\
        174  \n175      /**\n176       * DataSource implementation class name which\
        \ implements:\n177       *  <code>javax.sql.DataSource</code> or <code>javax.sql.XADataSource</code>"
      lineNumber: 167
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/annotation/sql/DataSourceDefinition.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/annotation/sql/DataSourceDefinition.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.annotation.sql
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Database=JDBC XA datasources
    - tag=Java EE=JDBC XA datasources
    - tag=Store=JDBC XA datasources
  technology-usage-database-01100:
    description: JPA Entities
    incidents:
    - codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  2  <persistence\
        \ version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\
        \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4           \
        \    xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n\
        \  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\
        >\n  7      <persistence-unit name=\"primary\">\n  8          <jta-data-source>java:jboss/datasources/CoolstoreDS</jta-data-source>\n\
        \  9          <properties>\n 10              <property name=\"javax.persistence.schema-generation.database.action\"\
        \ value=\"none\"/>\n 11              <property name=\"hibernate.show_sql\"\
        \ value=\"false\" />\n 12              <property name=\"hibernate.format_sql\"\
        \ value=\"true\" />\n 13              <property name=\"hibernate.use_sql_comments\"\
        \ value=\"true\" />\n 14              <property name=\"hibernate.jdbc.use_get_generated_keys\"\
        \ value=\"false\" />\n 15          </properties>\n 16      </persistence-unit>\n\
        \ 17  </persistence>\n"
      lineNumber: 3
      message: ''
      uri: file:///opt/input/source/src/main/resources/META-INF/persistence.xml
      variables:
        matchingText: http://xmlns.jcp.org/xml/ns/persistence
    - codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  2  <persistence\
        \ version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\
        \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4           \
        \    xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n\
        \  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\
        >\n  7      <persistence-unit name=\"primary\">\n  8          <jta-data-source>java:jboss/datasources/CoolstoreDS</jta-data-source>\n\
        \  9          <properties>\n 10              <property name=\"javax.persistence.schema-generation.database.action\"\
        \ value=\"none\"/>\n 11              <property name=\"hibernate.show_sql\"\
        \ value=\"false\" />\n 12              <property name=\"hibernate.format_sql\"\
        \ value=\"true\" />\n 13              <property name=\"hibernate.use_sql_comments\"\
        \ value=\"true\" />\n 14              <property name=\"hibernate.jdbc.use_get_generated_keys\"\
        \ value=\"false\" />\n 15          </properties>\n 16      </persistence-unit>\n\
        \ 17  </persistence>\n"
      lineNumber: 5
      message: ''
      uri: file:///opt/input/source/src/main/resources/META-INF/persistence.xml
      variables:
        matchingText: http://xmlns.jcp.org/xml/ns/persistence
    - codeSnip: "  1  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  2  <persistence\
        \ version=\"2.1\"\n  3               xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\
        \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  4           \
        \    xsi:schemaLocation=\"\n  5          http://xmlns.jcp.org/xml/ns/persistence\n\
        \  6          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\
        >\n  7      <persistence-unit name=\"primary\">\n  8          <jta-data-source>java:jboss/datasources/CoolstoreDS</jta-data-source>\n\
        \  9          <properties>\n 10              <property name=\"javax.persistence.schema-generation.database.action\"\
        \ value=\"none\"/>\n 11              <property name=\"hibernate.show_sql\"\
        \ value=\"false\" />\n 12              <property name=\"hibernate.format_sql\"\
        \ value=\"true\" />\n 13              <property name=\"hibernate.use_sql_comments\"\
        \ value=\"true\" />\n 14              <property name=\"hibernate.jdbc.use_get_generated_keys\"\
        \ value=\"false\" />\n 15          </properties>\n 16      </persistence-unit>\n\
        \ 17  </persistence>\n"
      lineNumber: 6
      message: ''
      uri: file:///opt/input/source/src/main/resources/META-INF/persistence.xml
      variables:
        matchingText: http://xmlns.jcp.org/xml/ns/persistence
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Java EE=JPA entities
    - tag=Persistence=JPA entities
    - tag=Store=JPA entities
  technology-usage-database-01200:
    description: JPA Queries
    incidents:
    - codeSnip: " 1  package com.redhat.coolstore.model;\n 2  \n 3  import javax.persistence.*;\n\
        \ 4  import java.io.Serializable;\n 5  \n 6  @Entity\n 7  @Table(name = \"\
        PRODUCT_CATALOG\", uniqueConstraints = @UniqueConstraint(columnNames = \"\
        itemId\"))\n 8  public class CatalogItemEntity implements Serializable {\n\
        \ 9  \n10  \tprivate static final long serialVersionUID = -7304814269819778382L;\n\
        11  \t\n12  \t@Id\n13  \tprivate String itemId;\n14  \n15      @Column(length\
        \ = 80)\n16      private String name;"
      lineNumber: 6
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: " 1  package com.redhat.coolstore.model;\n 2  \n 3  import javax.persistence.*;\n\
        \ 4  import java.io.Serializable;\n 5  \n 6  @Entity\n 7  @Table(name = \"\
        PRODUCT_CATALOG\", uniqueConstraints = @UniqueConstraint(columnNames = \"\
        itemId\"))\n 8  public class CatalogItemEntity implements Serializable {\n\
        \ 9  \n10  \tprivate static final long serialVersionUID = -7304814269819778382L;\n\
        11  \t\n12  \t@Id\n13  \tprivate String itemId;\n14  \n15      @Column(length\
        \ = 80)\n16      private String name;\n17  "
      lineNumber: 7
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/CatalogItemEntity.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: " 2  \n 3  import java.io.Serializable;\n 4  \n 5  import javax.persistence.Column;\n\
        \ 6  import javax.persistence.Entity;\n 7  import javax.persistence.Id;\n\
        \ 8  import javax.persistence.Table;\n 9  import javax.persistence.UniqueConstraint;\n\
        10  import javax.xml.bind.annotation.XmlRootElement;\n11  \n12  @Entity\n\
        13  @XmlRootElement\n14  @Table(name = \"INVENTORY\", uniqueConstraints =\
        \ @UniqueConstraint(columnNames = \"itemId\"))\n15  public class InventoryEntity\
        \ implements Serializable {\n16  \n17  \tprivate static final long serialVersionUID\
        \ = 7526472295622776147L; \n18  \n19      @Id\n20      private String itemId;\n\
        21  \n22  "
      lineNumber: 12
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: " 4  \n 5  import javax.persistence.Column;\n 6  import javax.persistence.Entity;\n\
        \ 7  import javax.persistence.Id;\n 8  import javax.persistence.Table;\n 9\
        \  import javax.persistence.UniqueConstraint;\n10  import javax.xml.bind.annotation.XmlRootElement;\n\
        11  \n12  @Entity\n13  @XmlRootElement\n14  @Table(name = \"INVENTORY\", uniqueConstraints\
        \ = @UniqueConstraint(columnNames = \"itemId\"))\n15  public class InventoryEntity\
        \ implements Serializable {\n16  \n17  \tprivate static final long serialVersionUID\
        \ = 7526472295622776147L; \n18  \n19      @Id\n20      private String itemId;\n\
        21  \n22  \n23      @Column\n24      private String location;"
      lineNumber: 14
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: " 7  import javax.persistence.CascadeType;\n 8  import javax.persistence.Column;\n\
        \ 9  import javax.persistence.Entity;\n10  import javax.persistence.FetchType;\n\
        11  import javax.persistence.GeneratedValue;\n12  import javax.persistence.Id;\n\
        13  import javax.persistence.JoinColumn;\n14  import javax.persistence.OneToMany;\n\
        15  import javax.persistence.Table;\n16  \n17  @Entity\n18  @Table(name =\
        \ \"ORDERS\")\n19  public class Order implements Serializable {\n20  \n21\
        \  \tprivate static final long serialVersionUID = -1L;\n22  \n23  \t@Id\n\
        24  \t@GeneratedValue\n25  \tprivate long orderId;\n26  \n27  \tprivate String\
        \ customerName;"
      lineNumber: 17
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: " 8  import javax.persistence.Column;\n 9  import javax.persistence.Entity;\n\
        10  import javax.persistence.FetchType;\n11  import javax.persistence.GeneratedValue;\n\
        12  import javax.persistence.Id;\n13  import javax.persistence.JoinColumn;\n\
        14  import javax.persistence.OneToMany;\n15  import javax.persistence.Table;\n\
        16  \n17  @Entity\n18  @Table(name = \"ORDERS\")\n19  public class Order implements\
        \ Serializable {\n20  \n21  \tprivate static final long serialVersionUID =\
        \ -1L;\n22  \n23  \t@Id\n24  \t@GeneratedValue\n25  \tprivate long orderId;\n\
        26  \n27  \tprivate String customerName;\n28  "
      lineNumber: 18
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/Order.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: " 1  package com.redhat.coolstore.model;\n 2  \n 3  import java.io.Serializable;\n\
        \ 4  \n 5  import javax.persistence.Column;\n 6  import javax.persistence.Entity;\n\
        \ 7  import javax.persistence.GeneratedValue;\n 8  import javax.persistence.Id;\n\
        \ 9  import javax.persistence.Table;\n10  \n11  @Entity\n12  @Table(name =\
        \ \"ORDER_ITEMS\")\n13  public class OrderItem implements Serializable {\n\
        14  \tprivate static final long serialVersionUID = 64565445665456666L;\n15\
        \  \n16  \t@Id\n17  \t@Column(name=\"ID\")\n18  \t@GeneratedValue\n19  \t\
        private long id;\n20  \n21  \tprivate int quantity;"
      lineNumber: 11
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: " 2  \n 3  import java.io.Serializable;\n 4  \n 5  import javax.persistence.Column;\n\
        \ 6  import javax.persistence.Entity;\n 7  import javax.persistence.GeneratedValue;\n\
        \ 8  import javax.persistence.Id;\n 9  import javax.persistence.Table;\n10\
        \  \n11  @Entity\n12  @Table(name = \"ORDER_ITEMS\")\n13  public class OrderItem\
        \ implements Serializable {\n14  \tprivate static final long serialVersionUID\
        \ = 64565445665456666L;\n15  \n16  \t@Id\n17  \t@Column(name=\"ID\")\n18 \
        \ \t@GeneratedValue\n19  \tprivate long id;\n20  \n21  \tprivate int quantity;\n\
        22  "
      lineNumber: 12
      message: ''
      uri: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
      variables:
        file: file:///opt/input/source/src/main/java/com/redhat/coolstore/model/OrderItem.java
        kind: Class
        name: Entity
        package: com.redhat.coolstore.model
    - codeSnip: "57   *    public class ValuedCustomer extends Customer { ... }\n\
        58   * </pre>\n59   *\n60   * @see DiscriminatorColumn\n61   *\n62   * @since\
        \ Java Persistence 1.0\n63   */\n64  @Target({TYPE}) \n65  @Retention(RUNTIME)\n\
        66  \n67  public @interface DiscriminatorValue {\n68  \n69      /**\n70  \
        \     * (Optional) The value that indicates that the\n71       * row is an\
        \ entity of the annotated entity type.\n72       *\n73       * <p> If the\
        \ <code>DiscriminatorValue</code> annotation is not\n74       * specified\
        \ and a discriminator column is used, a\n75       * provider-specific function\
        \ will be used to generate a value\n76       * representing the entity type.\
        \  If the <code>DiscriminatorType</code> is\n77       * <code>STRING</code>,\
        \ the discriminator value default is the"
      lineNumber: 67
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/DiscriminatorValue.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/DiscriminatorValue.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.persistence
    - codeSnip: "23  \n24  /**\n25   * Specifies that the class is an entity. This\
        \ annotation is applied to the\n26   * entity class.\n27   * \n28   * @since\
        \ Java Persistence 1.0\n29   */\n30  @Documented\n31  @Target(TYPE)\n32  @Retention(RUNTIME)\n\
        33  public @interface Entity {\n34  \n35  \t/**\n36  \t * (Optional) The entity\
        \ name. Defaults to the unqualified\n37  \t * name of the entity class. This\
        \ name is used to refer to the\n38  \t * entity in queries. The name must\
        \ not be a reserved literal\n39  \t * in the Java Persistence query language.\n\
        40  \t */\n41  \tString name() default \"\";\n42  }\n"
      lineNumber: 33
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/Entity.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/Entity.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.persistence
    - codeSnip: "24   * Specifies multiple named Java Persistence query language queries.\n\
        25   * Query names are scoped to the persistence unit.\n26   * The <code>NamedQueries</code>\
        \ annotation can be applied to an entity or mapped superclass.\n27   *\n28\
        \   * @see NamedQuery\n29   * \n30   * @since Java Persistence 1.0\n31   */\n\
        32  @Target({TYPE})  \n33  @Retention(RUNTIME) \n34  public @interface NamedQueries\
        \ { \n35  \n36      /** (Required) An array of <code>NamedQuery</code> annotations.\
        \ */\n37       NamedQuery [] value (); \n38  }\n"
      lineNumber: 34
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/NamedQueries.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/NamedQueries.java
        kind: Interface
        name: java.lang.annotation.Target
        package: 'javax.persistence '
    - codeSnip: "44   *    ...\n45   *    customers = em.createNamedQuery(\"findAllCustomersWithName\"\
        )\n46   *            .setParameter(\"custName\", \"Smith\")\n47   *      \
        \      .getResultList();\n48   * </pre>\n49   *\n50   * @since Java Persistence\
        \ 1.0\n51   */\n52  @Target({TYPE}) \n53  @Retention(RUNTIME)\n54  public\
        \ @interface NamedQuery {\n55  \n56      /** \n57       * (Required) The name\
        \ used to refer to the query with the {@link EntityManager} \n58       * methods\
        \ that create query objects. \n59       */\n60      String name();\n61  \n\
        62      /** (Required) \n63       * The query string in the Java Persistence\
        \ query language. \n64       */"
      lineNumber: 54
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/NamedQuery.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/NamedQuery.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.persistence
    - codeSnip: "33   *\n34   *    &#064;Entity\n35   *    &#064;Table(name=\"CUST\"\
        , schema=\"RECORDS\")\n36   *    public class Customer { ... }\n37   * </pre>\n\
        38   *\n39   * @since Java Persistence 1.0\n40   */\n41  @Target(TYPE) \n\
        42  @Retention(RUNTIME)\n43  public @interface Table {\n44  \n45      /**\n\
        46       * (Optional) The name of the table.\n47       * <p> Defaults to the\
        \ entity name.\n48       */\n49      String name() default \"\";\n50  \n51\
        \      /** (Optional) The catalog of the table.\n52       * <p> Defaults to\
        \ the default catalog.\n53       */"
      lineNumber: 43
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/Table.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/persistence/Table.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.persistence
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Java EE=JPA named queries
    - tag=Persistence=JPA named queries
    - tag=Store=JPA named queries
  technology-usage-database-01300:
    description: Persistence Units
    incidents:
    - message: ''
      uri: file:///opt/input/source/src/main/resources/META-INF/persistence.xml
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Java EE=Persistence units
    - tag=Persistence=Persistence units
    - tag=Store=Persistence units
  technology-usage-ejb-01400:
    description: ''
    incidents:
    - message: ''
      uri: ''
      variables:
        tags:
        - EJB Timer
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Execute=EJB Timer
    - tag=Java EE=EJB Timer
    - tag=Processing=EJB Timer
  technology-usage-web-01300:
    description: Embedded technology - WebSocket
    incidents:
    - codeSnip: "67   *         System.out.println(\"Greeting received:\" + message);\n\
        68   *     }\n69   *\n70   * }\n71   * </code></pre>\n72   *\n73   * @author\
        \ dannycoward\n74   */\n75  @Retention(RetentionPolicy.RUNTIME)\n76  @Target(ElementType.TYPE)\n\
        77  public @interface ServerEndpoint {\n78  \n79      /**\n80       * The\
        \ URI or URI-template, level-1 (<a href=\"http://http://tools.ietf.org/html/rfc6570\"\
        >See RFC 6570</a>) where the endpoint will be deployed. The URI us relative\
        \ to the\n81       * root of the web socket container and must begin with\
        \ a leading \"/\". Trailing \"/\"'s are ignored. Examples:\n82       * <pre><code>\n\
        83       * &#64;ServerEndpoint(\"/chat\")\n84       * &#64;ServerEndpoint(\"\
        /chat/{user}\")\n85       * &#64;ServerEndpoint(\"/booking/{privilege-level}\"\
        )\n86       * </code></pre>\n87       *"
      lineNumber: 77
      message: ''
      uri: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/websocket/server/ServerEndpoint.java
      variables:
        file: file:///root/.m2/repository/javax/javaee-web-api/7.0/javax/websocket/server/ServerEndpoint.java
        kind: Interface
        name: java.lang.annotation.Target
        package: javax.websocket.server
    labels:
    - discovery
    - konveyor.io/include=always
    - tag=Embedded technology - WebSocket
    - tag=WebSocket
name: technology-usage
tags:
- Bean=EJB XML
- CDI
- Clustering Web Session
- Clustering=Web Session
- Connect=EJB XML
- Connect=Mail
- Connect=RMI
- Database=JDBC XA datasources
- Database=JDBC datasources
- EJB Timer
- Embedded technology - WebSocket
- Execute=CDI
- Execute=EJB Timer
- Execute=Java EE JSON-P
- Inversion of Control=CDI
- Java EE JSON-P
- Java EE=CDI
- Java EE=EJB Timer
- Java EE=EJB XML
- Java EE=JDBC XA datasources
- Java EE=JDBC datasources
- Java EE=JPA XML
- Java EE=JPA entities
- Java EE=JPA named queries
- Java EE=Java EE JSON-P
- Java EE=Mail
- Java EE=Persistence units
- Java EE=RMI
- Java EE=Web Session
- Java Threads
- Mail usage
- Other=Mail
- Other=RMI
- Persistence=JPA XML
- Persistence=JPA entities
- Persistence=JPA named queries
- Persistence=Persistence units
- Processing=EJB Timer
- Processing=Java EE JSON-P
- Store=JDBC XA datasources
- Store=JDBC datasources
- Store=JPA XML
- Store=JPA entities
- Store=JPA named queries
- Store=Persistence units
- Sustain=Web Session
- Threads
- WebSocket
